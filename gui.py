import os
import shutil
import sys
import webbrowser
import numpy as np
import subprocess
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget, QWidget, QSizePolicy,
                            QVBoxLayout, QLabel, QPushButton, QStyleFactory, QLineEdit, 
                            QHBoxLayout, QGridLayout, QComboBox, QMessageBox, QSpacerItem,  
                            QRadioButton, QGroupBox, QFormLayout, QStackedWidget, QProgressDialog)
from PyQt5.QtCore import QSize
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt



class ModelViewer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

# Main Window settings
    def initUI(self):

        self.setWindowTitle('BiCMat Nanopolysaccharide Builder')
        self.setGeometry(300, 300, 1000, 800)  # x, y, width, height

        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)


        font = QFont("Arial", 13) 
        self.tabs.setFont(font)

        self.celluloseTab = QTabWidget() 
        self.chitinTab = QTabWidget() 
        self.bundleTab = QTabWidget() 


        self.tabs.addTab(self.celluloseTab, "Cellulose Models")
        self.tabs.addTab(self.chitinTab, "Chitin Models")
        self.tabs.addTab(self.bundleTab, "Nanopolysaccharide bundle")

        self.tabs.setStyle(QStyleFactory.create('Fusion'))
        self.tabs.tabBar().setExpanding(True)
        self.tabs.tabBar().setStyleSheet("QTabBar::tab { width: 250px; }")

        self.populateCelluloseTab()

        self.populateChitinSubTabs()

        self.populateBundleSubTab()
        #self.chitinTab.setStyleSheet("""
        #    QTabBar::tab {
        #        width: %dpx;
        #        font-size: 14px;  /* Set font size for the tab labels */
        #        font-family: Arial; /* Optional: specify the font family */
        #    }
        #    """ % (self.chitinTab.width() // 3.412))

############################################################cellulose_building#########################################################
###cellulose_builder place
    def populateCelluloseTab(self):
        CelluloseITab = QWidget()
        CelluloseIITab = QWidget()  
        self.populateCelluloseITab(CelluloseITab)
        self.populateCelluloseIITab(CelluloseIITab)

        self.celluloseTab.addTab(CelluloseITab, "Cellulose-I Builder")
        self.celluloseTab.addTab(CelluloseIITab, "Cellulose-II Builder")
        self.celluloseTab.setStyle(QStyleFactory.create('Fusion'))
        self.celluloseTab.tabBar().setExpanding(False)  # Disable automatic expanding
        self.updateTabWidths()  

    def populateCelluloseITab(self, tab):
        CelluloseI_mainLayout = QVBoxLayout(tab)  # Primary layout to arrange content vertically
        CelluloseI_topLayout = QHBoxLayout()  # Use horizontal layout for top-aligned items
        CelluloseI_topLayout.setAlignment(Qt.AlignTop | Qt.AlignLeft)  # Align content to the top left
   
        CelluloseI_font = QFont("Arial", 13)
    
        # Label for the dropdown
        CelluloseI_label = QLabel("Please select the crystal structure to build Cellulose-I crystallite:")
        CelluloseI_label.setFont(CelluloseI_font)
        CelluloseI_topLayout.addWidget(CelluloseI_label)  # Add label to the horizontal layout
        CelluloseI_comboBox = QComboBox()
        CelluloseI_comboBox.setFont(CelluloseI_font)
        CelluloseI_comboBox.addItem("Select here")  
        CelluloseI_comboBox.addItem("Cellulose-Iα")
        CelluloseI_comboBox.addItem("Cellulose-Iβ")
        CelluloseI_comboBox.currentIndexChanged.connect(self.updateCelluloseIOptions)
        CelluloseI_comboBox.setMinimumSize(QSize(240, 30))  # Set minimum size
        CelluloseI_comboBox.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        CelluloseI_comboBox.setMaxVisibleItems(10)
        CelluloseI_topLayout.addWidget(CelluloseI_comboBox)  # Add combo box to the horizontal layout
        CelluloseI_mainLayout.addLayout(CelluloseI_topLayout) 
    
        self.CelluloseI_StackedWidget = QStackedWidget()
        self.CelluloseI_StackedWidget.addWidget(QWidget())  
        self.setupCelluloseIAOptions()  # Setup options for CelluloseIα
        self.setupCelluloseIBOptions()  # Setup options for CelluloseIβ
        CelluloseI_mainLayout.addWidget(self.CelluloseI_StackedWidget)  # Add the stacked widget to the main verti
    
    def updateCelluloseIOptions(self, index):
        #print("Selected index in CelluloseI ComboBox:", index)
        if index == 0:
            self.CelluloseI_StackedWidget.setVisible(False)
        elif index == 1:
            self.CelluloseI_StackedWidget.setCurrentIndex(1)
            self.CelluloseI_StackedWidget.setVisible(True)
        elif index == 2:
            self.CelluloseI_StackedWidget.setCurrentIndex(2)
            self.CelluloseI_StackedWidget.setVisible(True)



###-------cellulose-I alpha--------------
    def setupCelluloseIAOptions(self):
        self.CelluloseIAOptions = QWidget()
        self.CelluloseI_StackedWidget.addWidget(self.CelluloseIAOptions) 
        CelluloseIA_layout = QVBoxLayout(self.CelluloseIAOptions)  # Parent the layout to the widget directly
        CelluloseIA_layout.setAlignment(Qt.AlignTop)
        CelluloseIA_Font = QFont("Arial", 13) 

        # Radio buttons setup
        self.CelluloseIA_radioGroup = QGroupBox("Parameter Type")
        self.CelluloseIA_radioGroup.setAlignment(Qt.AlignTop)
        CelluloseIA_radioLayout = QHBoxLayout()
        self.CelluloseIA_Experimental = QRadioButton("Crystallographic Parameters from Neutron Diffraction Experiments")
        self.CelluloseIA_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")
        self.CelluloseIA_Experimental.setFont(CelluloseIA_Font)
        self.CelluloseIA_UserDefined.setFont(CelluloseIA_Font)
        CelluloseIA_radioLayout.addWidget(self.CelluloseIA_Experimental)
        CelluloseIA_radioLayout.addWidget(self.CelluloseIA_UserDefined)
        CelluloseIA_layout.addLayout(CelluloseIA_radioLayout)

        # Combo box setup
        self.CelluloseIA_ComboBox = QComboBox(self.CelluloseIAOptions)
        self.CelluloseIA_ComboBox.addItem("Please select the crystallite shape")
        self.CelluloseIA_ComboBox.addItems(["18-chain hexagonal cross-section shape",  "36-chain hexagonal cross-section shape", "Rectangle cross-section shape"])
        self.CelluloseIA_ComboBox.setVisible(False)
        CelluloseIA_layout.addWidget(self.CelluloseIA_ComboBox)

        # Connecting radio buttons to toggle visibility
        self.CelluloseIA_Experimental.toggled.connect(self.CelluloseIA_Visibility)
        self.CelluloseIA_UserDefined.toggled.connect(self.CelluloseIA_Visibility)
        self.CelluloseIA_ComboBox.currentIndexChanged.connect(self.CelluloseIA_updateParametersDisplay)

        # Parameter display setup
        self.CelluloseIA_parametersGroup = QGroupBox("Crystallographic parameters")
        CelluloseIA_parametersLayout = QVBoxLayout()  
        self.CelluloseIA_parametersGroup.setLayout(CelluloseIA_parametersLayout)
        self.CelluloseIA_parametersGroup.setVisible(False)
        CelluloseIA_layout.addWidget(self.CelluloseIA_parametersGroup)

        self.CelluloseIA_initParameterWidgets(CelluloseIA_Font)

        self.CelluloseIA_imageLabel = QLabel(self)
        self.CelluloseIA_imageLabel.setFixedSize(1000, 250) 
        self.CelluloseIA_imageLabel.setAlignment(Qt.AlignCenter)
        self.CelluloseIA_imageLabel.setScaledContents(True)
        CelluloseIA_layout.addWidget(self.CelluloseIA_imageLabel)
        self.CelluloseIA_imageLabel.clear()
        CelluloseIA_layout.addWidget(self.CelluloseIA_imageLabel)
        CelluloseIA_layout.setAlignment(self.CelluloseIA_imageLabel, Qt.AlignCenter)  
        self.CelluloseIA_ComboBox.currentIndexChanged.connect(self.CelluloseIA_updateImageDisplay)

        ###citation for cellulose ialpha crystallographic parameter

        self.CelluloseIA_citationLabel = QLabel("Crystallographic parameter reference: Nishiyama et al. Journal of the American Chemical Society. 2003;125(47):14300-6.")
        self.CelluloseIA_citationLabel.setWordWrap(True)
        CelluloseIA_citation_font = self.CelluloseIA_citationLabel.font()
        CelluloseIA_citation_font.setPointSize(6) 
        self.CelluloseIA_citationLabel.setFont(CelluloseIA_citation_font)
        CelluloseIA_layout.addWidget(self.CelluloseIA_citationLabel)
        self.CelluloseIA_citationLabel.hide()


        # Connect combo box selection changes to update display
        self.CelluloseIA_ComboBox.currentIndexChanged.connect(self.CelluloseIA_updateParametersDisplay)

        # Invoke button setup, initially hidden
        self.CelluloseIA_invokeButton = QPushButton("Invoke Script")
        self.CelluloseIA_invokeButton.setVisible(False)
        self.CelluloseIA_invokeButton.clicked.connect(self.CelluloseIA_invokeScript)
        CelluloseIA_layout.addWidget(self.CelluloseIA_invokeButton)


    def CelluloseIA_updateImageDisplay(self, index):
        CelluloseIA_shape = self.CelluloseIA_ComboBox.currentText()
        if CelluloseIA_shape == "18-chain hexagonal cross-section shape":
            CelluloseIA_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ialpha', 'cellulose-Ia-18-chain.png') )
        elif CelluloseIA_shape == "36-chain hexagonal cross-section shape":
            CelluloseIA_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ialpha', 'cellulose-Ia-36-chain.png') )
        elif CelluloseIA_shape == "Rectangle cross-section shape":
            CelluloseIA_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ialpha', 'cellulose-Ialpha-rectangle.png') )
        else:
            self.CelluloseIA_imageLabel.clear()
            return
        self.CelluloseIA_imageLabel.setPixmap(CelluloseIA_pixmap)
        self.CelluloseIA_imageLabel.show()


    def CelluloseIA_initParameterWidgets(self, font):
        # Create two horizontal layouts
        self.CelluloseIA_paramLine1 = QHBoxLayout()
        self.CelluloseIA_paramLine2 = QHBoxLayout()
        self.CelluloseIA_paramLine3 = QHBoxLayout() 
        # Initialize QLineEdit objects for parameters and repeat units
        self.CelluloseIA_aParam = QLineEdit()
        self.CelluloseIA_bParam = QLineEdit()
        self.CelluloseIA_cParam = QLineEdit()
        self.CelluloseIA_alphaParam = QLineEdit()
        self.CelluloseIA_betaParam = QLineEdit()
        self.CelluloseIA_gammaParam = QLineEdit()
        self.CelluloseIA_volumeParam = QLineEdit()
        self.CelluloseIA_aRepeatUnits = QLineEdit()
        self.CelluloseIA_bRepeatUnits = QLineEdit()
        self.CelluloseIA_cRepeatUnits = QLineEdit()

        # Add widgets to first line layout
        self.CelluloseIA_setupParameterWidget("a (Å)", self.CelluloseIA_aParam, True, "", self.CelluloseIA_paramLine1, font)
        self.CelluloseIA_setupParameterWidget("b (Å)", self.CelluloseIA_bParam, True, "", self.CelluloseIA_paramLine1, font)
        self.CelluloseIA_setupParameterWidget("c (Å)", self.CelluloseIA_cParam, True, "", self.CelluloseIA_paramLine1, font)
        self.CelluloseIA_setupParameterWidget("alpha angle α (°)", self.CelluloseIA_alphaParam, True, "", self.CelluloseIA_paramLine2, font)
        self.CelluloseIA_setupParameterWidget("beta angle β (°)",  self.CelluloseIA_betaParam, True, "",  self.CelluloseIA_paramLine2, font)
        self.CelluloseIA_setupParameterWidget("gamma angle γ (°)", self.CelluloseIA_gammaParam, True, "", self.CelluloseIA_paramLine2, font)
        self.CelluloseIA_setupParameterWidget("Unit cell volume (Å³)", self.CelluloseIA_volumeParam, True, "", self.CelluloseIA_paramLine1, font)

        # Add widgets to second line layout
        self.CelluloseIA_setupParameterWidget("a repetition", self.CelluloseIA_aRepeatUnits, True, "", self.CelluloseIA_paramLine3, font)
        self.CelluloseIA_setupParameterWidget("b repetition", self.CelluloseIA_bRepeatUnits, True, "", self.CelluloseIA_paramLine3, font)
        self.CelluloseIA_setupParameterWidget("c repetition", self.CelluloseIA_cRepeatUnits, False, "", self.CelluloseIA_paramLine3, font)

        # Add both lines to the group box layout
        self.CelluloseIA_parametersGroup.layout().addLayout(self.CelluloseIA_paramLine1)
        self.CelluloseIA_parametersGroup.layout().addLayout(self.CelluloseIA_paramLine2)
        self.CelluloseIA_parametersGroup.layout().addLayout(self.CelluloseIA_paramLine3)

    def CelluloseIA_setupParameterWidget(self, CelluloseIA_label, CelluloseIA_widget, readOnly, CelluloseIA_defaultValue, CelluloseIA_layout, CelluloseIA_font):
        CelluloseIA_labelWidget = QLabel(CelluloseIA_label)
        CelluloseIA_labelWidget.setFont(CelluloseIA_font)
        CelluloseIA_widget.setFont(CelluloseIA_font)
        CelluloseIA_widget.setReadOnly(readOnly)
        CelluloseIA_widget.setText(CelluloseIA_defaultValue)
        if readOnly:
            CelluloseIA_widget.setStyleSheet("background-color: lightgrey;")
        CelluloseIA_layout.addWidget(CelluloseIA_labelWidget)
        CelluloseIA_layout.addWidget(CelluloseIA_widget)


    def CelluloseIA_updateReadOnlyState(self, CelluloseIA_widget, readOnly):
        CelluloseIA_widget.setReadOnly(readOnly)
        if readOnly:
            CelluloseIA_widget.setStyleSheet("background-color: #D3D3D3;")  # Light grey background
            CelluloseIA_widget.setEnabled(False)  # Optionally disable the widget to make it clear it's not interactive
        else:
            CelluloseIA_widget.setStyleSheet("background-color: white;")
            CelluloseIA_widget.setEnabled(True)  # Re-enable the widget for user interaction

    def CelluloseIA_Visibility(self, checked):
        self.CelluloseIA_ComboBox.setVisible(checked)
        if checked:
            self.CelluloseIA_ComboBox.setCurrentIndex(0) 
            self.CelluloseIA_parametersGroup.setVisible(False)
        else:
            self.CelluloseIA_ComboBox.setVisible(False)
            self.CelluloseIA_parametersGroup.setVisible(False)


    def CelluloseIA_updateParametersDisplay(self):
        if self.CelluloseIA_ComboBox.currentIndex() == 0:
            self.CelluloseIA_parametersGroup.setVisible(False)
        else:
            self.CelluloseIA_parametersGroup.setVisible(True)
            model = self.CelluloseIA_ComboBox.currentText()
            if self.CelluloseIA_Experimental.isChecked() :
                self.CelluloseIA_citationLabel.show()
                if model in ["18-chain hexagonal cross-section shape",  "36-chain hexagonal cross-section shape"]:
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.CelluloseIA_setupModificationsSection(self.CelluloseIA_parametersGroup.layout(), QFont("Arial", 13))
                    self.CelluloseIA_cRepeatUnits.clear()    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_aParam, True)    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_bParam, True)             
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_cParam, True)             
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_alphaParam, True)         
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_betaParam,  True)
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_gammaParam, True) 
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_volumeParam,True)    
                    self.CelluloseIA_cRepeatUnits.setStyleSheet("background-color: white;")
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_bRepeatUnits, True)    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_aRepeatUnits, True)   
                    self.CelluloseIA_aParam.setText("6.717")
                    self.CelluloseIA_bParam.setText("5.962")
                    self.CelluloseIA_cParam.setText("10.40")
                    self.CelluloseIA_alphaParam.setText("118.08")
                    self.CelluloseIA_betaParam.setText("114.80")
                    self.CelluloseIA_gammaParam.setText("80.37")
                    self.CelluloseIA_volumeParam.setText("33.33")
                elif model == "Rectangle cross-section shape":
                    self.CelluloseIA_setupModificationsSection(self.CelluloseIA_parametersGroup.layout(), QFont("Arial", 13))
                    self.CelluloseIA_aRepeatUnits.clear()
                    self.CelluloseIA_bRepeatUnits.clear()
                    self.CelluloseIA_cRepeatUnits.clear()                    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_aParam, True)    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_bParam, True)             
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_cParam, True)             
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_alphaParam, True)         
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_betaParam,  True)
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_gammaParam, True) 
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_volumeParam,True)    
                    self.CelluloseIA_cRepeatUnits.setStyleSheet("background-color: white;")     
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_bRepeatUnits, False)    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_aRepeatUnits, False)  
                    self.CelluloseIA_aParam.setText("6.717")
                    self.CelluloseIA_bParam.setText("5.962")
                    self.CelluloseIA_cParam.setText("10.40")
                    self.CelluloseIA_alphaParam.setText("118.08")
                    self.CelluloseIA_betaParam.setText("114.80")
                    self.CelluloseIA_gammaParam.setText("80.37")
                    self.CelluloseIA_volumeParam.setText("33.33")
           
            
            elif self.CelluloseIA_UserDefined.isChecked() :
                self.CelluloseIA_citationLabel.hide()
                if model == "Rectangle cross-section shape":
                    self.CelluloseIA_setupModificationsSection(self.CelluloseIA_parametersGroup.layout(), QFont("Arial", 13))
                    # Set fields with preset values and adjustments for editability
                    self.CelluloseIA_aParam.clear()
                    self.CelluloseIA_bParam.clear()
                    self.CelluloseIA_cParam.clear()
                    self.CelluloseIA_alphaParam.clear()
                    self.CelluloseIA_betaParam.clear()
                    self.CelluloseIA_gammaParam.clear()
                    self.CelluloseIA_volumeParam.clear() 
                    self.CelluloseIA_aRepeatUnits.clear()
                    self.CelluloseIA_bRepeatUnits.clear()
                    self.CelluloseIA_cRepeatUnits.clear()
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_aParam, False)    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_bParam, False)             
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_cParam, False)             
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_alphaParam, False)         
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_betaParam, False)
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_gammaParam, False) 
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_volumeParam, False)     
                    self.CelluloseIA_cRepeatUnits.setStyleSheet("background-color: white;")     
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_bRepeatUnits, False)    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_aRepeatUnits, False)             
    
                elif  model in ["18-chain hexagonal cross-section shape", "36-chain hexagonal cross-section shape"]:
                    self.CelluloseIA_aParam.clear()
                    self.CelluloseIA_bParam.clear()
                    self.CelluloseIA_cParam.clear()
                    self.CelluloseIA_alphaParam.clear()
                    self.CelluloseIA_betaParam.clear()
                    self.CelluloseIA_gammaParam.clear()
                    self.CelluloseIA_cRepeatUnits.clear()       
                    self.CelluloseIA_volumeParam.clear()            
                    self.CelluloseIA_setupModificationsSection(self.CelluloseIA_parametersGroup.layout(), QFont("Arial", 13))
                    # Set fields with preset values and adjustments for editability
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_aParam, False)    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_bParam, False)             
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_cParam, False)             
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_alphaParam, False)         
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_betaParam, False)
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_gammaParam, False)      
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_volumeParam, False)          
                    self.CelluloseIA_cRepeatUnits.setStyleSheet("background-color: white;")     
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_bRepeatUnits, True)    
                    self.CelluloseIA_updateReadOnlyState(self.CelluloseIA_aRepeatUnits, True)             

            else:
                # Hide modification options if not the specific model and type
                for i in reversed(range(self.CelluloseIA_modificationsLayout.count())): 
                    self.CelluloseIA_modificationsLayout.itemAt(i).widget().setParent(None)



    def CelluloseIA_setupModificationsSection(self, CelluloseIA_layout, CelluloseIA_font):
        # Add a layout for modifications if it doesn't exist
        if not hasattr(self, 'CelluloseIA_modificationsLayout'):
            self.CelluloseIA_modificationsLayout = QHBoxLayout()
            self.CelluloseIA_carboxylationRadio = QRadioButton("Carboxylation")
            self.CelluloseIA_sulfateRadio = QRadioButton("Sulfate")
            self.CelluloseIA_noModRadio = QRadioButton("No Modification")
            self.CelluloseIA_sulfateRadio.setFont(CelluloseIA_font)
            self.CelluloseIA_carboxylationRadio.setFont(CelluloseIA_font)
            self.CelluloseIA_noModRadio.setFont(CelluloseIA_font)
            self.CelluloseIA_modificationsLayout.addWidget(self.CelluloseIA_carboxylationRadio)
            self.CelluloseIA_modificationsLayout.addWidget(self.CelluloseIA_sulfateRadio)

            self.CelluloseIA_modificationsLayout.addWidget(self.CelluloseIA_noModRadio)
            CelluloseIA_layout.addLayout(self.CelluloseIA_modificationsLayout)

            # Setup Inputs and Connections
            self.CelluloseIA_setupModificationInputs()
            CelluloseIA_layout.addWidget(self.CelluloseIA_modificationInputsWidget)
            self.CelluloseIA_sulfateRadio.toggled.connect(lambda checked: self.CelluloseIA_updateModificationInputs("Sulfate", checked))
            self.CelluloseIA_carboxylationRadio.toggled.connect(lambda checked: self.CelluloseIA_updateModificationInputs("Carboxylation", checked))
            self.CelluloseIA_noModRadio.toggled.connect(lambda checked: self.CelluloseIA_updateModificationInputs("None", checked))


            # Generate Structure Button
            CelluloseIA_Font = QFont("Arial", 13)
            self.CelluloseIA_invokeButton = QPushButton("Generate Structure")
            self.CelluloseIA_invokeButton.setFont(CelluloseIA_Font)
            self.CelluloseIA_invokeButton.setVisible(False)  # Initially hidden
            self.CelluloseIA_invokeButton.clicked.connect(self.CelluloseIA_invokeScript)  # Connect to invoke script logic
            CelluloseIA_layout.addWidget(self.CelluloseIA_invokeButton)
            
            
    def CelluloseIA_setupModificationInputs(self):
        self.CelluloseIA_modificationInputsWidget = QWidget()
        CelluloseIA_modification_mainLayout = QVBoxLayout(self.CelluloseIA_modificationInputsWidget)
        CelluloseIA_font = QFont("Arial", 13)
        CelluloseIA_font_Sel = QFont("Arial", 12)

        CelluloseIA_carboxylation_plane_layout = QHBoxLayout()
        self.CelluloseIA_carboxylation_planeLabel = QLabel("Please select Cellulose-Iα plane for carboxylation modifications:")
        self.CelluloseIA_carboxylation_planeLabel.setFont(CelluloseIA_font)
        self.CelluloseIA_carboxylation_planeComboBox = QComboBox()
        self.CelluloseIA_carboxylation_planeComboBox.setFont(CelluloseIA_font_Sel)
        self.CelluloseIA_carboxylation_planeComboBox.addItems([ "Select here",
                                                      "Single (001) plane",        
                                                      "Two (001) planes", 
                                                      "Single (010) plane",
                                                      "Two (010) planes",
                                                      "Single (001) and (010) planes",
                                                      "Both (001) and (010) planes"])

        CelluloseIA_carboxylation_plane_layout.addWidget(self.CelluloseIA_carboxylation_planeLabel)
        CelluloseIA_carboxylation_plane_layout.addWidget(self.CelluloseIA_carboxylation_planeComboBox)
        CelluloseIA_modification_mainLayout.addLayout(CelluloseIA_carboxylation_plane_layout)


        # Degree of sulfate input
        CelluloseIA_sulfate_plane_layout = QHBoxLayout()
        self.CelluloseIA_sulfate_planeLabel = QLabel("Please select Cellulose-Iα plane for sulfate modifications:")
        self.CelluloseIA_sulfate_planeLabel.setFont(CelluloseIA_font)
        self.CelluloseIA_sulfate_planeComboBox = QComboBox()
        self.CelluloseIA_sulfate_planeComboBox.setFont(CelluloseIA_font_Sel)
        self.CelluloseIA_sulfate_planeComboBox.addItems([ "Select here",
                                                      "Single (001) plane",        
                                                      "Two (001) planes", 
                                                      "Single (010) plane",
                                                      "Two (010) planes",
                                                      "Single (001) and (010) planes",
                                                      "Both (001) and (010) planes"])
        
        CelluloseIA_sulfate_plane_layout.addWidget(self.CelluloseIA_sulfate_planeLabel)
        CelluloseIA_sulfate_plane_layout.addWidget(self.CelluloseIA_sulfate_planeComboBox)
        CelluloseIA_modification_mainLayout.addLayout(CelluloseIA_sulfate_plane_layout)


        ##surface charge for sulfate
        #CelluloseIA_sulfate_layout = QHBoxLayout()
        CelluloseIA_sulfate_pH_layout = QHBoxLayout()
        self.CelluloseIA_sulfate_Label = QLabel("Surface charge density (unit: mmol/g):")
        self.CelluloseIA_sulfate_Label.setFont(CelluloseIA_font)
        
        self.CelluloseIA_sulfate_LineEdit = QLineEdit()
        self.CelluloseIA_sulfate_LineEdit.setFont(CelluloseIA_font)
        self.CelluloseIA_sulfate_LineEdit.setFixedSize(QSize(200, 40))
        self.CelluloseIA_sulfate_pHLabel = QLabel("pH level of Cellulose-Iα structure (>0 and <14):")
        self.CelluloseIA_sulfate_pHLabel.setFont(CelluloseIA_font)
        self.CelluloseIA_sulfate_pHLineEdit = QLineEdit()
        self.CelluloseIA_sulfate_pHLineEdit.setFont(CelluloseIA_font)
        self.CelluloseIA_sulfate_pHLineEdit.setFixedSize(QSize(200, 40))
        CelluloseIA_sulfate_pH_layout.addWidget(self.CelluloseIA_sulfate_Label)
        CelluloseIA_sulfate_pH_layout.addWidget(self.CelluloseIA_sulfate_LineEdit)
        CelluloseIA_sulfate_pH_layout.addSpacing(100)  ##space between dda and pH
        CelluloseIA_sulfate_pH_layout.addWidget(self.CelluloseIA_sulfate_pHLabel)
        CelluloseIA_sulfate_pH_layout.addWidget(self.CelluloseIA_sulfate_pHLineEdit)
        CelluloseIA_modification_mainLayout.addLayout(CelluloseIA_sulfate_pH_layout)
        #CelluloseIA_sulfate_layout.addWidget(self.CelluloseIA_sulfate_Label)

        #CelluloseIA_sulfate_layout.addWidget(self.CelluloseIA_sulfate_LineEdit)
        #CelluloseIA_modification_mainLayout.addLayout(CelluloseIA_sulfate_layout)


        # Degree of carboxylation input
        CelluloseIA_carboxylation_pH_layout = QHBoxLayout()
        self.CelluloseIA_carboxylation_Label = QLabel("Surface charge density (unit: mmol/g):")
        self.CelluloseIA_carboxylation_Label.setFont(CelluloseIA_font)
        self.CelluloseIA_carboxylation_LineEdit = QLineEdit()
        self.CelluloseIA_carboxylation_LineEdit.setFont(CelluloseIA_font)
        self.CelluloseIA_carboxylation_LineEdit.setFixedSize(QSize(200, 40))
        self.CelluloseIA_carboxylation_pHLabel = QLabel("pH level of Cellulose-Iα structure (>0 and <14):")
        self.CelluloseIA_carboxylation_pHLabel.setFont(CelluloseIA_font)
        self.CelluloseIA_carboxylation_pHLineEdit = QLineEdit()
        self.CelluloseIA_carboxylation_pHLineEdit.setFont(CelluloseIA_font)
        self.CelluloseIA_carboxylation_pHLineEdit.setFixedSize(QSize(200, 40))
        CelluloseIA_carboxylation_pH_layout.addWidget(self.CelluloseIA_carboxylation_Label)
        CelluloseIA_carboxylation_pH_layout.addWidget(self.CelluloseIA_carboxylation_LineEdit)
        CelluloseIA_carboxylation_pH_layout.addSpacing(100)  ##space between dda and pH
        CelluloseIA_carboxylation_pH_layout.addWidget(self.CelluloseIA_carboxylation_pHLabel)
        CelluloseIA_carboxylation_pH_layout.addWidget(self.CelluloseIA_carboxylation_pHLineEdit)
        CelluloseIA_modification_mainLayout.addLayout(CelluloseIA_carboxylation_pH_layout)


        CelluloseIA_ForceField_layout = QHBoxLayout()
        self.CelluloseIA_ForceFieldTypeLabel = QLabel("Atomistic Simulation Force Field:")
        self.CelluloseIA_ForceFieldTypeLabel.setFont(CelluloseIA_font)
        self.CelluloseIA_ForceFieldTypeselector = QComboBox()
        self.CelluloseIA_ForceFieldTypeselector.setFont(CelluloseIA_font)
        #self.CelluloseIA_ForceFieldTypeLabel.setFixedSize(550, 60)  # Width of 200 pixels and height of 20 pixels
        self.CelluloseIA_ForceFieldTypeselector.addItem("Please select the force field for atomistic simulations", True)
        self.CelluloseIA_ForceFieldTypeselector.addItem("CHARMM36 Infinite Chain Model", False)
        self.CelluloseIA_ForceFieldTypeselector.addItem("CHARMM36 Finite Chain Model", False)
        self.CelluloseIA_ForceFieldTypeselector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.CelluloseIA_ForceFieldTypeselector.addItem("GLYCAM06 Finite Chain Model", False)
        CelluloseIA_ForceField_layout.addWidget(self.CelluloseIA_ForceFieldTypeLabel)
        CelluloseIA_ForceField_layout.addWidget(self.CelluloseIA_ForceFieldTypeselector)
        CelluloseIA_modification_mainLayout.addLayout(CelluloseIA_ForceField_layout)

        self.CelluloseIA_sulfate_planeLabel.setVisible(False)
        self.CelluloseIA_sulfate_planeComboBox.setVisible(False)
        self.CelluloseIA_carboxylation_planeLabel.setVisible(False)
        self.CelluloseIA_carboxylation_planeComboBox.setVisible(False)

        self.CelluloseIA_sulfate_Label.setVisible(False)
        self.CelluloseIA_sulfate_LineEdit.setVisible(False)
        self.CelluloseIA_sulfate_pHLabel.setVisible(False)
        self.CelluloseIA_sulfate_pHLineEdit.setVisible(False)

        self.CelluloseIA_carboxylation_Label.setVisible(False)
        self.CelluloseIA_carboxylation_LineEdit.setVisible(False)
        self.CelluloseIA_carboxylation_pHLabel.setVisible(False)
        self.CelluloseIA_carboxylation_pHLineEdit.setVisible(False)


        self.CelluloseIA_ForceFieldTypeLabel.setVisible(False)
        self.CelluloseIA_ForceFieldTypeselector.setVisible(False)

        self.CelluloseIA_sulfate_planeComboBox.currentIndexChanged.connect(
        lambda: self.CelluloseIA_manageVisibilityAndStylesForsulfate(
            self.CelluloseIA_sulfate_planeComboBox.currentText()
           )
        )
        self.CelluloseIA_modificationInputsWidget.setLayout(CelluloseIA_modification_mainLayout)

        self.CelluloseIA_carboxylation_planeComboBox.currentIndexChanged.connect(
        lambda: self.CelluloseIA_manageVisibilityAndStylesForCarboxylation(
            self.CelluloseIA_carboxylation_planeComboBox.currentText()
           )
        )
        self.CelluloseIA_modificationInputsWidget.setLayout(CelluloseIA_modification_mainLayout)


    def CelluloseIA_updateModificationInputs(self, CelluloseIA_modificationType, checked):
        if checked:
            if  CelluloseIA_modificationType == "Sulfate":
                CelluloseIA_sulfate_plane_selection = self.CelluloseIA_sulfate_planeComboBox.currentText()
                self.CelluloseIA_manageVisibilityAndStylesForsulfate(CelluloseIA_sulfate_plane_selection)

            elif CelluloseIA_modificationType == "Carboxylation":
                CelluloseIA_carboxylation_plane_selection = self.CelluloseIA_carboxylation_planeComboBox.currentText()
                self.CelluloseIA_manageVisibilityAndStylesForCarboxylation(CelluloseIA_carboxylation_plane_selection)
            elif  CelluloseIA_modificationType == "None":
                self.CelluloseIA_sulfate_Label.setVisible(False)
                self.CelluloseIA_sulfate_LineEdit.setVisible(False)
                self.CelluloseIA_sulfate_pHLabel.setVisible(False)
                self.CelluloseIA_sulfate_pHLineEdit.setVisible(False)

                self.CelluloseIA_carboxylation_Label.setVisible(False)
                self.CelluloseIA_carboxylation_LineEdit.setVisible(False)
                self.CelluloseIA_carboxylation_pHLabel.setVisible(False)
                self.CelluloseIA_carboxylation_pHLineEdit.setVisible(False)

    
                self.CelluloseIA_sulfate_planeLabel.setVisible(False)
                self.CelluloseIA_sulfate_planeComboBox.setVisible(False)
                self.CelluloseIA_carboxylation_planeLabel.setVisible(False)
                self.CelluloseIA_carboxylation_planeComboBox.setVisible(False)

                self.CelluloseIA_ForceFieldTypeLabel.setVisible(True)
                self.CelluloseIA_ForceFieldTypeselector.setVisible(True)
                self.CelluloseIA_invokeButton.setVisible(True)  # Show "Generate Structure" button
        else:
            self.CelluloseIA_sulfate_Label.setVisible(False)
            self.CelluloseIA_sulfate_LineEdit.setVisible(False)
            self.CelluloseIA_sulfate_pHLabel.setVisible(False)
            self.CelluloseIA_sulfate_pHLineEdit.setVisible(False)

            self.CelluloseIA_carboxylation_Label.setVisible(False)
            self.CelluloseIA_carboxylation_LineEdit.setVisible(False)

            self.CelluloseIA_carboxylation_pHLabel.setVisible(False)
            self.CelluloseIA_carboxylation_pHLineEdit.setVisible(False)


            self.CelluloseIA_sulfate_planeLabel.setVisible(False)
            self.CelluloseIA_sulfate_planeComboBox.setVisible(False)
            self.CelluloseIA_carboxylation_planeLabel.setVisible(False)
            self.CelluloseIA_carboxylation_planeComboBox.setVisible(False)


            self.CelluloseIA_ForceFieldTypeLabel.setVisible(False)
            self.CelluloseIA_ForceFieldTypeselector.setVisible(False)
            self.CelluloseIA_invokeButton.setVisible(False)  

    def CelluloseIA_manageVisibilityAndStylesForsulfate(self, CelluloseIA_sulfate_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.CelluloseIA_sulfate_planeLabel.setVisible(True)
        self.CelluloseIA_sulfate_planeComboBox.setVisible(True)

        self.CelluloseIA_carboxylation_planeLabel.setVisible(False)
        self.CelluloseIA_carboxylation_planeComboBox.setVisible(False)
        self.CelluloseIA_sulfate_pHLineEdit.setReadOnly(True)
        self.CelluloseIA_sulfate_pHLineEdit.setStyleSheet("background-color: #D3D3D3;")

        self.CelluloseIA_sulfate_Label.setVisible(True)
        self.CelluloseIA_sulfate_LineEdit.setVisible(True)
        self.CelluloseIA_sulfate_pHLabel.setVisible(True)
        self.CelluloseIA_sulfate_pHLineEdit.setVisible(True)

        self.CelluloseIA_carboxylation_Label.setVisible(False)
        self.CelluloseIA_carboxylation_LineEdit.setVisible(False)
        self.CelluloseIA_carboxylation_pHLabel.setVisible(False)
        self.CelluloseIA_carboxylation_pHLineEdit.setVisible(False)
        self.CelluloseIA_ForceFieldTypeLabel.setVisible(True)
        self.CelluloseIA_ForceFieldTypeselector.setVisible(True)
        self.CelluloseIA_invokeButton.setVisible(True)
    
        if CelluloseIA_sulfate_plane_selection in [ "Single (001) plane",        
                                                    "Two (001) planes", 
                                                    "Single (010) plane",
                                                    "Two (010) planes",
                                                    "Single (001) and (010) planes",          
                                                    "Both (001) and (010) planes"]:
            self.CelluloseIA_sulfate_LineEdit.setReadOnly(False)
            self.CelluloseIA_sulfate_LineEdit.setStyleSheet("background-color: white;")


    def CelluloseIA_manageVisibilityAndStylesForCarboxylation(self, CelluloseIA_carboxylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.CelluloseIA_sulfate_planeLabel.setVisible(False)
        self.CelluloseIA_sulfate_planeComboBox.setVisible(False)
        self.CelluloseIA_sulfate_pHLabel.setVisible(False)
        self.CelluloseIA_sulfate_pHLineEdit.setVisible(False)
        self.CelluloseIA_carboxylation_planeLabel.setVisible(True)
        self.CelluloseIA_carboxylation_planeComboBox.setVisible(True)
        self.CelluloseIA_sulfate_Label.setVisible(False)
        self.CelluloseIA_sulfate_LineEdit.setVisible(False)
        self.CelluloseIA_carboxylation_Label.setVisible(True)
        self.CelluloseIA_carboxylation_LineEdit.setVisible(True)
        self.CelluloseIA_carboxylation_pHLabel.setVisible(True)
        self.CelluloseIA_carboxylation_pHLineEdit.setVisible(True)
        self.CelluloseIA_ForceFieldTypeLabel.setVisible(True)
        self.CelluloseIA_ForceFieldTypeselector.setVisible(True)
        self.CelluloseIA_invokeButton.setVisible(True)
    
        if CelluloseIA_carboxylation_plane_selection in [ "Single (001) plane",        
                                                          "Two (001) planes", 
                                                          "Single (010) plane",
                                                          "Two (010) planes",
                                                          "Single (001) and (010) planes",          
                                                          "Both (001) and (010) planes"]:
            self.CelluloseIA_carboxylation_LineEdit.setReadOnly(False)
            self.CelluloseIA_carboxylation_LineEdit.setStyleSheet("background-color: white;")
            self.CelluloseIA_carboxylation_pHLineEdit.setReadOnly(False)
            self.CelluloseIA_carboxylation_pHLineEdit.setStyleSheet("background-color: white;")
    def CelluloseIA_invokeScript(self):
            model = self.CelluloseIA_ComboBox.currentText()
            if self.CelluloseIA_Experimental.isChecked():
               
                if  model == "18-chain hexagonal cross-section shape":
                    if self.CelluloseIA_noModRadio.isChecked():
                        #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                        #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                        CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                        if not CelluloseIA_c_unit and CelluloseIA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            CelluloseIA_shape_name = "18-chain-model"
                            CelluloseIA_folder_name = "charmm36"
                        elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            CelluloseIA_shape_name = "18-chain-model"
                            CelluloseIA_folder_name = "glycam06"
                        try:    
                            CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                            CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit]
                            CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIA_result.returncode == 0:
                                CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                self.CelluloseIA_exp_18chain_nochemical_Popup(CelluloseIA_output)
                                self.CelluloseIA_exp_18chain_nochemical_Topology()                    
                            else:
                                error_message = CelluloseIA_result.stderr.strip()
                                QMessageBox.critical(self, "Cellulose Iα Parameter Error", error_message)                  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script, please provide all required parameters")        


                    ###cellulose - -Ialpha- 18chain-- neutron-----==== carboxylation====
                    elif self.CelluloseIA_carboxylationRadio.isChecked():
                        CelluloseIA_carboxylation_plane_selection = self.CelluloseIA_carboxylation_planeComboBox.currentText()
                        #if  CelluloseIA_carboxylation_plane_selection in [
                        #                                                  "Single (110) plane (Only support rectangle cross-section)",
                        #                                                  "Two (110) planes (Only support rectangle cross-section)",
                        #                                                  "Single (1-10) plane (Only support rectangle cross-section)",
                        #                                                  "Two (1-10) planes (Only support rectangle cross-section)",                 
                        #                                                  "Single (110) and (1-10) planes (Only support rectangle cross-section)",
                        #                                                  "Both (110) and (1-10) planes (Only support rectangle cross-section)"]  :
                        #    QMessageBox.warning(self, "Unsupported Operation", "(110) and (1-10) planes don't support hexagonal cross-section shape.")
                        if CelluloseIA_carboxylation_plane_selection == "Both (001) and (010) planes":                                                                                                                                          
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) plane":                                                                                                                                          
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Two (001) planes":                                                                                                                                          
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (010) plane":                                                                                                                                          
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_carboxylation_plane_selection == "Two (010) planes":                                                                                                                                          
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) and (010) planes":                                                                                                                                          
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    ###cellulose - -- 18chain-- neutron------=== sulfate===
                    elif self.CelluloseIA_sulfateRadio.isChecked():
                        CelluloseIA_sulfate_plane_selection = self.CelluloseIA_sulfate_planeComboBox.currentText()
                        if CelluloseIA_sulfate_plane_selection == "Both (001) and (010) planes":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Single (001) plane":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Two (001) planes":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_sulfate_plane_selection == "Single (010) plane":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"

                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Two (010) planes":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")



                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_sulfate_plane_selection == "Single (001) and (010) planes":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                 ### 36 chain-hexagonal shape -- cellulose Ialpha--- experimental data
                elif  model == "36-chain hexagonal cross-section shape":
                    if self.CelluloseIA_noModRadio.isChecked() :
                
                        CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                        if not CelluloseIA_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                        CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            CelluloseIA_shape_name = "36-chain-model"
                            CelluloseIA_folder_name = "charmm36"
                        elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            CelluloseIA_shape_name = "36-chain-model"
                            CelluloseIA_folder_name = "glycam06"
                        try:    
                            CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                            CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit]
                            CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIA_result.returncode == 0:
                                CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                self.CelluloseIA_exp_36chain_nochemical_Popup(CelluloseIA_output)
                                self.CelluloseIA_exp_36chain_nochemical_Topology()                   
                            else:
                                error_message = CelluloseIA_result.stderr.strip()
                                QMessageBox.critical(self, "Cellulose Iα Parameter Error", error_message)                  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script, please provide all required parameters")        

                    elif self.CelluloseIA_carboxylationRadio.isChecked():
                        CelluloseIA_carboxylation_plane_selection = self.CelluloseIA_carboxylation_planeComboBox.currentText()
                        if CelluloseIA_carboxylation_plane_selection == "Both (001) and (010) planes":                                                                                                                                          
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) plane":                                                                                                                                         
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_carboxylation_plane_selection == "Two (001) planes":                                                                                                                                         
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_carboxylation_plane_selection == "Single (010) plane":                                                                                                                                         
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                                
                        elif CelluloseIA_carboxylation_plane_selection == "Two (010) planes":                                                                                                                                         
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) and (010) planes":                                                                                                                                         
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")                                

                    ###cellulose - -- 36chain-- neutron------=== sulfate===
                    elif self.CelluloseIA_sulfateRadio.isChecked():
                        CelluloseIA_sulfate_plane_selection = self.CelluloseIA_sulfate_planeComboBox.currentText()
                        if CelluloseIA_sulfate_plane_selection == "Both (001) and (010) planes":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Single (001) plane":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"

                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Two (001) planes":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_sulfate_plane_selection == "Single (010) plane":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_sulfate_plane_selection == "Two (010) planes":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_sulfate_plane_selection == "Single (001) and (010) planes":                                                                                                                                            
                            #CelluloseIA_a_unit = self.CelluloseIA_unitInputs["a"].text()
                            #CelluloseIA_b_unit = self.CelluloseIA_unitInputs["b"].text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                elif model == "Rectangle cross-section shape":
                    if self.CelluloseIA_noModRadio.isChecked():
                        CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                        CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                        CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                        if not CelluloseIA_a_unit and  CelluloseIA_b_unit and CelluloseIA_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                        CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            CelluloseIA_shape_name = "crystallite"
                            CelluloseIA_folder_name = "charmm36"
                        elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            CelluloseIA_shape_name = "crystallite"
                            CelluloseIA_folder_name = "glycam06"
                        try:
                            CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                            CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit]
                            CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIA_result.returncode == 0:
                                CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                self.CelluloseIA_exp_crystallite_nochemical_Popup(CelluloseIA_output)
                                self.CelluloseIA_exp_crystallite_nochemical_Topology()                    
                            else:
                                error_message = CelluloseIA_result.stderr.strip()
                                QMessageBox.critical(self, "Cellulose Iα Parameter Error", error_message)                  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script, please provide all required parameters")      
                    

                    ###cellulose-Ialpha-rectangle ---------sulfate---------------cross-section surface 
                    elif self.CelluloseIA_sulfateRadio.isChecked():
                        CelluloseIA_sulfate_plane_selection = self.CelluloseIA_sulfate_planeComboBox.currentText()
                        if CelluloseIA_sulfate_plane_selection == "Both (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Single (001) plane":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_sulfate_plane_selection == "Two (001) planes":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_sulfate_plane_selection == "Single (010) plane":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")                
                        elif CelluloseIA_sulfate_plane_selection == "Two (010) planes":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")  
                        elif CelluloseIA_sulfate_plane_selection == "Single (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")  


                    ###cellulose-Ialpha-rectangle ---------carboxylation---------------cross-section surface 
                    elif self.CelluloseIA_carboxylationRadio.isChecked():
                        CelluloseIA_carboxylation_plane_selection = self.CelluloseIA_carboxylation_planeComboBox.currentText()
                        if CelluloseIA_carboxylation_plane_selection == "Both (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_experiment.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) plane":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_carboxylation_plane_selection == "Two (001) planes":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_carboxylation_plane_selection == "Single (010) plane":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_carboxylation_plane_selection == "Two (010) planes":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



            elif self.CelluloseIA_UserDefined.isChecked():

                if  model == "18-chain hexagonal cross-section shape":
                    if self.CelluloseIA_noModRadio.isChecked():
                        CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                        CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                        CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                        CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                        CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                        CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                        CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                        CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                        if not CelluloseIA_a_parm and CelluloseIA_b_parm and CelluloseIA_c_parm  and CelluloseIA_gamma and CelluloseIA_c_unit and CelluloseIA_alpha and CelluloseIA_beta and CelluloseIA_volume: 
                            QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                            return
                        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                        CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            CelluloseIA_ud_folder = "user-defined"
                            CelluloseIA_shape_name = "18-chain-model"
                            CelluloseIA_folder_name = "charmm36"
                        elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            CelluloseIA_ud_folder = "user-defined"
                            CelluloseIA_shape_name = "18-chain-model"
                            CelluloseIA_folder_name = "glycam06"
                        CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                        try:
                            CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                            CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit]
                            CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIA_result.returncode == 0:
                                CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                self.CelluloseIA_exp_18chain_nochemical_Popup(CelluloseIA_output)
                                self.CelluloseIA_exp_18chain_nochemical_Topology()                    
                            else:
                                error_message = CelluloseIA_result.stderr.strip()
                                QMessageBox.critical(self, "Cellulose Iα Parameter Error", error_message) 
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))
                            

                    ###cellulose - -Ialpha- 18chain-- userdefined-----==== carboxylation====
                    elif self.CelluloseIA_carboxylationRadio.isChecked():
                        CelluloseIA_carboxylation_plane_selection = self.CelluloseIA_carboxylation_planeComboBox.currentText()
                        if CelluloseIA_carboxylation_plane_selection == "Both (001) and (010) planes":                                                                                                                                          
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) plane":                                                                                                                                          
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                                CelluloseIA_user_defined="user-defined"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_carboxylation_plane_selection == "Two (001) planes":                                                                                                                                          
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_ud_folder = "user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                                CelluloseIA_ud_folder = "user-defined"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (010) plane":                                                                                                                                          
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_ud_folder = "user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                                CelluloseIA_ud_folder = "user-defined"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_carboxylation_plane_selection == "Two (010) planes":                                                                                                                                          
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_ud_folder = "user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                                CelluloseIA_ud_folder = "user-defined"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) and (010) planes":                                                                                                                                          
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_ud_folder = "user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "glycam06"
                                CelluloseIA_ud_folder = "user-defined"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    ###cellulose - -- 18chain-- neutron------=== sulfate===
                    elif self.CelluloseIA_sulfateRadio.isChecked():
                        CelluloseIA_sulfate_plane_selection = self.CelluloseIA_sulfate_planeComboBox.currentText()
                        if CelluloseIA_sulfate_plane_selection == "Both (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_user_defined="user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                                
                        elif CelluloseIA_sulfate_plane_selection == "Single (001) plane":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            #    CelluloseIA_user_defined="user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Two (001) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            #    CelluloseIA_user_defined="user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_sulfate_plane_selection == "Single (010) plane":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            #    CelluloseIA_user_defined="user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Two (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()   
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            #    CelluloseIA_user_defined="user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_sulfate_plane_selection == "Single (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "18-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                            #    CelluloseIA_shape_name = "18-chain-model"
                            #    CelluloseIA_folder_name = "glycam06"
                            #    CelluloseIA_user_defined="user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_18chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                elif  model == "36-chain hexagonal cross-section shape":
                    if self.CelluloseIA_noModRadio.isChecked():
                        CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                        CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                        CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                        CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                        CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                        CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                        CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                        CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                        if not  CelluloseIA_a_parm and CelluloseIA_b_parm and CelluloseIA_c_parm  and CelluloseIA_gamma and CelluloseIA_c_unit and CelluloseIA_alpha and CelluloseIA_beta and CelluloseIA_volume: 
                            QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                            return
                        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                        CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            CelluloseIA_ud_folder = "user-defined"
                            CelluloseIA_shape_name = "36-chain-model"
                            CelluloseIA_folder_name = "charmm36"
                        elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            CelluloseIA_ud_folder = "user-defined"
                            CelluloseIA_shape_name = "36-chain-model"
                            CelluloseIA_folder_name = "glycam06"
                        try:    
                            CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                            CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit]                        
                            CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIA_result.returncode == 0:
                                CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                self.CelluloseIA_exp_36chain_nochemical_Popup(CelluloseIA_output)
                                self.CelluloseIA_exp_36chain_nochemical_Topology()                    
                            else:
                                error_message = CelluloseIA_result.stderr.strip()
                                QMessageBox.critical(self, "Cellulose Iα Parameter Error", error_message) 
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))


                    ###cellulose - -Ialpha- 36chain-- userdefined-----==== carboxylation====
                    elif self.CelluloseIA_carboxylationRadio.isChecked():
                        CelluloseIA_carboxylation_plane_selection = self.CelluloseIA_carboxylation_planeComboBox.currentText()
                        if CelluloseIA_carboxylation_plane_selection == "Both (001) and (010) planes":                                                                                                                                          
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) plane":                                                                                                                                         
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Two (001) planes":                                                                                                                                         
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (010) plane":                                                                                                                                         
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                                
                        elif CelluloseIA_carboxylation_plane_selection == "Two (010) planes":                                                                                                                                         
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) and (010) planes":                                                                                                                                         
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_user_defined="user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path,  CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume,  CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_carboxylation_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    ###cellulose - -- 36chain-- neutron------=== sulfate===
                    elif self.CelluloseIA_sulfateRadio.isChecked():
                        CelluloseIA_sulfate_plane_selection = self.CelluloseIA_sulfate_planeComboBox.currentText()
                        if CelluloseIA_sulfate_plane_selection == "Both (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_user_defined="user-defined"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_user_defined="user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_user_defined, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_sulfate_plane_selection == "Single (001) plane":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text() 
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif CelluloseIA_sulfate_plane_selection == "Two (001) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text() 
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif CelluloseIA_sulfate_plane_selection == "Single (010) plane":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text() 
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif CelluloseIA_sulfate_plane_selection == "Two (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_sulfate_plane_selection == "Single (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "36-chain-model"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                            #    CelluloseIA_shape_name = "36-chain-model"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm,  CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_36chain_sulfate_Popup(CelluloseIA_output)
                                    self.CelluloseIA_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                elif  model == "Rectangle cross-section shape":
                    if self.CelluloseIA_noModRadio.isChecked():
                        CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                        CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                        CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                        CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                        CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                        CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                        CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                        CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                        CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                        CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                        if not  CelluloseIA_a_parm and CelluloseIA_b_parm and CelluloseIA_c_parm  and CelluloseIA_gamma and CelluloseIA_c_unit and CelluloseIA_alpha and CelluloseIA_beta and CelluloseIA_volume and CelluloseIA_a_unit and CelluloseIA_b_unit : 
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                        CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            CelluloseIA_ud_folder = "user-defined"
                            CelluloseIA_shape_name = "crystallite"
                            CelluloseIA_folder_name = "charmm36"
                        elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            CelluloseIA_ud_folder = "user-defined"
                            CelluloseIA_shape_name = "crystallite"
                            CelluloseIA_folder_name = "glycam06"
                        try:
                            CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha",CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                            CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit]
                            CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIA_result.returncode == 0:
                                CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                self.CelluloseIA_exp_crystallite_nochemical_Popup(CelluloseIA_output)
                                self.CelluloseIA_exp_crystallite_nochemical_Topology()  
                            else:
                                error_message = CelluloseIA_result.stderr.strip()
                                QMessageBox.critical(self, "Cellulose Iα Parameter Error", error_message)                  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script, please provide all required parameters")


                    ###cellulose-Ialpha-rectangle --user-defined-------sulfate---------------cross-section surface 
                    elif self.CelluloseIA_sulfateRadio.isChecked():
                        CelluloseIA_sulfate_plane_selection = self.CelluloseIA_sulfate_planeComboBox.currentText()
                        if CelluloseIA_sulfate_plane_selection == "Both (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()  
                            if not  CelluloseIA_a_parm and CelluloseIA_b_parm and CelluloseIA_c_parm  and CelluloseIA_gamma and CelluloseIA_c_unit and CelluloseIA_alpha and CelluloseIA_beta and CelluloseIA_volume and CelluloseIA_a_unit and CelluloseIA_b_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_sulfate_plane_selection == "Single (001) plane":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text() 
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Two (001) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text() 
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Single (010) plane":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text() 
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
           
                        elif CelluloseIA_sulfate_plane_selection == "Two (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text()   
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIA_sulfate_plane_selection == "Single (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            sulfate = self.CelluloseIA_sulfate_LineEdit.text() 
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            #elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                            #    CelluloseIA_shape_name = "crystallite"
                            #    CelluloseIA_ud_folder = "user-defined"
                            #    CelluloseIA_folder_name = "glycam06"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-sulfate", CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, sulfate]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_sulfate_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_sulfate_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    ###cellulose-Ialpha-rectangle ---user-defined------carboxylation---------------cross-section surface 
                    elif self.CelluloseIA_carboxylationRadio.isChecked():
                        CelluloseIA_carboxylation_plane_selection = self.CelluloseIA_carboxylation_planeComboBox.currentText()
                        if CelluloseIA_carboxylation_plane_selection == "Both (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not  CelluloseIA_a_parm and CelluloseIA_b_parm and CelluloseIA_c_parm  and CelluloseIA_gamma and CelluloseIA_c_unit and CelluloseIA_alpha and CelluloseIA_beta and CelluloseIA_volume and CelluloseIA_a_unit and CelluloseIA_b_unit and  carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_ud.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_ud.py"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation",CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) plane":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_ud_folder = "user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                                CelluloseIA_ud_folder = "user-defined"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation",CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Two (001) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_ud_folder = "user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_100-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                                CelluloseIA_ud_folder = "user-defined"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation",CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (010) plane":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "charmm36"
                                CelluloseIA_ud_folder = "user-defined"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_folder_name = "glycam06"
                                CelluloseIA_ud_folder = "user-defined"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation",CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Two (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010-2.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation",CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIA_carboxylation_plane_selection == "Single (001) and (010) planes":                                                                                                                                            
                            CelluloseIA_a_parm = self.CelluloseIA_aParam.text()
                            CelluloseIA_b_parm = self.CelluloseIA_bParam.text()
                            CelluloseIA_c_parm = self.CelluloseIA_cParam.text()
                            CelluloseIA_alpha =  self.CelluloseIA_alphaParam.text()
                            CelluloseIA_beta =  self.CelluloseIA_betaParam.text()
                            CelluloseIA_gamma =  self.CelluloseIA_gammaParam.text()
                            CelluloseIA_volume=  self.CelluloseIA_volumeParam.text()          
                            CelluloseIA_a_unit = self.CelluloseIA_aRepeatUnits.text()
                            CelluloseIA_b_unit = self.CelluloseIA_bRepeatUnits.text()
                            CelluloseIA_c_unit = self.CelluloseIA_cRepeatUnits.text()
                            carboxylation = self.CelluloseIA_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIA_carboxylation_pHLineEdit.text()
                            if not CelluloseIA_a_unit and CelluloseIA_b_unit and CelluloseIA_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
                            CelluloseIA_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "charmm36"
                            elif CelluloseIA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIA_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIA_ForceFieldType else "finite_010_100.py"
                                CelluloseIA_shape_name = "crystallite"
                                CelluloseIA_ud_folder = "user-defined"
                                CelluloseIA_folder_name = "glycam06"
                            try:
                                CelluloseIA_script_path = os.path.join(CelluloseIA_base_dir, "function", "cellulose-I-alpha-carboxylation",CelluloseIA_ud_folder, CelluloseIA_shape_name, CelluloseIA_folder_name, CelluloseIA_script_name)
                                CelluloseIA_command = ["python", CelluloseIA_script_path, CelluloseIA_a_parm, CelluloseIA_b_parm, CelluloseIA_c_parm, CelluloseIA_alpha, CelluloseIA_beta, CelluloseIA_gamma, CelluloseIA_volume, CelluloseIA_a_unit, CelluloseIA_b_unit, CelluloseIA_c_unit, carboxylation, ph]
                                CelluloseIA_result = subprocess.run(CelluloseIA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIA_result.returncode == 0:
                                    CelluloseIA_output = CelluloseIA_result.stdout.strip()
                                    self.CelluloseIA_exp_crystallite_carboxylation_Popup(CelluloseIA_output)  
                                    self.CelluloseIA_exp_crystallite_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIA_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iα Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



##cellulose-I alpha 18-chain experimental data no modification
    def CelluloseIA_exp_18chain_nochemical_Topology(self):  
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "18-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIA_exp_18chain_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iα  Topology Generation Failed")

    def CelluloseIA_exp_18chain_nochemical_Popup(self, message):
        message = f"Native cellulose-Iα  was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_18chain_nochemical_TopologyPopup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iα  Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



## carboxylation cellulose-I alpha 18-chain experimental data windows output

    def CelluloseIA_exp_18chain_carboxylation_Topology(self):  
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "18-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIA_exp_18chain_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iα Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iα Topology Generation Failed")

    def CelluloseIA_exp_18chain_carboxylation_Popup(self, CelluloseIA_18chain_output):
        lines = [line.strip() for line in CelluloseIA_18chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        
        try:
            parts = last_line.split(',')
            carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())
            carboxylation_degree = float(parts[1].split(':')[1].strip())
            ph = float(parts[2].split(':')[1].strip())
        except (IndexError, ValueError) as e:
            QMessageBox.warning(self, "Parsing Error", f"Failed to parse the output:\n{last_line}\nError: {e}")
            return
    
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
    
        message = (
            "Carboxylated cellulose-Iα was Generated Successfully!\n"
            f"Actual charge density: {carboxylation_formatted} mmol/g\n"
            f"Actual carboxylation degree: {carboxylation_degree_formatted}\n"
            f"Actual pH level: {ph_formatted}"
        )
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_18chain_carboxylation_Topology_Popup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iα Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##sulfate cellulose-I alpha 18-chain experimental data windows output
    def CelluloseIA_exp_18chain_sulfate_Topology(self):  
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "18-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIA_exp_18chain_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iα Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iα Topology Generation Failed")

    def CelluloseIA_exp_18chain_sulfate_Popup(self, CelluloseIA_18chain_output):
        lines = [line.strip() for line in CelluloseIA_18chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iα was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_18chain_sulfate_Topology_Popup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iα Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)




##cellulose-I alpha 36-chain experimental data no modification
    def CelluloseIA_exp_36chain_nochemical_Topology(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "36-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIA_exp_36chain_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iα  Topology Generation Failed")

    def CelluloseIA_exp_36chain_nochemical_Popup(self, message):
        message = f"Native cellulose-Iα  was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_36chain_nochemical_TopologyPopup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iα  Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


## carboxylation cellulose-I alpha 36-chain experimental data windows output

    def CelluloseIA_exp_36chain_carboxylation_Topology(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "36-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIA_exp_36chain_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iα Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iα Topology Generation Failed")

    def CelluloseIA_exp_36chain_carboxylation_Popup(self, CelluloseIA_36chain_output):
        lines = [line.strip() for line in CelluloseIA_36chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated cellulose-Iα was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_36chain_carboxylation_Topology_Popup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iα Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##sulfate cellulose-I alpha 36-chain experimental data windows output
    def CelluloseIA_exp_36chain_sulfate_Topology(self):  
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "36-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIA_exp_36chain_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iα Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iα Topology Generation Failed")

    def CelluloseIA_exp_36chain_sulfate_Popup(self, CelluloseIA_36chain_output):
        lines = [line.strip() for line in CelluloseIA_36chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iα was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_36chain_sulfate_Topology_Popup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iα Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##cellulose-I alpha crystallite experimental data no modification
    def CelluloseIA_exp_crystallite_nochemical_Topology(self):  
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIA_exp_crystallite_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iα Topology Generation Failed")

    def CelluloseIA_exp_crystallite_nochemical_Popup(self, message):
        message = f"Native cellulose-Iα was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_crystallite_nochemical_TopologyPopup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType  else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iα Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



   ###crystallite-carboxylation
    def CelluloseIA_exp_crystallite_carboxylation_Topology(self):   
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIA_exp_crystallite_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iα Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iα Topology Generation Failed")

    def CelluloseIA_exp_crystallite_carboxylation_Popup(self, CelluloseIA_crystallite_output):
        lines = [line.strip() for line in CelluloseIA_crystallite_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated cellulose-Iα was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_crystallite_carboxylation_Topology_Popup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iα Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


    ###crystallite-sulfate
    def CelluloseIA_exp_crystallite_sulfate_Topology(self):  #native chitin topology
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-alpha_icm.py" if "Infinite" in CelluloseIA_ForceFieldType else "cellulose-I-alpha_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-alpha"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIA_exp_crystallite_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iα Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iα Topology Generation Failed")

    def CelluloseIA_exp_crystallite_sulfate_Popup(self, CelluloseIA_crystallite_output):
        lines = [line.strip() for line in CelluloseIA_crystallite_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iα was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIA_exp_crystallite_sulfate_Topology_Popup(self):
        CelluloseIA_ForceFieldType = self.CelluloseIA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iα Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)
                 
###-------cellulose-I alpha---------------







###-------cellulose-I beta----------------
    def setupCelluloseIBOptions(self):
        self.CelluloseIBOptions = QWidget()
        self.CelluloseI_StackedWidget.addWidget(self.CelluloseIBOptions)
        CelluloseIB_layout = QVBoxLayout(self.CelluloseIBOptions)
        CelluloseIB_layout.setAlignment(Qt.AlignTop)
        CelluloseIB_Font = QFont("Arial", 13)

        # Radio buttons setup
        self.CelluloseIB_radioGroup = QGroupBox("Parameter Type")
        self.CelluloseIB_radioGroup.setAlignment(Qt.AlignTop)
        CelluloseIB_radioLayout = QHBoxLayout()
        self.CelluloseIB_Experimental = QRadioButton("Crystallographic Parameters from Neutron Diffraction Experiments")
        self.CelluloseIB_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")
        self.CelluloseIB_Experimental.setFont(CelluloseIB_Font)
        self.CelluloseIB_UserDefined.setFont(CelluloseIB_Font)
        CelluloseIB_radioLayout.addWidget(self.CelluloseIB_Experimental)
        CelluloseIB_radioLayout.addWidget(self.CelluloseIB_UserDefined)
        CelluloseIB_layout.addLayout(CelluloseIB_radioLayout)

        # Combo box setup
        self.CelluloseIB_ComboBox = QComboBox(self.CelluloseIBOptions)
        self.CelluloseIB_ComboBox.addItem("Please select the crystallite shape")
        self.CelluloseIB_ComboBox.addItems(["18-chain hexagonal cross-section shape", "24-chain hexagonal cross-section shape", "36-chain hexagonal cross-section shape", "36-chain square cross-section shape", "Rectangle cross-section shape", "Parallelogram cross-section shape"])
        self.CelluloseIB_ComboBox.setVisible(False)
        CelluloseIB_layout.addWidget(self.CelluloseIB_ComboBox)

        # Connecting radio buttons to toggle visibility
        self.CelluloseIB_Experimental.toggled.connect(self.CelluloseIB_Visibility)
        self.CelluloseIB_UserDefined.toggled.connect(self.CelluloseIB_Visibility)
        self.CelluloseIB_ComboBox.currentIndexChanged.connect(self.CelluloseIB_updateParametersDisplay)

        # Parameter display setup
        self.CelluloseIB_parametersGroup = QGroupBox("Crystallographic parameters")
        CelluloseIB_parametersLayout = QVBoxLayout()  
        self.CelluloseIB_parametersGroup.setLayout(CelluloseIB_parametersLayout)
        self.CelluloseIB_parametersGroup.setVisible(False)
        CelluloseIB_layout.addWidget(self.CelluloseIB_parametersGroup)

        self.CelluloseIB_initParameterWidgets(CelluloseIB_Font)


        ##demonstration for celluloseib cross-sction and building structure
        self.CelluloseIB_imageLabel = QLabel(self)
        self.CelluloseIB_imageLabel.setFixedSize(1000, 250) 
        self.CelluloseIB_imageLabel.setAlignment(Qt.AlignCenter)
        self.CelluloseIB_imageLabel.setScaledContents(True)
        CelluloseIB_layout.addWidget(self.CelluloseIB_imageLabel)
        self.CelluloseIB_imageLabel.clear()
        CelluloseIB_layout.addWidget(self.CelluloseIB_imageLabel)
        CelluloseIB_layout.setAlignment(self.CelluloseIB_imageLabel, Qt.AlignCenter)  
        self.CelluloseIB_ComboBox.currentIndexChanged.connect(self.CelluloseIB_updateImageDisplay)

        ###citation for celluloseib  crystallographic parameter

        self.CelluloseIB_citationLabel = QLabel("Crystallographic parameter reference: Nishiyama et al. Journal of the American Chemical Society. 2002;124(31):9074-82.")
        self.CelluloseIB_citationLabel.setWordWrap(True)
        CelluloseIB_citation_font = self.CelluloseIB_citationLabel.font()
        CelluloseIB_citation_font.setPointSize(6) 
        self.CelluloseIB_citationLabel.setFont(CelluloseIB_citation_font)
        CelluloseIB_layout.addWidget(self.CelluloseIB_citationLabel)
        self.CelluloseIB_citationLabel.hide()


        # Connect combo box selection changes to update display
        self.CelluloseIB_ComboBox.currentIndexChanged.connect(self.CelluloseIB_updateParametersDisplay)

        # Invoke button setup, initially hidden
        self.CelluloseIB_invokeButton = QPushButton("Invoke Script")
        self.CelluloseIB_invokeButton.setVisible(False)
        self.CelluloseIB_invokeButton.clicked.connect(self.CelluloseIB_invokeScript)
        CelluloseIB_layout.addWidget(self.CelluloseIB_invokeButton)


    def CelluloseIB_initParameterWidgets(self, font):
        # Create two horizontal layouts
        self.CelluloseIB_paramLine1 = QHBoxLayout()
        self.CelluloseIB_paramLine2 = QHBoxLayout()
        self.CelluloseIB_paramLine3 = QHBoxLayout()

        # Initialize QLineEdit objects for parameters and repeat units
        self.CelluloseIB_aParam = QLineEdit()
        self.CelluloseIB_bParam = QLineEdit()
        self.CelluloseIB_cParam = QLineEdit()
        self.CelluloseIB_gammaParam = QLineEdit()
        self.CelluloseIB_aRepeatUnits = QLineEdit()
        self.CelluloseIB_bRepeatUnits = QLineEdit()
        self.CelluloseIB_cRepeatUnits = QLineEdit()


        self.CelluloseIB_width = QLineEdit()
        self.CelluloseIB_height = QLineEdit()

        # Add widgets to first line layout
        self.CelluloseIB_setupParameterWidget("a (Å)", self.CelluloseIB_aParam, True, "", self.CelluloseIB_paramLine1, font)
        self.CelluloseIB_setupParameterWidget("b (Å)", self.CelluloseIB_bParam, True, "", self.CelluloseIB_paramLine1, font)
        self.CelluloseIB_setupParameterWidget("c (Å)", self.CelluloseIB_cParam, True, "", self.CelluloseIB_paramLine1, font)
        self.CelluloseIB_setupParameterWidget("gamma angle γ (°)", self.CelluloseIB_gammaParam, True, "", self.CelluloseIB_paramLine1, font)



        self.CelluloseIB_setupParameterWidget("Cross-section width (Å)", self.CelluloseIB_width, True, "", self.CelluloseIB_paramLine2, font)
        self.CelluloseIB_setupParameterWidget("Cross-section height (Å)", self.CelluloseIB_height, True, "", self.CelluloseIB_paramLine2, font)

        # Add widgets to second line layout
        self.CelluloseIB_setupParameterWidget("a repetition", self.CelluloseIB_aRepeatUnits, True, "", self.CelluloseIB_paramLine3, font)
        self.CelluloseIB_setupParameterWidget("b repetition", self.CelluloseIB_bRepeatUnits, True, "", self.CelluloseIB_paramLine3, font)
        self.CelluloseIB_setupParameterWidget("c repetition", self.CelluloseIB_cRepeatUnits, False, "", self.CelluloseIB_paramLine3, font)

        # Add both lines to the group box layout
        self.CelluloseIB_parametersGroup.layout().addLayout(self.CelluloseIB_paramLine1)
        self.CelluloseIB_parametersGroup.layout().addLayout(self.CelluloseIB_paramLine2)
        self.CelluloseIB_parametersGroup.layout().addLayout(self.CelluloseIB_paramLine3)

    def CelluloseIB_updateImageDisplay(self, index):
        CelluloseIB_shape = self.CelluloseIB_ComboBox.currentText()
        if CelluloseIB_shape == "18-chain hexagonal cross-section shape":
            CelluloseIB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ibeta', 'cellulose-Ib-18-chain.png') )
        elif CelluloseIB_shape == "24-chain hexagonal cross-section shape":
            CelluloseIB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ibeta', 'cellulose-Ib-24-chain.png') )
        elif CelluloseIB_shape == "36-chain hexagonal cross-section shape":
            CelluloseIB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ibeta', 'cellulose-Ib-36-chain.png') )
        elif CelluloseIB_shape == "36-chain square cross-section shape":
            CelluloseIB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ibeta', 'cellulose-Ib-square.png') )
        elif CelluloseIB_shape == "Rectangle cross-section shape":
            CelluloseIB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ibeta', 'cellulose-Ib-rectangle.png') )
        elif CelluloseIB_shape == "Parallelogram cross-section shape":
            CelluloseIB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-Ibeta', 'cellulose-Ib-par.png') )
        else:
            self.CelluloseIB_imageLabel.clear()
            return
        self.CelluloseIB_imageLabel.setPixmap(CelluloseIB_pixmap)
        self.CelluloseIB_imageLabel.show()


    def CelluloseIB_setupParameterWidget(self, CelluloseIB_label, CelluloseIB_widget, readOnly, CelluloseIB_defaultValue, CelluloseIB_layout, CelluloseIB_font):
        CelluloseIB_labelWidget = QLabel(CelluloseIB_label)
        CelluloseIB_labelWidget.setFont(CelluloseIB_font)
        CelluloseIB_widget.setFont(CelluloseIB_font)
        CelluloseIB_widget.setReadOnly(readOnly)
        CelluloseIB_widget.setText(CelluloseIB_defaultValue)
        if readOnly:
            CelluloseIB_widget.setStyleSheet("background-color: lightgrey;")
        CelluloseIB_layout.addWidget(CelluloseIB_labelWidget)
        CelluloseIB_layout.addWidget(CelluloseIB_widget)
    

    def CelluloseIB_updateReadOnlyState(self, CelluloseIB_widget, readOnly):
        CelluloseIB_widget.setReadOnly(readOnly)
        if readOnly:
            CelluloseIB_widget.setStyleSheet("background-color: #D3D3D3;")  # Light grey background
            CelluloseIB_widget.setEnabled(False)  # Optionally disable the widget to make it clear it's not interactive
        else:
            CelluloseIB_widget.setStyleSheet("background-color: white;")
            CelluloseIB_widget.setEnabled(True)  # Re-enable the widget for user interaction

    def CelluloseIB_Visibility(self, checked):
        self.CelluloseIB_ComboBox.setVisible(checked)
        if checked:
            self.CelluloseIB_ComboBox.setCurrentIndex(0) 
            self.CelluloseIB_parametersGroup.setVisible(False)
        else:
            self.CelluloseIB_ComboBox.setVisible(False)
            self.CelluloseIB_parametersGroup.setVisible(False)

    def CelluloseIB_updateParametersDisplay(self):
        if self.CelluloseIB_ComboBox.currentIndex() == 0:
            self.CelluloseIB_parametersGroup.setVisible(False)
        else:
            self.CelluloseIB_parametersGroup.setVisible(True)
            model = self.CelluloseIB_ComboBox.currentText()
            if self.CelluloseIB_Experimental.isChecked() :
                self.CelluloseIB_citationLabel.show()
                if model in ["18-chain hexagonal cross-section shape", "24-chain hexagonal cross-section shape", "36-chain hexagonal cross-section shape", "36-chain square cross-section shape"]:
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.CelluloseIB_setupModificationsSection(self.CelluloseIB_parametersGroup.layout(), QFont("Arial", 13))
                    self.CelluloseIB_cRepeatUnits.clear()  
                    self.CelluloseIB_width.clear()
                    self.CelluloseIB_height.clear()
  
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aParam, True)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bParam, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_cParam, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_gammaParam, True)   
                    self.CelluloseIB_aParam.setText("7.784")
                    self.CelluloseIB_bParam.setText("8.201")
                    self.CelluloseIB_cParam.setText("10.38")
                    self.CelluloseIB_gammaParam.setText("96.5")

                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_width, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_height, True)   
                    self.CelluloseIB_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.CelluloseIB_height.setStyleSheet("background-color: #D3D3D3;")         

                    # Make repeat units fields read-only and adjust their styles
                    self.CelluloseIB_cRepeatUnits.setStyleSheet("background-color: white;")
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bRepeatUnits, True)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aRepeatUnits, True)       

                elif model in ["Parallelogram cross-section shape"]:
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.CelluloseIB_setupModificationsSection(self.CelluloseIB_parametersGroup.layout(), QFont("Arial", 13))
                    self.CelluloseIB_cRepeatUnits.clear()  
                    self.CelluloseIB_width.clear()
                    self.CelluloseIB_height.clear()
  
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aParam, True)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bParam, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_cParam, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_gammaParam, True)   
                    self.CelluloseIB_aParam.setText("7.784")
                    self.CelluloseIB_bParam.setText("8.201")
                    self.CelluloseIB_cParam.setText("10.38")
                    self.CelluloseIB_gammaParam.setText("96.5")        

                    # Make repeat units fields read-only and adjust their styles
                    self.CelluloseIB_cRepeatUnits.setStyleSheet("background-color: white;")
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bRepeatUnits, True)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aRepeatUnits, True)       

                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_width,  False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_height, False)   
                    self.CelluloseIB_width.setStyleSheet("background-color:  white;") 
                    self.CelluloseIB_height.setStyleSheet("background-color: white;")     

                elif model == "Rectangle cross-section shape":
                    self.CelluloseIB_setupModificationsSection(self.CelluloseIB_parametersGroup.layout(), QFont("Arial", 13))
                    self.CelluloseIB_aRepeatUnits.clear()
                    self.CelluloseIB_bRepeatUnits.clear()
                    self.CelluloseIB_cRepeatUnits.clear()       
                    self.CelluloseIB_width.clear()
                    self.CelluloseIB_height.clear()             
                    # Set fields with preset values and adjustments for editability
                    self.CelluloseIB_aParam.setText("7.784")
                    self.CelluloseIB_bParam.setText("8.201")
                    self.CelluloseIB_cParam.setText("10.38")
                    self.CelluloseIB_gammaParam.setText("96.5")
                    self.CelluloseIB_cRepeatUnits.setStyleSheet("background-color: white;")  
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aParam, True)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bParam, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_cParam, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_gammaParam, True)      
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bRepeatUnits, False)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aRepeatUnits, False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_width, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_height, True)   
                    self.CelluloseIB_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.CelluloseIB_height.setStyleSheet("background-color: #D3D3D3;")     


            elif self.CelluloseIB_UserDefined.isChecked() :
                self.CelluloseIB_citationLabel.hide()
                if model == "Rectangle cross-section shape":
                    self.CelluloseIB_setupModificationsSection(self.CelluloseIB_parametersGroup.layout(), QFont("Arial", 13))
                    # Set fields with preset values and adjustments for editability
                    self.CelluloseIB_aParam.clear()
                    self.CelluloseIB_bParam.clear()
                    self.CelluloseIB_cParam.clear()
                    self.CelluloseIB_gammaParam.clear()
                    self.CelluloseIB_aRepeatUnits.clear()
                    self.CelluloseIB_bRepeatUnits.clear()
                    self.CelluloseIB_cRepeatUnits.clear()
                    self.CelluloseIB_width.clear()
                    self.CelluloseIB_height.clear()            
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aParam, False)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bParam, False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_cParam, False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_gammaParam, False)             
                    self.CelluloseIB_cRepeatUnits.setStyleSheet("background-color: white;")     
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bRepeatUnits, False)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aRepeatUnits, False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_width, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_height, True)   
                    self.CelluloseIB_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.CelluloseIB_height.setStyleSheet("background-color: #D3D3D3;")     

                elif  model in ["18-chain hexagonal cross-section shape", "24-chain hexagonal cross-section shape", "36-chain hexagonal cross-section shape", "36-chain square cross-section shape"]:
                    self.CelluloseIB_aParam.clear()
                    self.CelluloseIB_bParam.clear()
                    self.CelluloseIB_cParam.clear()
                    self.CelluloseIB_gammaParam.clear()
                    self.CelluloseIB_cRepeatUnits.clear()    
                    self.CelluloseIB_width.clear()
                    self.CelluloseIB_height.clear()                            
                    self.CelluloseIB_setupModificationsSection(self.CelluloseIB_parametersGroup.layout(), QFont("Arial", 13))
                    # Set fields with preset values and adjustments for editability
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aParam, False)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bParam, False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_cParam, False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_gammaParam, False)             
                    self.CelluloseIB_cRepeatUnits.setStyleSheet("background-color: white;")     
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bRepeatUnits, True)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aRepeatUnits, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_width, True)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_height, True)   
                    self.CelluloseIB_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.CelluloseIB_height.setStyleSheet("background-color: #D3D3D3;") 

                elif model in ["Parallelogram cross-section shape"]:
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.CelluloseIB_setupModificationsSection(self.CelluloseIB_parametersGroup.layout(), QFont("Arial", 13))
                    self.CelluloseIB_aParam.clear()
                    self.CelluloseIB_bParam.clear()
                    self.CelluloseIB_cParam.clear()
                    self.CelluloseIB_gammaParam.clear()
                    self.CelluloseIB_cRepeatUnits.clear()  
                    self.CelluloseIB_width.clear()
                    self.CelluloseIB_height.clear()
  
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aParam, False)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bParam, False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_cParam, False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_gammaParam, False)             
                    self.CelluloseIB_cRepeatUnits.setStyleSheet("background-color: white;")     
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bRepeatUnits, True)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aRepeatUnits, True)      

                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_width,  False)             
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_height, False)   
                    self.CelluloseIB_width.setStyleSheet("background-color:  white;") 
                    self.CelluloseIB_height.setStyleSheet("background-color: white;")     

                    # Make repeat units fields read-only and adjust their styles
                    self.CelluloseIB_cRepeatUnits.setStyleSheet("background-color: white;")
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_bRepeatUnits, True)    
                    self.CelluloseIB_updateReadOnlyState(self.CelluloseIB_aRepeatUnits, True)       

            else:
                # Hide modification options if not the specific model and type
                for i in reversed(range(self.CelluloseIB_modificationsLayout.count())): 
                    self.CelluloseIB_modificationsLayout.itemAt(i).widget().setParent(None)

    def CelluloseIB_setupModificationsSection(self, CelluloseIB_layout, CelluloseIB_font):
        # Add a layout for modifications if it doesn't exist
        if not hasattr(self, 'CelluloseIB_modificationsLayout'):
            self.CelluloseIB_modificationsLayout = QHBoxLayout()
            self.CelluloseIB_carboxylationRadio = QRadioButton("Carboxylation")
            self.CelluloseIB_sulfateRadio = QRadioButton("Sulfate")
            self.CelluloseIB_noModRadio = QRadioButton("No Modification")
            self.CelluloseIB_sulfateRadio.setFont(CelluloseIB_font)
            self.CelluloseIB_carboxylationRadio.setFont(CelluloseIB_font)
            self.CelluloseIB_noModRadio.setFont(CelluloseIB_font)
            self.CelluloseIB_modificationsLayout.addWidget(self.CelluloseIB_carboxylationRadio)
            self.CelluloseIB_modificationsLayout.addWidget(self.CelluloseIB_sulfateRadio)

            self.CelluloseIB_modificationsLayout.addWidget(self.CelluloseIB_noModRadio)
            CelluloseIB_layout.addLayout(self.CelluloseIB_modificationsLayout)

            # Setup Inputs and Connections
            self.CelluloseIB_setupModificationInputs()
            CelluloseIB_layout.addWidget(self.CelluloseIB_modificationInputsWidget)
            self.CelluloseIB_sulfateRadio.toggled.connect(lambda checked: self.CelluloseIB_updateModificationInputs("Sulfate", checked))
            self.CelluloseIB_carboxylationRadio.toggled.connect(lambda checked: self.CelluloseIB_updateModificationInputs("Carboxylation", checked))
            self.CelluloseIB_noModRadio.toggled.connect(lambda checked: self.CelluloseIB_updateModificationInputs("None", checked))


            # Generate Structure Button
            CelluloseIB_Font = QFont("Arial", 13)
            self.CelluloseIB_invokeButton = QPushButton("Generate Structure")
            self.CelluloseIB_invokeButton.setFont(CelluloseIB_Font)
            self.CelluloseIB_invokeButton.setVisible(False)  # Initially hidden
            self.CelluloseIB_invokeButton.clicked.connect(self.CelluloseIB_invokeScript)  # Connect to invoke script logic
            CelluloseIB_layout.addWidget(self.CelluloseIB_invokeButton)
            
            
    def CelluloseIB_setupModificationInputs(self):
        self.CelluloseIB_modificationInputsWidget = QWidget()
        CelluloseIB_modification_mainLayout = QVBoxLayout(self.CelluloseIB_modificationInputsWidget)
        CelluloseIB_font = QFont("Arial", 13)
        CelluloseIB_font_Sel = QFont("Arial", 12)

        CelluloseIB_carboxylation_plane_layout = QHBoxLayout()
        self.CelluloseIB_carboxylation_planeLabel = QLabel("Please select cellulose-Iβ plane for carboxylation modifications:")
        self.CelluloseIB_carboxylation_planeLabel.setFont(CelluloseIB_font)
        self.CelluloseIB_carboxylation_planeComboBox = QComboBox()
        self.CelluloseIB_carboxylation_planeComboBox.setFont(CelluloseIB_font_Sel)
        self.CelluloseIB_carboxylation_planeComboBox.addItems([ "Select here",
                                                      "Single (1-10) plane (Only support hexagonal and square cross-section)",        
                                                      "Two (1-10) planes (Only support hexagonal and square cross-section)", 
                                                      "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)",
                                                      "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)",
                                                      "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)",                                                      
                                                      "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (010) plane (Only support rectangle cross-section)",
                                                      "Two (010) planes (Only support rectangle cross-section)",                                                     
                                                      "Single (010) and (100) planes (Only support rectangle cross-section)",
                                                      "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                      "Left-side plane (Only support parallelogram cross-section)",
                                                      "Left- and right-side planes (Only support parallelogram cross-section)",
                                                      "Four-side planes (Only support parallelogram cross-section)"]            )
        CelluloseIB_carboxylation_plane_layout.addWidget(self.CelluloseIB_carboxylation_planeLabel)
        CelluloseIB_carboxylation_plane_layout.addWidget(self.CelluloseIB_carboxylation_planeComboBox)
        CelluloseIB_modification_mainLayout.addLayout(CelluloseIB_carboxylation_plane_layout)


        # Degree of sulfate input
        CelluloseIB_sulfate_plane_layout = QHBoxLayout()
        self.CelluloseIB_sulfate_planeLabel = QLabel("Please select cellulose-Iβ plane for sulfate modifications:")
        self.CelluloseIB_sulfate_planeLabel.setFont(CelluloseIB_font)
        self.CelluloseIB_sulfate_planeComboBox = QComboBox()
        self.CelluloseIB_sulfate_planeComboBox.setFont(CelluloseIB_font_Sel)
        self.CelluloseIB_sulfate_planeComboBox.addItems([ "Select here",
                                                      "Single (1-10) plane (Only support hexagonal and square cross-section)",        
                                                      "Two (1-10) planes (Only support hexagonal and square cross-section)", 
                                                      "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)",
                                                      "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)",
                                                      "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)",                                                      
                                                      "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)", 
                                                      "Single (010) plane (Only support rectangle cross-section)",
                                                      "Two (010) planes (Only support rectangle cross-section)",                                                     
                                                      "Left-side plane (Only support parallelogram cross-section)",
                                                      "Left- and right-side planes (Only support parallelogram cross-section)",
                                                      "Four-side planes (Only support parallelogram cross-section)"]            )
        CelluloseIB_sulfate_plane_layout.addWidget(self.CelluloseIB_sulfate_planeLabel)
        CelluloseIB_sulfate_plane_layout.addWidget(self.CelluloseIB_sulfate_planeComboBox)
        CelluloseIB_modification_mainLayout.addLayout(CelluloseIB_sulfate_plane_layout)


        ##surface charge for sulfate
        #CelluloseIB_sulfate_layout = QHBoxLayout()
        CelluloseIB_sulfate_pH_layout = QHBoxLayout()
        self.CelluloseIB_sulfate_Label = QLabel("Surface charge density (unit: mmol/g):")
        self.CelluloseIB_sulfate_Label.setFont(CelluloseIB_font)
        
        self.CelluloseIB_sulfate_LineEdit = QLineEdit()
        self.CelluloseIB_sulfate_LineEdit.setFont(CelluloseIB_font)
        self.CelluloseIB_sulfate_LineEdit.setFixedSize(QSize(200, 40))
        self.CelluloseIB_sulfate_pHLabel = QLabel("pH level of cellulose-Iβ structure (>0 and <14):")
        self.CelluloseIB_sulfate_pHLabel.setFont(CelluloseIB_font)
        self.CelluloseIB_sulfate_pHLineEdit = QLineEdit()
        self.CelluloseIB_sulfate_pHLineEdit.setFont(CelluloseIB_font)
        self.CelluloseIB_sulfate_pHLineEdit.setFixedSize(QSize(200, 40))
        CelluloseIB_sulfate_pH_layout.addWidget(self.CelluloseIB_sulfate_Label)
        CelluloseIB_sulfate_pH_layout.addWidget(self.CelluloseIB_sulfate_LineEdit)
        CelluloseIB_sulfate_pH_layout.addSpacing(100)  ##space between dda and pH
        CelluloseIB_sulfate_pH_layout.addWidget(self.CelluloseIB_sulfate_pHLabel)
        CelluloseIB_sulfate_pH_layout.addWidget(self.CelluloseIB_sulfate_pHLineEdit)
        CelluloseIB_modification_mainLayout.addLayout(CelluloseIB_sulfate_pH_layout)
        #CelluloseIB_sulfate_layout.addWidget(self.CelluloseIB_sulfate_Label)

        #CelluloseIB_sulfate_layout.addWidget(self.CelluloseIB_sulfate_LineEdit)
        #CelluloseIB_modification_mainLayout.addLayout(CelluloseIB_sulfate_layout)


        # Degree of carboxylation input
        CelluloseIB_carboxylation_pH_layout = QHBoxLayout()
        self.CelluloseIB_carboxylation_Label = QLabel("Surface charge density (unit: mmol/g):")
        self.CelluloseIB_carboxylation_Label.setFont(CelluloseIB_font)
        self.CelluloseIB_carboxylation_LineEdit = QLineEdit()
        self.CelluloseIB_carboxylation_LineEdit.setFont(CelluloseIB_font)
        self.CelluloseIB_carboxylation_LineEdit.setFixedSize(QSize(200, 40))
        self.CelluloseIB_carboxylation_pHLabel = QLabel("pH level of cellulose-Iβ structure (>0 and <14):")
        self.CelluloseIB_carboxylation_pHLabel.setFont(CelluloseIB_font)
        self.CelluloseIB_carboxylation_pHLineEdit = QLineEdit()
        self.CelluloseIB_carboxylation_pHLineEdit.setFont(CelluloseIB_font)
        self.CelluloseIB_carboxylation_pHLineEdit.setFixedSize(QSize(200, 40))
        CelluloseIB_carboxylation_pH_layout.addWidget(self.CelluloseIB_carboxylation_Label)
        CelluloseIB_carboxylation_pH_layout.addWidget(self.CelluloseIB_carboxylation_LineEdit)
        CelluloseIB_carboxylation_pH_layout.addSpacing(100)  ##space between dda and pH
        CelluloseIB_carboxylation_pH_layout.addWidget(self.CelluloseIB_carboxylation_pHLabel)
        CelluloseIB_carboxylation_pH_layout.addWidget(self.CelluloseIB_carboxylation_pHLineEdit)
        CelluloseIB_modification_mainLayout.addLayout(CelluloseIB_carboxylation_pH_layout)


        CelluloseIB_ForceField_layout = QHBoxLayout()
        self.CelluloseIB_ForceFieldTypeLabel = QLabel("Atomistic Simulation Force Field:")
        self.CelluloseIB_ForceFieldTypeLabel.setFont(CelluloseIB_font)
        self.CelluloseIB_ForceFieldTypeselector = QComboBox()
        self.CelluloseIB_ForceFieldTypeselector.setFont(CelluloseIB_font)
        #self.CelluloseIB_ForceFieldTypeLabel.setFixedSize(550, 60)  # Width of 200 pixels and height of 20 pixels
        self.CelluloseIB_ForceFieldTypeselector.addItem("Please select the force field for atomistic simulations", True)
        self.CelluloseIB_ForceFieldTypeselector.addItem("CHARMM36 Infinite Chain Model", False)
        self.CelluloseIB_ForceFieldTypeselector.addItem("CHARMM36 Finite Chain Model", False)
        self.CelluloseIB_ForceFieldTypeselector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.CelluloseIB_ForceFieldTypeselector.addItem("GLYCAM06 Finite Chain Model", False)
        CelluloseIB_ForceField_layout.addWidget(self.CelluloseIB_ForceFieldTypeLabel)
        CelluloseIB_ForceField_layout.addWidget(self.CelluloseIB_ForceFieldTypeselector)
        CelluloseIB_modification_mainLayout.addLayout(CelluloseIB_ForceField_layout)

        self.CelluloseIB_sulfate_planeLabel.setVisible(False)
        self.CelluloseIB_sulfate_planeComboBox.setVisible(False)
        self.CelluloseIB_carboxylation_planeLabel.setVisible(False)
        self.CelluloseIB_carboxylation_planeComboBox.setVisible(False)

        self.CelluloseIB_sulfate_Label.setVisible(False)
        self.CelluloseIB_sulfate_LineEdit.setVisible(False)
        self.CelluloseIB_sulfate_pHLabel.setVisible(False)
        self.CelluloseIB_sulfate_pHLineEdit.setVisible(False)

        self.CelluloseIB_carboxylation_Label.setVisible(False)
        self.CelluloseIB_carboxylation_LineEdit.setVisible(False)
        self.CelluloseIB_carboxylation_pHLabel.setVisible(False)
        self.CelluloseIB_carboxylation_pHLineEdit.setVisible(False)


        self.CelluloseIB_ForceFieldTypeLabel.setVisible(False)
        self.CelluloseIB_ForceFieldTypeselector.setVisible(False)

        self.CelluloseIB_sulfate_planeComboBox.currentIndexChanged.connect(
        lambda: self.CelluloseIB_manageVisibilityAndStylesForsulfate(
            self.CelluloseIB_sulfate_planeComboBox.currentText()
           )
        )
        self.CelluloseIB_modificationInputsWidget.setLayout(CelluloseIB_modification_mainLayout)

        self.CelluloseIB_carboxylation_planeComboBox.currentIndexChanged.connect(
        lambda: self.CelluloseIB_manageVisibilityAndStylesForCarboxylation(
            self.CelluloseIB_carboxylation_planeComboBox.currentText()
           )
        )
        self.CelluloseIB_modificationInputsWidget.setLayout(CelluloseIB_modification_mainLayout)


    def CelluloseIB_updateModificationInputs(self, CelluloseIB_modificationType, checked):
        if checked:
            if  CelluloseIB_modificationType == "Sulfate":
                CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
                self.CelluloseIB_manageVisibilityAndStylesForsulfate(CelluloseIB_sulfate_plane_selection)

            elif CelluloseIB_modificationType == "Carboxylation":
                CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
                self.CelluloseIB_manageVisibilityAndStylesForCarboxylation(CelluloseIB_carboxylation_plane_selection)
            elif  CelluloseIB_modificationType == "None":
                self.CelluloseIB_sulfate_Label.setVisible(False)
                self.CelluloseIB_sulfate_LineEdit.setVisible(False)
                self.CelluloseIB_sulfate_pHLabel.setVisible(False)
                self.CelluloseIB_sulfate_pHLineEdit.setVisible(False)

                self.CelluloseIB_carboxylation_Label.setVisible(False)
                self.CelluloseIB_carboxylation_LineEdit.setVisible(False)
                self.CelluloseIB_carboxylation_pHLabel.setVisible(False)
                self.CelluloseIB_carboxylation_pHLineEdit.setVisible(False)

    
                self.CelluloseIB_sulfate_planeLabel.setVisible(False)
                self.CelluloseIB_sulfate_planeComboBox.setVisible(False)
                self.CelluloseIB_carboxylation_planeLabel.setVisible(False)
                self.CelluloseIB_carboxylation_planeComboBox.setVisible(False)

                self.CelluloseIB_ForceFieldTypeLabel.setVisible(True)
                self.CelluloseIB_ForceFieldTypeselector.setVisible(True)
                self.CelluloseIB_invokeButton.setVisible(True)  # Show "Generate Structure" button
        else:
            self.CelluloseIB_sulfate_Label.setVisible(False)
            self.CelluloseIB_sulfate_LineEdit.setVisible(False)
            self.CelluloseIB_sulfate_pHLabel.setVisible(False)
            self.CelluloseIB_sulfate_pHLineEdit.setVisible(False)

            self.CelluloseIB_carboxylation_Label.setVisible(False)
            self.CelluloseIB_carboxylation_LineEdit.setVisible(False)

            self.CelluloseIB_carboxylation_pHLabel.setVisible(False)
            self.CelluloseIB_carboxylation_pHLineEdit.setVisible(False)


            self.CelluloseIB_sulfate_planeLabel.setVisible(False)
            self.CelluloseIB_sulfate_planeComboBox.setVisible(False)
            self.CelluloseIB_carboxylation_planeLabel.setVisible(False)
            self.CelluloseIB_carboxylation_planeComboBox.setVisible(False)


            self.CelluloseIB_ForceFieldTypeLabel.setVisible(False)
            self.CelluloseIB_ForceFieldTypeselector.setVisible(False)
            self.CelluloseIB_invokeButton.setVisible(False)  

    def CelluloseIB_manageVisibilityAndStylesForsulfate(self, CelluloseIB_sulfate_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.CelluloseIB_sulfate_planeLabel.setVisible(True)
        self.CelluloseIB_sulfate_planeComboBox.setVisible(True)

        self.CelluloseIB_carboxylation_planeLabel.setVisible(False)
        self.CelluloseIB_carboxylation_planeComboBox.setVisible(False)
        self.CelluloseIB_sulfate_pHLineEdit.setReadOnly(True)
        self.CelluloseIB_sulfate_pHLineEdit.setStyleSheet("background-color: #D3D3D3;")

        self.CelluloseIB_sulfate_Label.setVisible(True)
        self.CelluloseIB_sulfate_LineEdit.setVisible(True)
        self.CelluloseIB_sulfate_pHLabel.setVisible(True)
        self.CelluloseIB_sulfate_pHLineEdit.setVisible(True)

        self.CelluloseIB_carboxylation_Label.setVisible(False)
        self.CelluloseIB_carboxylation_LineEdit.setVisible(False)
        self.CelluloseIB_carboxylation_pHLabel.setVisible(False)
        self.CelluloseIB_carboxylation_pHLineEdit.setVisible(False)
        self.CelluloseIB_ForceFieldTypeLabel.setVisible(True)
        self.CelluloseIB_ForceFieldTypeselector.setVisible(True)
        self.CelluloseIB_invokeButton.setVisible(True)
    
        if CelluloseIB_sulfate_plane_selection in [ "Single (1-10) plane (Only support hexagonal and square cross-section)",        
                                                    "Two (1-10) planes (Only support hexagonal and square cross-section)", 
                                                    "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)",
                                                    "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)",
                                                    "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)",                                                      
                                                    "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)", 
                                                    "Single (010) plane (Only support rectangle cross-section)",
                                                    "Two (010) planes (Only support rectangle cross-section)",                                                     
                                                    "Left-side plane (Only support parallelogram cross-section)",
                                                    "Left- and right-side planes (Only support parallelogram cross-section)",
                                                    "Four-side planes (Only support parallelogram cross-section)"]            :
            self.CelluloseIB_sulfate_LineEdit.setReadOnly(False)
            self.CelluloseIB_sulfate_LineEdit.setStyleSheet("background-color: white;")


    def CelluloseIB_manageVisibilityAndStylesForCarboxylation(self, CelluloseIB_carboxylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.CelluloseIB_sulfate_planeLabel.setVisible(False)
        self.CelluloseIB_sulfate_planeComboBox.setVisible(False)
        self.CelluloseIB_sulfate_pHLabel.setVisible(False)
        self.CelluloseIB_sulfate_pHLineEdit.setVisible(False)
        self.CelluloseIB_carboxylation_planeLabel.setVisible(True)
        self.CelluloseIB_carboxylation_planeComboBox.setVisible(True)
        self.CelluloseIB_sulfate_Label.setVisible(False)
        self.CelluloseIB_sulfate_LineEdit.setVisible(False)
        self.CelluloseIB_carboxylation_Label.setVisible(True)
        self.CelluloseIB_carboxylation_LineEdit.setVisible(True)
        self.CelluloseIB_carboxylation_pHLabel.setVisible(True)
        self.CelluloseIB_carboxylation_pHLineEdit.setVisible(True)
        self.CelluloseIB_ForceFieldTypeLabel.setVisible(True)
        self.CelluloseIB_ForceFieldTypeselector.setVisible(True)
        self.CelluloseIB_invokeButton.setVisible(True)
    
        if CelluloseIB_carboxylation_plane_selection in [  "Single (1-10) plane (Only support hexagonal and square cross-section)",        
                                                           "Two (1-10) planes (Only support hexagonal and square cross-section)", 
                                                           "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)",
                                                           "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)",
                                                           "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)",                                                      
                                                           "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)", 
                                                           "Single (100) plane (Only support rectangle cross-section)",
                                                           "Two (100) planes (Only support rectangle cross-section)",
                                                           "Single (010) plane (Only support rectangle cross-section)",
                                                           "Two (010) planes (Only support rectangle cross-section)",                                                     
                                                           "Single (010) and (100) planes (Only support rectangle cross-section)",
                                                           "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                           "Left-side plane (Only support parallelogram cross-section)",
                                                           "Left- and right-side planes (Only support parallelogram cross-section)",
                                                           "Four-side planes (Only support parallelogram cross-section)"]  :
            self.CelluloseIB_carboxylation_LineEdit.setReadOnly(False)
            self.CelluloseIB_carboxylation_LineEdit.setStyleSheet("background-color: white;")
            self.CelluloseIB_carboxylation_pHLineEdit.setReadOnly(False)
            self.CelluloseIB_carboxylation_pHLineEdit.setStyleSheet("background-color: white;")
    
    def CelluloseIB_invokeScript(self):
            model = self.CelluloseIB_ComboBox.currentText()
            
            if self.CelluloseIB_Experimental.isChecked():

                if  model == "18-chain hexagonal cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                        #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "18-chain-model"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "18-chain-model"
                            CelluloseIB_folder_name = "glycam06"
                        try:
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_18chain_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_18chain_nochemical_Topology()                    
                            else:
                                error_message = CelluloseIB_result.stderr.strip()
                                QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ###cellulose - -- 18chain-- neutron-----==== carboxylation====
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "glycam06"

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    ###cellulose - -- 18chain-- neutron------=== sulfate===
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                    "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                    "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)"]:
                            

                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                elif  model == "24-chain hexagonal cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "24-chain-model"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "24-chain-model"
                            CelluloseIB_folder_name = "glycam06"
                        try:    
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_24chain_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_24chain_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    ###cellulose - -- 24chain-- neutron-----==== carboxylation====
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                     
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                   
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    ###cellulose - -- 24hain-- neutron------=== sulfate===
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                    "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                    "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)"]:
                            

                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                elif  model == "36-chain hexagonal cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "36-chain-model"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "36-chain-model"
                            CelluloseIB_folder_name = "glycam06"
                        try:    
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_36chain_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_36chain_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")                            


                    ###cellulose - -- 36chain-- neutron-----==== carboxylation====
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                     
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                   
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    ###cellulose - -- 36hain-- neutron------=== sulfate===
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                    "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                    "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)"]:
                            

                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                ###cellulose Ibeta- 36------------- square ----------------------
                elif  model == "36-chain square cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "36-square-model"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "36-square-model"
                            CelluloseIB_folder_name = "glycam06"
                        try:    
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_36square_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_36square_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")                            


                    ######cellulose Ibeta- 36------------- square -----------------------==== carboxylation====
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support square cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                     
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                   
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                  
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    #########cellulose Ibeta- 36------------- square -----------------------=== sulfate===
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                    "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                    "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)"]:
                            

                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support square cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            #CelluloseIB_a_unit = self.CelluloseIB_unitInputs["a"].text()
                            #CelluloseIB_b_unit = self.CelluloseIB_unitInputs["b"].text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

               
                ####cellulose Ibeta ------neutron data--------========rectangle cross-section==============  
                elif model == "Rectangle cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                        CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_a_unit and  CelluloseIB_b_unit and CelluloseIB_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "crystallite"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "crystallite"
                            CelluloseIB_folder_name = "glycam06"
                        try:
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_rectangle_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_rectangle_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    ######cellulose Ibeta------------- rectangle -----------------------==== carboxylation====
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (1-10) plane (Only support hexagonal and square cross-section)",                "Two (1-10) planes (Only support hexagonal and square cross-section)",
                                                                          "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)", "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)",    
                                                                          "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)",     "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)",                           "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(1-10),(110),left-,and right-side planes don't support rectangle cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (010) and (100) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (010) plane (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Two (010) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_100.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_100.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_100.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_100.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_100-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_100-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (010) and (100) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010_100.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010_100.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ######cellulose Ibeta------------- rectangle -----------------------==== sulfate====
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (1-10) plane (Only support hexagonal and square cross-section)",                "Two (1-10) planes (Only support hexagonal and square cross-section)",
                                                                    "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)", "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)",    
                                                                    "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)",     "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)",                           "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)",                          "Single (100) plane (Only support rectangle cross-section)",
                                                                    "Two (100) planes (Only support rectangle cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(1-10),(110),left-,and right-side planes don't support rectangle cross-section shape." \
                                                      "(100) planes can not be sulfated.")
                            
                        elif CelluloseIB_sulfate_plane_selection == "Single (010) plane (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_010.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010.py"
                            #    CelluloseIB_shape_name = "crystallite"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (010) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  

                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_folder_name = "charmm36"
                           #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                           #    CelluloseIB_shape_name = "crystallite"
                           #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ###cellulose Ibeta ------neutron data----------=============parallelogram========
                elif model == "Parallelogram cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_width  = self.CelluloseIB_width.text()  
                        CelluloseIB_height = self.CelluloseIB_height.text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_height and CelluloseIB_b_unit and CelluloseIB_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "parallelogram"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            CelluloseIB_shape_name = "parallelogram"
                            CelluloseIB_folder_name = "glycam06"
                        try:
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_parallelogram_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_parallelogram_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    ###cellulose - -- =============parallelogram========-- neutron-----==== carboxylation====
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Single (1-10) plane (Only support hexagonal and square cross-section)", "Two (1-10) planes (Only support hexagonal and square cross-section)",
                                                                          "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)", "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),(1-10),and (110) planes don't support parallelogram cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Four-side planes (Only support parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Left-side plane (Only support parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Left- and right-side planes (Only support parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left_right.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left_right.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left_right.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left_right.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    ###cellulose - -- =============parallelogram========-- neutron-----==== sulfate====
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Single (1-10) plane (Only support hexagonal and square cross-section)", "Two (1-10) planes (Only support hexagonal and square cross-section)",
                                                                          "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)", "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),(1-10),and (110) planes don't support parallelogram cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Four-side planes (Only support parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_experiment.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_experiment.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width,  sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  

                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  

                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Left-side plane (Only support parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  

                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_left.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Left- and right-side planes (Only support parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left_right.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left_right.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_left_right.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left_right.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



###---cellulose-Ib----user-defined--------crystallographic parameter
            elif self.CelluloseIB_UserDefined.isChecked():
                if model == "18-chain hexagonal cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                        CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                        CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                        CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_a_parm and CelluloseIB_b_parm and CelluloseIB_c_parm  and CelluloseIB_gamma and CelluloseIB_c_unit: 
                            QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "18-chain-model"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "18-chain-model"
                            CelluloseIB_folder_name = "glycam06"
                        try:    
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_18chain_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_18chain_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                   ###cellulose - -- 18chain-------------------- userdefined-------------------==== carboxylation====---
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                                CelluloseIB_ud_folder = "user-defined"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    ###cellulose - -- 18chain-------------------- userdefined-------------------==== sulfate====--
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                    "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                    "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)"]:
                            

                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                           #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                           #    CelluloseIB_shape_name = "18-chain-model"
                           #    CelluloseIB_ud_folder = "user-defined"
                           #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "18-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                            #    CelluloseIB_shape_name = "18-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_18chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_18chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")





               ###=====user-defined======-------===24_ no modification===----
                elif model == "24-chain hexagonal cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked(): 
                        CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                        CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                        CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                        CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_a_parm and CelluloseIB_b_parm and CelluloseIB_c_parm and CelluloseIB_c_unit and CelluloseIB_gamma:
                            QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "24-chain-model"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "24-chain-model"
                            CelluloseIB_folder_name = "glycam06"
                        try:
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_24chain_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_24chain_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
    
                   ###cellulose - -- 24chain-------------------- userdefined-------------------==== carboxylation====---
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                                CelluloseIB_ud_folder = "user-defined"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    ###cellulose - -- 24chain-------------------- userdefined-------------------==== sulfate====--
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                    "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                    "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)"]:
                            

                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "24-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                            #    CelluloseIB_shape_name = "24-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_24chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_24chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                ##===user-defined====---===36-chain hexagonal shap====-----===no modification===--
                elif  model == "36-chain hexagonal cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                        CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                        CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                        CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_a_parm and CelluloseIB_b_parm and CelluloseIB_c_parm and CelluloseIB_c_unit and CelluloseIB_gamma:
                            QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "36-chain-model"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "36-chain-model"
                            CelluloseIB_folder_name = "glycam06"
                        try:
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_36chain_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_36chain_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")                    
    
    
                   ###cellulose - -- 36chain-------------------- userdefined-------------------==== carboxylation====---
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_folder_name = "glycam06"
                                CelluloseIB_ud_folder = "user-defined"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    ###cellulose - -- 36chain-------------------- userdefined-------------------==== sulfate====--
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                    "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                    "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)"]:
                            

                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-chain-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                            #    CelluloseIB_shape_name = "36-chain-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36chain_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36chain_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                ##===user-defined====---===36-chain square shap====-----===no modification===--
                elif  model == "36-chain square cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                        CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                        CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                        CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_a_parm and CelluloseIB_b_parm and CelluloseIB_c_parm and CelluloseIB_c_unit and CelluloseIB_gamma:
                            QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "36-square-model"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "36-square-model"
                            CelluloseIB_folder_name = "glycam06"
                        try:
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_36square_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_36square_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")                    
    
    
                   ###cellulose - -- 36square-------------------- userdefined-------------------==== carboxylation====---
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_folder_name = "glycam06"
                                CelluloseIB_ud_folder = "user-defined"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python",CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma,  CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_carboxylation_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    ###cellulose - -- 36square-------------------- userdefined-------------------==== sulfate====--
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                    "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                    "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                    "Left-side plane (Only support parallelogram cross-section)", "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                    "Four-side planes (Only support parallelogram cross-section)"]:
                            

                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),left-,and right-side planes don't support hexagonal cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                           #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                           #    CelluloseIB_shape_name = "36-square-model"
                           #    CelluloseIB_ud_folder = "user-defined"
                           #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) plane (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (1-10) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_1_10-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_1_10-2.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text() 
                            if not CelluloseIB_c_unit and sulfate:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                                CelluloseIB_shape_name = "36-square-model"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110_1_10.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110_1_10.py"
                            #    CelluloseIB_shape_name = "36-square-model"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_36square_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_36square_sulfate_Topology()                    
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                elif  model == "Rectangle cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                        CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                        CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                        CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                        CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                        CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_a_parm and CelluloseIB_b_parm and CelluloseIB_c_parm and CelluloseIB_c_unit and  CelluloseIB_c_unit and  CelluloseIB_b_unit and  CelluloseIB_a_unit and CelluloseIB_gamma:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "crystallite"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_shape_name = "crystallite"
                            CelluloseIB_folder_name = "glycam06"
                        try:
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta",CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_rectangle_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_rectangle_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    ######cellulose Ibeta---------=====user-defined=====---- rectangle -----------------------==== carboxylation====
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (1-10) plane (Only support hexagonal and square cross-section)",                "Two (1-10) planes (Only support hexagonal and square cross-section)",
                                                                          "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)", "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)",    
                                                                          "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)",     "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)",                           "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(1-10),(110),left-,and right-side planes don't support rectangle cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Both (010) and (100) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (010) plane (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (010) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_100.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_100.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_100.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_100.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_100-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_100-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_100-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (010) and (100) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010_100.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010_100.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010_100.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ######cellulose Ibeta---------=====user-defined=====---- rectangle -----------------------==== sulfate====
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (1-10) plane (Only support hexagonal and square cross-section)",                "Two (1-10) planes (Only support hexagonal and square cross-section)",
                                                                          "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)", "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)",    
                                                                          "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)",     "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)",
                                                                          "Left-side plane (Only support parallelogram cross-section)",                           "Left- and right-side planes (Only support parallelogram cross-section)",
                                                                          "Four-side planes (Only support parallelogram cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(1-10),(110),left-,and right-side planes don't support rectangle cross-section shape.")

                        elif CelluloseIB_sulfate_plane_selection == "Two (010) planes (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                            #    CelluloseIB_shape_name = "crystallite"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif CelluloseIB_sulfate_plane_selection == "Single (010) plane (Only support rectangle cross-section)":                                                                                                                                          
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_a_unit = self.CelluloseIB_aRepeatUnits.text()
                            CelluloseIB_b_unit = self.CelluloseIB_bRepeatUnits.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                                CelluloseIB_shape_name = "crystallite"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_010-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_010-2.py"
                            #    CelluloseIB_shape_name = "crystallite"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_a_unit, CelluloseIB_b_unit, CelluloseIB_c_unit, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_rectangle_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_rectangle_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ###cellulose Ibeta ------====usder-defined data=====----------=============parallelogram========
                elif model == "Parallelogram cross-section shape":
                    if self.CelluloseIB_noModRadio.isChecked():
                        CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                        CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                        CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                        CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                        CelluloseIB_width  = self.CelluloseIB_width.text()  
                        CelluloseIB_height = self.CelluloseIB_height.text()
                        CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                        if not CelluloseIB_height and CelluloseIB_b_unit and CelluloseIB_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                        CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_shape_name = "parallelogram"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_folder_name = "charmm36"
                        elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            CelluloseIB_shape_name = "parallelogram"
                            CelluloseIB_ud_folder = "user-defined"
                            CelluloseIB_folder_name = "glycam06"
                        try:
                            CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                            CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width]
                            CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if CelluloseIB_result.returncode == 0:
                                CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                self.CelluloseIB_exp_parallelogram_nochemical_Popup(CelluloseIB_output)
                                self.CelluloseIB_exp_parallelogram_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    ###cellulose - -- =============parallelogram========-- user-defined-----==== carboxylation====
                    elif self.CelluloseIB_carboxylationRadio.isChecked():
                        CelluloseIB_carboxylation_plane_selection = self.CelluloseIB_carboxylation_planeComboBox.currentText()
     
                        if  CelluloseIB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Single (1-10) plane (Only support hexagonal and square cross-section)", "Two (1-10) planes (Only support hexagonal and square cross-section)",
                                                                          "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)", "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),(1-10),and (110) planes don't support parallelogram cross-section shape.")
                        elif CelluloseIB_carboxylation_plane_selection == "Four-side planes (Only support parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_carboxylation_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Left-side plane (Only support parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_carboxylation_plane_selection == "Left- and right-side planes (Only support parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            carboxylation = self.CelluloseIB_carboxylation_LineEdit.text()  
                            ph = self.CelluloseIB_carboxylation_pHLineEdit.text()
                            if not CelluloseIB_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left_right.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left_right.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left_right.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left_right.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "glycam06"
                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-carboxylation", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, carboxylation, ph]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    ###cellulose - -- =============parallelogram========-- user-defined-----==== sulfate====
                    elif self.CelluloseIB_sulfateRadio.isChecked():
                        CelluloseIB_sulfate_plane_selection = self.CelluloseIB_sulfate_planeComboBox.currentText()
     
                        if  CelluloseIB_sulfate_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)",
                                                                          "Single (010) plane (Only support rectangle cross-section)", "Two (010) planes (Only support rectangle cross-section)",    
                                                                          "Single (010) and (100) planes (Only support rectangle cross-section)", "Both (010) and (100) planes (Only support rectangle cross-section)",
                                                                          "Single (1-10) plane (Only support hexagonal and square cross-section)", "Two (1-10) planes (Only support hexagonal and square cross-section)",
                                                                          "Single (1-10) and (110) planes (Only support hexagonal and square cross-section)", "Both (1-10) and (110) planes (Only support hexagonal and square cross-section)"]:
        
                            QMessageBox.warning(self, "Unsupported Operation", "(100),(010),(1-10),and (110) planes don't support parallelogram cross-section shape.")
                        elif CelluloseIB_sulfate_plane_selection == "Four-side planes (Only support parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  

                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_ud.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_ud.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Single (110) plane (Only support hexagonal, square, and parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  

                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_ud_folder = "user-defined
                            # "
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif CelluloseIB_sulfate_plane_selection == "Two (110) planes (Only support hexagonal, square, and parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  

                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_110-2.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_110-2.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Left-side plane (Only support parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  

                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_left.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif CelluloseIB_sulfate_plane_selection == "Left- and right-side planes (Only support parallelogram cross-section)":           
                            CelluloseIB_a_parm = self.CelluloseIB_aParam.text()
                            CelluloseIB_b_parm = self.CelluloseIB_bParam.text()
                            CelluloseIB_c_parm = self.CelluloseIB_cParam.text()       
                            CelluloseIB_gamma =  self.CelluloseIB_gammaParam.text()             
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()                                                                                                                           
                            CelluloseIB_width  = self.CelluloseIB_width.text()  
                            CelluloseIB_height = self.CelluloseIB_height.text()
                            CelluloseIB_c_unit = self.CelluloseIB_cRepeatUnits.text()
                            sulfate = self.CelluloseIB_sulfate_LineEdit.text()  
                            if not CelluloseIB_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
                            CelluloseIB_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if CelluloseIB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                CelluloseIB_script_name = "infinite_left_right.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left_right.py"
                                CelluloseIB_shape_name = "parallelogram"
                                CelluloseIB_ud_folder = "user-defined"
                                CelluloseIB_folder_name = "charmm36"
                            #elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    CelluloseIB_script_name = "infinite_left_right.py" if "Infinite" in CelluloseIB_ForceFieldType else "finite_left_right.py"
                            #    CelluloseIB_shape_name = "parallelogram"
                            #    CelluloseIB_ud_folder = "user-defined"
                            #    CelluloseIB_folder_name = "glycam06"
                            elif CelluloseIB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                CelluloseIB_script_path = os.path.join(CelluloseIB_base_dir, "function", "cellulose-I-beta-sulfate", CelluloseIB_ud_folder, CelluloseIB_shape_name, CelluloseIB_folder_name, CelluloseIB_script_name)
                                CelluloseIB_command = ["python", CelluloseIB_script_path, CelluloseIB_a_parm, CelluloseIB_b_parm, CelluloseIB_c_parm, CelluloseIB_gamma, CelluloseIB_c_unit, CelluloseIB_height, CelluloseIB_width, sulfate]
                                CelluloseIB_result = subprocess.run(CelluloseIB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if CelluloseIB_result.returncode == 0:
                                    CelluloseIB_output = CelluloseIB_result.stdout.strip()
                                    self.CelluloseIB_exp_parallelogram_sulfate_Popup(CelluloseIB_output)
                                    self.CelluloseIB_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = CelluloseIB_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-Iβ Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


##cellulose-I Beta 18-chain experimental data no modification
    def CelluloseIB_exp_18chain_nochemical_Topology(self):   
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "18-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIB_exp_18chain_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_18chain_nochemical_Popup(self, message):
        message = f"Native cellulose-Iβ was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_18chain_nochemical_TopologyPopup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



## carboxylation cellulose-I Beta 18-chain experimental data windows output

    def CelluloseIB_exp_18chain_carboxylation_Topology(self):  
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "18-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_18chain_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_18chain_carboxylation_Popup(self, CelluloseIB_18chain_output):
        lines = [line.strip() for line in CelluloseIB_18chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated cellulose-Iβ was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_18chain_carboxylation_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##sulfate cellulose-I Beta 18-chain experimental data windows output
    def CelluloseIB_exp_18chain_sulfate_Topology(self):  
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "18-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_18chain_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_18chain_sulfate_Popup(self, CelluloseIB_18chain_output):
        lines = [line.strip() for line in CelluloseIB_18chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iβ was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_18chain_sulfate_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##cellulose-I Beta 24-chain experimental data no modification
    def CelluloseIB_exp_24chain_nochemical_Topology(self):   
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "24-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIB_exp_24chain_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_24chain_nochemical_Popup(self, message):
        message = f"Native cellulose-Iβ was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_24chain_nochemical_TopologyPopup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)




## carboxylation cellulose-I Beta 24-chain experimental data windows output
    def CelluloseIB_exp_24chain_carboxylation_Topology(self):   
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "24-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_24chain_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_24chain_carboxylation_Popup(self, CelluloseIB_24chain_output):
        lines = [line.strip() for line in CelluloseIB_24chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated cellulose-Iβ was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_24chain_carboxylation_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##sulfate cellulose-I Beta 24-chain experimental data windows output
    def CelluloseIB_exp_24chain_sulfate_Topology(self):   
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "24-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_24chain_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_24chain_sulfate_Popup(self, CelluloseIB_24chain_output):
        lines = [line.strip() for line in CelluloseIB_24chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iβ was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_24chain_sulfate_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)




##cellulose-I Beta 36-chain experimental data no modification
    def CelluloseIB_exp_36chain_nochemical_Topology(self):  #native chitin topology
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "36-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIB_exp_36chain_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_36chain_nochemical_Popup(self, message):
        message = f"Native cellulose-Iβ was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_36chain_nochemical_TopologyPopup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


## carboxylation cellulose-I Beta 36-chain experimental data windows output
    def CelluloseIB_exp_36chain_carboxylation_Topology(self):   
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "36-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_36chain_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_36chain_carboxylation_Popup(self, CelluloseIB_36chain_output):
        lines = [line.strip() for line in CelluloseIB_36chain_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated cellulose-Iβ was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_36chain_carboxylation_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##sulfate cellulose-I Beta 36-chain experimental data windows output
    def CelluloseIB_exp_36chain_sulfate_Topology(self):  
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "36-chain-model"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_36chain_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_36chain_sulfate_Popup(self, CelluloseIB_36square_output):
        lines = [line.strip() for line in CelluloseIB_36square_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iβ was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_36chain_sulfate_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##cellulose-I Beta 36-square experimental data no modification
    def CelluloseIB_exp_36square_nochemical_Topology(self):  #native chitin topology
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIB_exp_36square_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_36square_nochemical_Popup(self, message):
        message = f"Native cellulose-Iβ was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_36square_nochemical_TopologyPopup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


## carboxylation cellulose-I Beta 36-square experimental data windows output
    def CelluloseIB_exp_36square_carboxylation_Topology(self):  
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_36square_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_36square_carboxylation_Popup(self, CelluloseIB_36square_output):
        lines = [line.strip() for line in CelluloseIB_36square_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated cellulose-Iβ was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_36square_carboxylation_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##sulfate cellulose-I Beta 36-chain experimental data windows output
    def CelluloseIB_exp_36square_sulfate_Topology(self):  
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_36square_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_36square_sulfate_Popup(self, CelluloseIB_36square_output):
        lines = [line.strip() for line in CelluloseIB_36square_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iβ was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_36square_sulfate_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)





##cellulose-I Beta rectangle experimental data no modification
    def CelluloseIB_exp_rectangle_nochemical_Topology(self):  
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIB_exp_rectangle_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_rectangle_nochemical_Popup(self, message):
        message = f"Native cellulose-Iβ was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_rectangle_nochemical_TopologyPopup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##============ carboxylation cellulose-I Beta rectangle experimental data windows output
    def CelluloseIB_exp_rectangle_carboxylation_Topology(self):  
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_rectangle_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_rectangle_carboxylation_Popup(self, CelluloseIB_rectangle_output):
        lines = [line.strip() for line in CelluloseIB_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated cellulose-Iβ was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_rectangle_carboxylation_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##===========----sulfate cellulose-I Beta rectangle data windows output
    def CelluloseIB_exp_rectangle_sulfate_Topology(self): 
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_rectangle_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_rectangle_sulfate_Popup(self, CelluloseIB_rectangle_output):
        lines = [line.strip() for line in CelluloseIB_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iβ was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_rectangle_sulfate_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)




##cellulose-I Beta ===========parallelogram============= experimental data no modification
    def CelluloseIB_exp_parallelogram_nochemical_Topology(self):   
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "parallelogram"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelluloseIB_exp_parallelogram_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_parallelogram_nochemical_Popup(self, message):
        message = f"Native cellulose-Iβ was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_parallelogram_nochemical_TopologyPopup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



## =======carboxylation=========== cellulose-I Beta ===========parallelogram=========== experimental data windows output
    def CelluloseIB_exp_parallelogram_carboxylation_Topology(self):  
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "parallelogram"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_parallelogram_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_parallelogram_carboxylation_Popup(self, CelluloseIB_parallelogram_output):
        lines = [line.strip() for line in CelluloseIB_parallelogram_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated cellulose-Iβ was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_parallelogram_carboxylation_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##========sulfate====== cellulose-I Beta =========parallelogram========== data windows output
    def CelluloseIB_exp_parallelogram_sulfate_Topology(self):   
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelluloseIB_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-I-beta"
        folder_name_k = "parallelogram"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.CelluloseIB_exp_parallelogram_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate cellulose-Iβ Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate cellulose-Iβ Topology Generation Failed")

    def CelluloseIB_exp_parallelogram_sulfate_Popup(self, CelluloseIB_parallelogram_output):
        lines = [line.strip() for line in CelluloseIB_parallelogram_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate cellulose-Iβ was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def CelluloseIB_exp_parallelogram_sulfate_Topology_Popup(self):
        CelluloseIB_ForceFieldType = self.CelluloseIB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelluloseIB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Cellulose-Iβ Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)




###-------cellulose-I beta----------------







#----------------------cellulose-II------------------------------
    def populateCelluloseIITab(self, tab):
        CelluloseII_mainLayout = QVBoxLayout(tab)  # Primary layout to arrange content vertically
        CelluloseII_topLayout = QHBoxLayout()  # Use horizontal layout for top-aligned items
        CelluloseII_topLayout.setAlignment(Qt.AlignTop | Qt.AlignLeft)  # Align content to the top left

        CelluloseII_font = QFont("Arial", 13)
    
        # Label for the dropdown
        CelluloseII_label = QLabel("Please select the crystal structure to build Cellulose-II crystallite:")
        CelluloseII_label.setFont(CelluloseII_font)
        CelluloseII_topLayout.addWidget(CelluloseII_label)  # Add label to the horizontal layout
        CelluloseII_comboBox = QComboBox()
        CelluloseII_comboBox.setFont(CelluloseII_font)
        CelluloseII_comboBox.addItem("Select here")  
        CelluloseII_comboBox.addItem("Mercerized Cellulose-II")
        #CelluloseII_comboBox.addItem("Cellulose-II")
        CelluloseII_comboBox.currentIndexChanged.connect(self.updateCelluloseIIOptions)
        CelluloseII_comboBox.setMinimumSize(QSize(240, 30))  # Set minimum size
        CelluloseII_comboBox.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        CelluloseII_comboBox.setMaxVisibleItems(10)
        CelluloseII_topLayout.addWidget(CelluloseII_comboBox)  # Add combo box to the horizontal layout
        CelluloseII_mainLayout.addLayout(CelluloseII_topLayout) 

        self.CelluloseII_StackedWidget = QStackedWidget()
        self.CelluloseII_StackedWidget.addWidget(QWidget())  
        self.setupMerCelluloseIIOptions()  # Setup options for Mercerized CelluloseII
        #self.setupCelluloseIIOptions()    ##other options in the future  
        CelluloseII_mainLayout.addWidget(self.CelluloseII_StackedWidget)
#
#
    def updateCelluloseIIOptions(self, index):
        #print("Selected index in CelluloseI ComboBox:", index)
        if index == 0:
            self.CelluloseII_StackedWidget.setVisible(False)
        elif index == 1:
            self.CelluloseII_StackedWidget.setCurrentIndex(1)
            self.CelluloseII_StackedWidget.setVisible(True)
        elif index == 2:
            self.CelluloseII_StackedWidget.setCurrentIndex(2)
            self.CelluloseII_StackedWidget.setVisible(True)
#
#
#
###-------Mercerized cellulose-II----------------
    def setupMerCelluloseIIOptions(self):
        self.MerCelluloseIIOptions = QWidget()
        self.CelluloseII_StackedWidget.addWidget(self.MerCelluloseIIOptions)
        MerCelluloseII_layout = QVBoxLayout(self.MerCelluloseIIOptions)
        MerCelluloseII_layout.setAlignment(Qt.AlignTop)
        MerCelluloseII_Font = QFont("Arial", 13)

        # Radio buttons setup
        self.MerCelluloseII_radioGroup = QGroupBox("Parameter Type")
        self.MerCelluloseII_radioGroup.setAlignment(Qt.AlignTop)
        MerCelluloseII_radioLayout = QHBoxLayout()
        self.MerCelluloseII_Experimental = QRadioButton("Crystallographic Parameters from Neutron Diffraction Experiments")
        self.MerCelluloseII_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")
        self.MerCelluloseII_Experimental.setFont(MerCelluloseII_Font)
        self.MerCelluloseII_UserDefined.setFont(MerCelluloseII_Font)
        MerCelluloseII_radioLayout.addWidget(self.MerCelluloseII_Experimental)
        MerCelluloseII_radioLayout.addWidget(self.MerCelluloseII_UserDefined)
        MerCelluloseII_layout.addLayout(MerCelluloseII_radioLayout)

        # Combo box setup
        self.MerCelluloseII_ComboBox = QComboBox(self.MerCelluloseIIOptions)
        self.MerCelluloseII_ComboBox.addItem("Please select the crystallite shape")
        self.MerCelluloseII_ComboBox.addItems(["Parallelogram cross-section shape"])  ####add more options in the future for more cross-section selections
        self.MerCelluloseII_ComboBox.setVisible(False)
        MerCelluloseII_layout.addWidget(self.MerCelluloseII_ComboBox)

        # Connecting radio buttons to toggle visibility
        self.MerCelluloseII_Experimental.toggled.connect(self.MerCelluloseII_Visibility)
        self.MerCelluloseII_UserDefined.toggled.connect(self.MerCelluloseII_Visibility)
        self.MerCelluloseII_ComboBox.currentIndexChanged.connect(self.MerCelluloseII_updateParametersDisplay)

        # Parameter display setup
        self.MerCelluloseII_parametersGroup = QGroupBox("Crystallographic parameters")
        MerCelluloseII_parametersLayout = QVBoxLayout()  
        self.MerCelluloseII_parametersGroup.setLayout(MerCelluloseII_parametersLayout)
        self.MerCelluloseII_parametersGroup.setVisible(False)
        MerCelluloseII_layout.addWidget(self.MerCelluloseII_parametersGroup)
        self.MerCelluloseII_initParameterWidgets(MerCelluloseII_Font)

        ##demonstration for MerCelluloseII cross-sction and building structure
        self.MerCelluloseII_imageLabel = QLabel(self)
        self.MerCelluloseII_imageLabel.setFixedSize(1000, 250) 
        self.MerCelluloseII_imageLabel.setAlignment(Qt.AlignCenter)
        self.MerCelluloseII_imageLabel.setScaledContents(True)
        MerCelluloseII_layout.addWidget(self.MerCelluloseII_imageLabel)
        self.MerCelluloseII_imageLabel.clear()
        MerCelluloseII_layout.addWidget(self.MerCelluloseII_imageLabel)
        MerCelluloseII_layout.setAlignment(self.MerCelluloseII_imageLabel, Qt.AlignCenter)  
        self.MerCelluloseII_ComboBox.currentIndexChanged.connect(self.MerCelluloseII_updateImageDisplay)


        ###citation for MerCelluloseII  crystallographic parameter
        self.MerCelluloseII_citationLabel = QLabel("Crystallographic parameter reference: Paul et al. Biomacromolecules 2001, 2, 2, 410–416.")
        self.MerCelluloseII_citationLabel.setWordWrap(True)
        MerCelluloseII_citation_font = self.MerCelluloseII_citationLabel.font()
        MerCelluloseII_citation_font.setPointSize(6) 
        self.MerCelluloseII_citationLabel.setFont(MerCelluloseII_citation_font)
        MerCelluloseII_layout.addWidget(self.MerCelluloseII_citationLabel)
        self.MerCelluloseII_citationLabel.hide()

        # Connect combo box selection changes to update display
        self.MerCelluloseII_ComboBox.currentIndexChanged.connect(self.MerCelluloseII_updateParametersDisplay)

        # Invoke button setup, initially hidden
        self.MerCelluloseII_invokeButton = QPushButton("Invoke Script")
        self.MerCelluloseII_invokeButton.setVisible(False)
        self.MerCelluloseII_invokeButton.clicked.connect(self.MerCelluloseII_invokeScript)
        MerCelluloseII_layout.addWidget(self.MerCelluloseII_invokeButton)



    def MerCelluloseII_initParameterWidgets(self, font):
        # Create two horizontal layouts
        self.MerCelluloseII_paramLine1 = QHBoxLayout()
        self.MerCelluloseII_paramLine2 = QHBoxLayout()
        self.MerCelluloseII_paramLine3 = QHBoxLayout()

        # Initialize QLineEdit objects for parameters and repeat units
        self.MerCelluloseII_aParam = QLineEdit()
        self.MerCelluloseII_bParam = QLineEdit()
        self.MerCelluloseII_cParam = QLineEdit()
        self.MerCelluloseII_gammaParam = QLineEdit()
        self.MerCelluloseII_aRepeatUnits = QLineEdit()
        self.MerCelluloseII_bRepeatUnits = QLineEdit()
        self.MerCelluloseII_cRepeatUnits = QLineEdit()


        self.MerCelluloseII_width = QLineEdit()
        self.MerCelluloseII_height = QLineEdit()

        # Add widgets to first line layout
        self.MerCelluloseII_setupParameterWidget("a (Å)", self.MerCelluloseII_aParam, True, "", self.MerCelluloseII_paramLine1, font)
        self.MerCelluloseII_setupParameterWidget("b (Å)", self.MerCelluloseII_bParam, True, "", self.MerCelluloseII_paramLine1, font)
        self.MerCelluloseII_setupParameterWidget("c (Å)", self.MerCelluloseII_cParam, True, "", self.MerCelluloseII_paramLine1, font)
        self.MerCelluloseII_setupParameterWidget("gamma angle γ (°)", self.MerCelluloseII_gammaParam, True, "", self.MerCelluloseII_paramLine1, font)



        self.MerCelluloseII_setupParameterWidget("Cross-section width (Å)", self.MerCelluloseII_width, True, "", self.MerCelluloseII_paramLine2, font)
        self.MerCelluloseII_setupParameterWidget("Cross-section height (Å)", self.MerCelluloseII_height, True, "", self.MerCelluloseII_paramLine2, font)

        # Add widgets to second line layout
        self.MerCelluloseII_setupParameterWidget("a repetition", self.MerCelluloseII_aRepeatUnits, True, "", self.MerCelluloseII_paramLine3, font)
        self.MerCelluloseII_setupParameterWidget("b repetition", self.MerCelluloseII_bRepeatUnits, True, "", self.MerCelluloseII_paramLine3, font)
        self.MerCelluloseII_setupParameterWidget("c repetition", self.MerCelluloseII_cRepeatUnits, False, "", self.MerCelluloseII_paramLine3, font)

        # Add both lines to the group box layout
        self.MerCelluloseII_parametersGroup.layout().addLayout(self.MerCelluloseII_paramLine1)
        self.MerCelluloseII_parametersGroup.layout().addLayout(self.MerCelluloseII_paramLine2)
        self.MerCelluloseII_parametersGroup.layout().addLayout(self.MerCelluloseII_paramLine3)

    def MerCelluloseII_updateImageDisplay(self, index):
        MerCelluloseII_shape = self.MerCelluloseII_ComboBox.currentText()
        if MerCelluloseII_shape == "Parallelogram cross-section shape":
            MerCelluloseII_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'cellulose', 'cellulose-II', 'cellulose-II.png') )
        else:
            self.MerCelluloseII_imageLabel.clear()
            return
        self.MerCelluloseII_imageLabel.setPixmap(MerCelluloseII_pixmap)
        self.MerCelluloseII_imageLabel.show()


    def MerCelluloseII_setupParameterWidget(self, MerCelluloseII_label, MerCelluloseII_widget, readOnly, MerCelluloseII_defaultValue, MerCelluloseII_layout, MerCelluloseII_font):
        MerCelluloseII_labelWidget = QLabel(MerCelluloseII_label)
        MerCelluloseII_labelWidget.setFont(MerCelluloseII_font)
        MerCelluloseII_widget.setFont(MerCelluloseII_font)
        MerCelluloseII_widget.setReadOnly(readOnly)
        MerCelluloseII_widget.setText(MerCelluloseII_defaultValue)
        if readOnly:
            MerCelluloseII_widget.setStyleSheet("background-color: lightgrey;")
        MerCelluloseII_layout.addWidget(MerCelluloseII_labelWidget)
        MerCelluloseII_layout.addWidget(MerCelluloseII_widget)


    def MerCelluloseII_updateReadOnlyState(self, MerCelluloseII_widget, readOnly):
        MerCelluloseII_widget.setReadOnly(readOnly)
        if readOnly:
            MerCelluloseII_widget.setStyleSheet("background-color: #D3D3D3;")  # Light grey background
            MerCelluloseII_widget.setEnabled(False)  # Optionally disable the widget to make it clear it's not interactive
        else:
            MerCelluloseII_widget.setStyleSheet("background-color: white;")
            MerCelluloseII_widget.setEnabled(True)  # Re-enable the widget for user interaction

    def MerCelluloseII_Visibility(self, checked):
        self.MerCelluloseII_ComboBox.setVisible(checked)
        if checked:
            self.MerCelluloseII_ComboBox.setCurrentIndex(0) 
            self.MerCelluloseII_parametersGroup.setVisible(False)
        else:
            self.MerCelluloseII_ComboBox.setVisible(False)
            self.MerCelluloseII_parametersGroup.setVisible(False)

    def MerCelluloseII_updateParametersDisplay(self):
        if self.MerCelluloseII_ComboBox.currentIndex() == 0:
            self.MerCelluloseII_parametersGroup.setVisible(False)
        else:
            self.MerCelluloseII_parametersGroup.setVisible(True)
            model = self.MerCelluloseII_ComboBox.currentText()
            if self.MerCelluloseII_Experimental.isChecked() :
                self.MerCelluloseII_citationLabel.show()
                if model in ["Parallelogram cross-section shape"]:
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    
                    self.MerCelluloseII_setupModificationsSection(self.MerCelluloseII_parametersGroup.layout(), QFont("Arial", 13))


                    self.MerCelluloseII_aRepeatUnits.clear()
                    self.MerCelluloseII_bRepeatUnits.clear()
                    self.MerCelluloseII_cRepeatUnits.clear()       
                    self.MerCelluloseII_width.clear()
                    self.MerCelluloseII_height.clear()      
  
                    # Set fields with preset values and adjustments for editability
                    self.MerCelluloseII_aParam.setText("8.10")
                    self.MerCelluloseII_bParam.setText("9.03")
                    self.MerCelluloseII_cParam.setText("10.31")
                    self.MerCelluloseII_gammaParam.setText("117.10") 
                    self.MerCelluloseII_cRepeatUnits.setStyleSheet("background-color: white;")  
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_aParam, True)    
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_bParam, True)             
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_cParam, True)             
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_gammaParam, True)      
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_bRepeatUnits, False)    
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_aRepeatUnits, False)             
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_width, True)             
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_height, True)   
                    self.MerCelluloseII_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.MerCelluloseII_height.setStyleSheet("background-color: #D3D3D3;")     
    


            elif self.MerCelluloseII_UserDefined.isChecked() :
                self.MerCelluloseII_citationLabel.hide()
                if model in ["Parallelogram cross-section shape"]:
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models

                    self.MerCelluloseII_setupModificationsSection(self.MerCelluloseII_parametersGroup.layout(), QFont("Arial", 13))
                    self.MerCelluloseII_aParam.clear()
                    self.MerCelluloseII_bParam.clear()
                    self.MerCelluloseII_cParam.clear()
                    self.MerCelluloseII_gammaParam.clear()
                    self.MerCelluloseII_aRepeatUnits.clear()
                    self.MerCelluloseII_bRepeatUnits.clear()
                    self.MerCelluloseII_cRepeatUnits.clear()
                    self.MerCelluloseII_width.clear()
                    self.MerCelluloseII_height.clear()            
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_aParam, False)    
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_bParam, False)             
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_cParam, False)             
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_gammaParam, False)             
                    self.MerCelluloseII_cRepeatUnits.setStyleSheet("background-color: white;")     
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_bRepeatUnits, False)    
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_aRepeatUnits, False)             
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_width, True)             
                    self.MerCelluloseII_updateReadOnlyState(self.MerCelluloseII_height, True)   
                    self.MerCelluloseII_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.MerCelluloseII_height.setStyleSheet("background-color: #D3D3D3;")         
            else:
                # Hide modification options if not the specific model and type
                for i in reversed(range(self.MerCelluloseII_modificationsLayout.count())): 
                    self.MerCelluloseII_modificationsLayout.itemAt(i).widget().setParent(None)

    def MerCelluloseII_setupModificationsSection(self, MerCelluloseII_layout, MerCelluloseII_font):
        # Add a layout for modifications if it doesn't exist
        if not hasattr(self, 'MerCelluloseII_modificationsLayout'):
            self.MerCelluloseII_modificationsLayout = QHBoxLayout()
            self.MerCelluloseII_carboxylationRadio = QRadioButton("Carboxylation")
            self.MerCelluloseII_sulfateRadio = QRadioButton("Sulfate")
            self.MerCelluloseII_noModRadio = QRadioButton("No Modification")
            self.MerCelluloseII_sulfateRadio.setFont(MerCelluloseII_font)
            self.MerCelluloseII_carboxylationRadio.setFont(MerCelluloseII_font)
            self.MerCelluloseII_noModRadio.setFont(MerCelluloseII_font)
            self.MerCelluloseII_modificationsLayout.addWidget(self.MerCelluloseII_carboxylationRadio)
            self.MerCelluloseII_modificationsLayout.addWidget(self.MerCelluloseII_sulfateRadio)

            self.MerCelluloseII_modificationsLayout.addWidget(self.MerCelluloseII_noModRadio)
            MerCelluloseII_layout.addLayout(self.MerCelluloseII_modificationsLayout)

            # Setup Inputs and Connections
            self.MerCelluloseII_setupModificationInputs()
            MerCelluloseII_layout.addWidget(self.MerCelluloseII_modificationInputsWidget)
            self.MerCelluloseII_sulfateRadio.toggled.connect(lambda checked: self.MerCelluloseII_updateModificationInputs("Sulfate", checked))
            self.MerCelluloseII_carboxylationRadio.toggled.connect(lambda checked: self.MerCelluloseII_updateModificationInputs("Carboxylation", checked))
            self.MerCelluloseII_noModRadio.toggled.connect(lambda checked: self.MerCelluloseII_updateModificationInputs("None", checked))


            # Generate Structure Button
            MerCelluloseII_Font = QFont("Arial", 13)
            self.MerCelluloseII_invokeButton = QPushButton("Generate Structure")
            self.MerCelluloseII_invokeButton.setFont(MerCelluloseII_Font)
            self.MerCelluloseII_invokeButton.setVisible(False)  # Initially hidden
            self.MerCelluloseII_invokeButton.clicked.connect(self.MerCelluloseII_invokeScript)  # Connect to invoke script logic
            MerCelluloseII_layout.addWidget(self.MerCelluloseII_invokeButton)
            
            
    def MerCelluloseII_setupModificationInputs(self):
        self.MerCelluloseII_modificationInputsWidget = QWidget()
        MerCelluloseII_modification_mainLayout = QVBoxLayout(self.MerCelluloseII_modificationInputsWidget)
        MerCelluloseII_font = QFont("Arial", 13)
        MerCelluloseII_font_Sel = QFont("Arial", 12)

        MerCelluloseII_carboxylation_plane_layout = QHBoxLayout()
        self.MerCelluloseII_carboxylation_planeLabel = QLabel("Please select Mercerized Cellulose II plane for carboxylation modifications:")
        self.MerCelluloseII_carboxylation_planeLabel.setFont(MerCelluloseII_font)
        self.MerCelluloseII_carboxylation_planeComboBox = QComboBox()
        self.MerCelluloseII_carboxylation_planeComboBox.setFont(MerCelluloseII_font_Sel)
        self.MerCelluloseII_carboxylation_planeComboBox.addItems([ "Select here",
                                                                 "Single (010) plane",        
                                                                 "Two (010) planes", 
                                                                 "Single (100) plane",
                                                                 "Two (100) planes",
                                                                 "Single (010) and (100) planes",                                                      
                                                                 "Both (010) and (100) planes" ])
        MerCelluloseII_carboxylation_plane_layout.addWidget(self.MerCelluloseII_carboxylation_planeLabel)
        MerCelluloseII_carboxylation_plane_layout.addWidget(self.MerCelluloseII_carboxylation_planeComboBox)
        MerCelluloseII_modification_mainLayout.addLayout(MerCelluloseII_carboxylation_plane_layout)


        # Degree of sulfate input
        MerCelluloseII_sulfate_plane_layout = QHBoxLayout()
        self.MerCelluloseII_sulfate_planeLabel = QLabel("Please select Mercerized Cellulose II plane for sulfate modifications:")
        self.MerCelluloseII_sulfate_planeLabel.setFont(MerCelluloseII_font)
        self.MerCelluloseII_sulfate_planeComboBox = QComboBox()
        self.MerCelluloseII_sulfate_planeComboBox.setFont(MerCelluloseII_font_Sel)
        self.MerCelluloseII_sulfate_planeComboBox.addItems ([ "Select here",
                                                               "Single (010) plane",        
                                                               "Two (010) planes", 
                                                               "Single (100) plane",
                                                               "Two (100) planes",
                                                               "Single (010) and (100) planes",
                                                               "Both (010) and (100) planes" ])
        MerCelluloseII_sulfate_plane_layout.addWidget(self.MerCelluloseII_sulfate_planeLabel)
        MerCelluloseII_sulfate_plane_layout.addWidget(self.MerCelluloseII_sulfate_planeComboBox)
        MerCelluloseII_modification_mainLayout.addLayout(MerCelluloseII_sulfate_plane_layout)


        ##surface charge for sulfate
        #MerCelluloseII_sulfate_layout = QHBoxLayout()
        MerCelluloseII_sulfate_pH_layout = QHBoxLayout()
        self.MerCelluloseII_sulfate_Label = QLabel("Surface charge density (unit: mmol/g):")
        self.MerCelluloseII_sulfate_Label.setFont(MerCelluloseII_font)
        
        self.MerCelluloseII_sulfate_LineEdit = QLineEdit()
        self.MerCelluloseII_sulfate_LineEdit.setFont(MerCelluloseII_font)
        self.MerCelluloseII_sulfate_LineEdit.setFixedSize(QSize(200, 40))
        self.MerCelluloseII_sulfate_pHLabel = QLabel("pH level of cellulose-Iβ structure (>0 and <14):")
        self.MerCelluloseII_sulfate_pHLabel.setFont(MerCelluloseII_font)
        self.MerCelluloseII_sulfate_pHLineEdit = QLineEdit()
        self.MerCelluloseII_sulfate_pHLineEdit.setFont(MerCelluloseII_font)
        self.MerCelluloseII_sulfate_pHLineEdit.setFixedSize(QSize(200, 40))
        MerCelluloseII_sulfate_pH_layout.addWidget(self.MerCelluloseII_sulfate_Label)
        MerCelluloseII_sulfate_pH_layout.addWidget(self.MerCelluloseII_sulfate_LineEdit)
        MerCelluloseII_sulfate_pH_layout.addSpacing(100)  ##space between dda and pH
        MerCelluloseII_sulfate_pH_layout.addWidget(self.MerCelluloseII_sulfate_pHLabel)
        MerCelluloseII_sulfate_pH_layout.addWidget(self.MerCelluloseII_sulfate_pHLineEdit)
        MerCelluloseII_modification_mainLayout.addLayout(MerCelluloseII_sulfate_pH_layout)
        #MerCelluloseII_sulfate_layout.addWidget(self.MerCelluloseII_sulfate_Label)

        #MerCelluloseII_sulfate_layout.addWidget(self.MerCelluloseII_sulfate_LineEdit)
        #MerCelluloseII_modification_mainLayout.addLayout(MerCelluloseII_sulfate_layout)


        # Degree of carboxylation input
        MerCelluloseII_carboxylation_pH_layout = QHBoxLayout()
        self.MerCelluloseII_carboxylation_Label = QLabel("Surface charge density (unit: mmol/g):")
        self.MerCelluloseII_carboxylation_Label.setFont(MerCelluloseII_font)
        self.MerCelluloseII_carboxylation_LineEdit = QLineEdit()
        self.MerCelluloseII_carboxylation_LineEdit.setFont(MerCelluloseII_font)
        self.MerCelluloseII_carboxylation_LineEdit.setFixedSize(QSize(200, 40))
        self.MerCelluloseII_carboxylation_pHLabel = QLabel("pH level of cellulose-Iβ structure (>0 and <14):")
        self.MerCelluloseII_carboxylation_pHLabel.setFont(MerCelluloseII_font)
        self.MerCelluloseII_carboxylation_pHLineEdit = QLineEdit()
        self.MerCelluloseII_carboxylation_pHLineEdit.setFont(MerCelluloseII_font)
        self.MerCelluloseII_carboxylation_pHLineEdit.setFixedSize(QSize(200, 40))
        MerCelluloseII_carboxylation_pH_layout.addWidget(self.MerCelluloseII_carboxylation_Label)
        MerCelluloseII_carboxylation_pH_layout.addWidget(self.MerCelluloseII_carboxylation_LineEdit)
        MerCelluloseII_carboxylation_pH_layout.addSpacing(100)  ##space between dda and pH
        MerCelluloseII_carboxylation_pH_layout.addWidget(self.MerCelluloseII_carboxylation_pHLabel)
        MerCelluloseII_carboxylation_pH_layout.addWidget(self.MerCelluloseII_carboxylation_pHLineEdit)
        MerCelluloseII_modification_mainLayout.addLayout(MerCelluloseII_carboxylation_pH_layout)


        MerCelluloseII_ForceField_layout = QHBoxLayout()
        self.MerCelluloseII_ForceFieldTypeLabel = QLabel("Atomistic Simulation Force Field:")
        self.MerCelluloseII_ForceFieldTypeLabel.setFont(MerCelluloseII_font)
        self.MerCelluloseII_ForceFieldTypeselector = QComboBox()
        self.MerCelluloseII_ForceFieldTypeselector.setFont(MerCelluloseII_font)
        #self.MerCelluloseII_ForceFieldTypeLabel.setFixedSize(550, 60)  # Width of 200 pixels and height of 20 pixels
        self.MerCelluloseII_ForceFieldTypeselector.addItem("Please select the force field for atomistic simulations", True)
        self.MerCelluloseII_ForceFieldTypeselector.addItem("CHARMM36 Infinite Chain Model", False)
        self.MerCelluloseII_ForceFieldTypeselector.addItem("CHARMM36 Finite Chain Model", False)
        self.MerCelluloseII_ForceFieldTypeselector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.MerCelluloseII_ForceFieldTypeselector.addItem("GLYCAM06 Finite Chain Model", False)
        MerCelluloseII_ForceField_layout.addWidget(self.MerCelluloseII_ForceFieldTypeLabel)
        MerCelluloseII_ForceField_layout.addWidget(self.MerCelluloseII_ForceFieldTypeselector)
        MerCelluloseII_modification_mainLayout.addLayout(MerCelluloseII_ForceField_layout)

        self.MerCelluloseII_sulfate_planeLabel.setVisible(False)
        self.MerCelluloseII_sulfate_planeComboBox.setVisible(False)
        self.MerCelluloseII_carboxylation_planeLabel.setVisible(False)
        self.MerCelluloseII_carboxylation_planeComboBox.setVisible(False)

        self.MerCelluloseII_sulfate_Label.setVisible(False)
        self.MerCelluloseII_sulfate_LineEdit.setVisible(False)
        self.MerCelluloseII_sulfate_pHLabel.setVisible(False)
        self.MerCelluloseII_sulfate_pHLineEdit.setVisible(False)

        self.MerCelluloseII_carboxylation_Label.setVisible(False)
        self.MerCelluloseII_carboxylation_LineEdit.setVisible(False)
        self.MerCelluloseII_carboxylation_pHLabel.setVisible(False)
        self.MerCelluloseII_carboxylation_pHLineEdit.setVisible(False)


        self.MerCelluloseII_ForceFieldTypeLabel.setVisible(False)
        self.MerCelluloseII_ForceFieldTypeselector.setVisible(False)

        self.MerCelluloseII_sulfate_planeComboBox.currentIndexChanged.connect(
        lambda: self.MerCelluloseII_manageVisibilityAndStylesForsulfate(
            self.MerCelluloseII_sulfate_planeComboBox.currentText()
           )
        )
        self.MerCelluloseII_modificationInputsWidget.setLayout(MerCelluloseII_modification_mainLayout)

        self.MerCelluloseII_carboxylation_planeComboBox.currentIndexChanged.connect(
        lambda: self.MerCelluloseII_manageVisibilityAndStylesForCarboxylation(
            self.MerCelluloseII_carboxylation_planeComboBox.currentText()
           )
        )
        self.MerCelluloseII_modificationInputsWidget.setLayout(MerCelluloseII_modification_mainLayout)



    def MerCelluloseII_updateModificationInputs(self, MerCelluloseII_modificationType, checked):
        if checked:
            if  MerCelluloseII_modificationType == "Sulfate":
                MerCelluloseII_sulfate_plane_selection = self.MerCelluloseII_sulfate_planeComboBox.currentText()
                self.MerCelluloseII_manageVisibilityAndStylesForsulfate(MerCelluloseII_sulfate_plane_selection)
            
            elif MerCelluloseII_modificationType == "Carboxylation":
                MerCelluloseII_carboxylation_plane_selection = self.MerCelluloseII_carboxylation_planeComboBox.currentText()
                self.MerCelluloseII_manageVisibilityAndStylesForCarboxylation(MerCelluloseII_carboxylation_plane_selection)
            elif  MerCelluloseII_modificationType == "None":
                self.MerCelluloseII_sulfate_Label.setVisible(False)
                self.MerCelluloseII_sulfate_LineEdit.setVisible(False)
                self.MerCelluloseII_sulfate_pHLabel.setVisible(False)
                self.MerCelluloseII_sulfate_pHLineEdit.setVisible(False)
                
                self.MerCelluloseII_carboxylation_Label.setVisible(False)
                self.MerCelluloseII_carboxylation_LineEdit.setVisible(False)
                self.MerCelluloseII_carboxylation_pHLabel.setVisible(False)
                self.MerCelluloseII_carboxylation_pHLineEdit.setVisible(False)
                
                
                self.MerCelluloseII_sulfate_planeLabel.setVisible(False)
                self.MerCelluloseII_sulfate_planeComboBox.setVisible(False)
                self.MerCelluloseII_carboxylation_planeLabel.setVisible(False)
                self.MerCelluloseII_carboxylation_planeComboBox.setVisible(False)
    
                self.MerCelluloseII_ForceFieldTypeLabel.setVisible(True)
                self.MerCelluloseII_ForceFieldTypeselector.setVisible(True)
                self.MerCelluloseII_invokeButton.setVisible(True)  # Show "Generate Structure" button
        else:
            self.MerCelluloseII_sulfate_Label.setVisible(False)
            self.MerCelluloseII_sulfate_LineEdit.setVisible(False)
            self.MerCelluloseII_sulfate_pHLabel.setVisible(False)
            self.MerCelluloseII_sulfate_pHLineEdit.setVisible(False)
            
            self.MerCelluloseII_carboxylation_Label.setVisible(False)
            self.MerCelluloseII_carboxylation_LineEdit.setVisible(False)
             
            self.MerCelluloseII_carboxylation_pHLabel.setVisible(False)
            self.MerCelluloseII_carboxylation_pHLineEdit.setVisible(False)
            
            
            self.MerCelluloseII_sulfate_planeLabel.setVisible(False)
            self.MerCelluloseII_sulfate_planeComboBox.setVisible(False)
            self.MerCelluloseII_carboxylation_planeLabel.setVisible(False)
            self.MerCelluloseII_carboxylation_planeComboBox.setVisible(False)
    
    
            self.MerCelluloseII_ForceFieldTypeLabel.setVisible(False)
            self.MerCelluloseII_ForceFieldTypeselector.setVisible(False)
            self.MerCelluloseII_invokeButton.setVisible(False)  



    def MerCelluloseII_manageVisibilityAndStylesForsulfate(self, MerCelluloseII_sulfate_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.MerCelluloseII_sulfate_planeLabel.setVisible(True)
        self.MerCelluloseII_sulfate_planeComboBox.setVisible(True)

        self.MerCelluloseII_carboxylation_planeLabel.setVisible(False)
        self.MerCelluloseII_carboxylation_planeComboBox.setVisible(False)
        self.MerCelluloseII_sulfate_pHLineEdit.setReadOnly(True)
        self.MerCelluloseII_sulfate_pHLineEdit.setStyleSheet("background-color: #D3D3D3;")

        self.MerCelluloseII_sulfate_Label.setVisible(True)
        self.MerCelluloseII_sulfate_LineEdit.setVisible(True)
        self.MerCelluloseII_sulfate_pHLabel.setVisible(True)
        self.MerCelluloseII_sulfate_pHLineEdit.setVisible(True)

        self.MerCelluloseII_carboxylation_Label.setVisible(False)
        self.MerCelluloseII_carboxylation_LineEdit.setVisible(False)
        self.MerCelluloseII_carboxylation_pHLabel.setVisible(False)
        self.MerCelluloseII_carboxylation_pHLineEdit.setVisible(False)
        self.MerCelluloseII_ForceFieldTypeLabel.setVisible(True)
        self.MerCelluloseII_ForceFieldTypeselector.setVisible(True)
        self.MerCelluloseII_invokeButton.setVisible(True)
    
        if MerCelluloseII_sulfate_plane_selection in [ "Single (010) plane ",        
                                                       "Two (010) planes", 
                                                       "Single (100) plane,"
                                                       "Two (100) planes",
                                                       "Single (010) and (100) planes",                                                      
                                                       "Both (010) and (100) planes"] :
            self.MerCelluloseII_sulfate_LineEdit.setReadOnly(False)
            self.MerCelluloseII_sulfate_LineEdit.setStyleSheet("background-color: white;")


    def MerCelluloseII_manageVisibilityAndStylesForCarboxylation(self, MerCelluloseII_carboxylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.MerCelluloseII_sulfate_planeLabel.setVisible(False)
        self.MerCelluloseII_sulfate_planeComboBox.setVisible(False)
        self.MerCelluloseII_sulfate_pHLabel.setVisible(False)
        self.MerCelluloseII_sulfate_pHLineEdit.setVisible(False)
        self.MerCelluloseII_carboxylation_planeLabel.setVisible(True)
        self.MerCelluloseII_carboxylation_planeComboBox.setVisible(True)
        self.MerCelluloseII_sulfate_Label.setVisible(False)
        self.MerCelluloseII_sulfate_LineEdit.setVisible(False)
        self.MerCelluloseII_carboxylation_Label.setVisible(True)
        self.MerCelluloseII_carboxylation_LineEdit.setVisible(True)
        self.MerCelluloseII_carboxylation_pHLabel.setVisible(True)
        self.MerCelluloseII_carboxylation_pHLineEdit.setVisible(True)
        self.MerCelluloseII_ForceFieldTypeLabel.setVisible(True)
        self.MerCelluloseII_ForceFieldTypeselector.setVisible(True)
        self.MerCelluloseII_invokeButton.setVisible(True)
    
        if MerCelluloseII_carboxylation_plane_selection in  [  "Single (010) plane ",        
                                                               "Two (010) planes", 
                                                               "Single (100) plane,"
                                                               "Two (100) planes",
                                                               "Single (010) and (100) planes",
                                                               "Both (010) and (100) planes"] :
            self.MerCelluloseII_carboxylation_LineEdit.setReadOnly(False)
            self.MerCelluloseII_carboxylation_LineEdit.setStyleSheet("background-color: white;")
            self.MerCelluloseII_carboxylation_pHLineEdit.setReadOnly(False)
            self.MerCelluloseII_carboxylation_pHLineEdit.setStyleSheet("background-color: white;")

    def MerCelluloseII_invokeScript(self):
            model = self.MerCelluloseII_ComboBox.currentText()
            
            if self.MerCelluloseII_Experimental.isChecked():
                if  model == "Parallelogram cross-section shape":
                    if self.MerCelluloseII_noModRadio.isChecked():
                        MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                        MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                        MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                        if not MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                        MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            MerCelluloseII_script_name = "infinite_experiment.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_experiment.py"
                            MerCelluloseII_shape_name = "crystallite"
                            MerCelluloseII_folder_name = "charmm36"
                        elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            MerCelluloseII_script_name = "infinite_experiment.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_experiment.py"
                            MerCelluloseII_shape_name = "crystallite"
                            MerCelluloseII_folder_name = "glycam06"
                        try:
                            MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                            MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit]
                            MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if MerCelluloseII_result.returncode == 0:
                                MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                self.MerCelluloseII_exp_nochemical_Popup(MerCelluloseII_output)
                                self.MerCelluloseII_exp_nochemical_Topology()                    
                            else:
                                error_message = MerCelluloseII_result.stderr.strip()
                                QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    #####MerCelluloseII------------- Parallelogram -----------------------==== carboxylation====
                    elif self.MerCelluloseII_carboxylationRadio.isChecked():
                        MerCelluloseII_carboxylation_plane_selection = self.MerCelluloseII_carboxylation_planeComboBox.currentText()
                        if MerCelluloseII_carboxylation_plane_selection == "Both (010) and (100) planes":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()
                            if not MerCelluloseII_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_experiment.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_experiment.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_experiment.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_experiment.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif MerCelluloseII_carboxylation_plane_selection == "Single (010) plane":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()
                            if not MerCelluloseII_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif MerCelluloseII_carboxylation_plane_selection == "Two (010) planes":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()
                            if not MerCelluloseII_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010-2.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010-2.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-II Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif MerCelluloseII_carboxylation_plane_selection == "Single (100) plane":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()
                            if not MerCelluloseII_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif MerCelluloseII_carboxylation_plane_selection == "Two (100) planes":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()
                            if not MerCelluloseII_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100-2.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100-2.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif MerCelluloseII_carboxylation_plane_selection == "Single (010) and (100) planes":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()
                            if not MerCelluloseII_c_unit and carboxylation and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010_100.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010_100.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ######Mercerized CelluloseII------------- rectangle -----------------------==== sulfate====
                    elif self.MerCelluloseII_sulfateRadio.isChecked():
                        MerCelluloseII_sulfate_plane_selection = self.MerCelluloseII_sulfate_planeComboBox.currentText()
     
                        if MerCelluloseII_sulfate_plane_selection == "Single (010) plane":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  
                            if not MerCelluloseII_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    MerCelluloseII_script_name = "infinite_010.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010.py"
                            #    MerCelluloseII_shape_name = "crystallite"
                            #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif MerCelluloseII_sulfate_plane_selection == "Two (010) planes":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  

                            if not MerCelluloseII_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010-2.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                           #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    MerCelluloseII_script_name = "infinite_010-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010-2.py"
                           #    MerCelluloseII_shape_name = "crystallite"
                           #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif MerCelluloseII_sulfate_plane_selection == "Single (100) plane":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  

                            if not MerCelluloseII_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                           #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    MerCelluloseII_script_name = "infinite_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100.py"
                           #    MerCelluloseII_shape_name = "crystallite"
                           #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif MerCelluloseII_sulfate_plane_selection == "Two (100) planes":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  

                            if not MerCelluloseII_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100-2.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                           #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    MerCelluloseII_script_name = "infinite_100-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100-2.py"
                           #    MerCelluloseII_shape_name = "crystallite"
                           #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif MerCelluloseII_sulfate_plane_selection == "Single (010) and (100) planes":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  

                            if not MerCelluloseII_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010_100.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                           #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    MerCelluloseII_script_name = "infinite_010_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010_100.py"
                           #    MerCelluloseII_shape_name = "crystallite"
                           #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")   


                        elif MerCelluloseII_sulfate_plane_selection == "Both (010) and (100) planes":                                                                                                                                          
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  

                            if not MerCelluloseII_c_unit and sulfate and ph:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_experiment.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_experiment.py"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                           #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    MerCelluloseII_script_name = "infinite_experiment.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_experiment.py"
                           #    MerCelluloseII_shape_name = "crystallite"
                           #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]
                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")   
                                
                                                                                             
               
            elif self.MerCelluloseII_UserDefined.isChecked():
                if model == "Parallelogram cross-section shape":
                    if self.MerCelluloseII_noModRadio.isChecked():
                        MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                        MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                        MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                        MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                        MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                        MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                        MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()

                        if not MerCelluloseII_c_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                        MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            MerCelluloseII_script_name = "infinite_ud.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_ud.py"
                            MerCelluloseII_ud_folder = "user-defined"
                            MerCelluloseII_shape_name = "crystallite"
                            MerCelluloseII_folder_name = "charmm36"
                        elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            MerCelluloseII_script_name = "infinite_ud.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_ud.py"
                            MerCelluloseII_ud_folder = "user-defined"
                            MerCelluloseII_shape_name = "crystallite"
                            MerCelluloseII_folder_name = "glycam06"
                        try:
                            MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                            MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit]  
                            MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if MerCelluloseII_result.returncode == 0:
                                MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                self.MerCelluloseII_exp_nochemical_Popup(MerCelluloseII_output)
                                self.MerCelluloseII_exp_nochemical_Topology()                    
                            else:
                                error_message = MerCelluloseII_result.stderr.strip()
                                QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ##### ----user-defined ------ MerCelluloseII------------- Parallelogram -----------------------==== carboxylation====
                    elif self.MerCelluloseII_carboxylationRadio.isChecked():
                        MerCelluloseII_carboxylation_plane_selection = self.MerCelluloseII_carboxylation_planeComboBox.currentText()
                        if MerCelluloseII_carboxylation_plane_selection == "Both (010) and (100) planes":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()                            
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_experiment.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_experiment.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_experiment.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_experiment.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif MerCelluloseII_carboxylation_plane_selection == "Single (010) plane":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()                            
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif MerCelluloseII_carboxylation_plane_selection == "Two (010) planes":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()                            
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010-2.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010-2.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "cellulose-II Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif MerCelluloseII_carboxylation_plane_selection == "Single (100) plane":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()                            
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif MerCelluloseII_carboxylation_plane_selection == "Two (100) planes":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()                            
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100-2.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100-2.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif MerCelluloseII_carboxylation_plane_selection == "Single (010) and (100) planes":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            carboxylation = self.MerCelluloseII_carboxylation_LineEdit.text()  
                            ph = self.MerCelluloseII_carboxylation_pHLineEdit.text()                            
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010_100.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010_100.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "glycam06"
                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-carboxylation", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, carboxylation, ph]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_carboxylation_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ######Mercerized CelluloseII------------- rectangle -----------------------==== sulfate====
                    elif self.MerCelluloseII_sulfateRadio.isChecked():
                        MerCelluloseII_sulfate_plane_selection = self.MerCelluloseII_sulfate_planeComboBox.currentText()
     
                        if MerCelluloseII_sulfate_plane_selection == "Single (010) plane":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  
                                         
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    MerCelluloseII_script_name = "infinite_010.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010.py"
                            #    MerCelluloseII_ud_folder = "user-defined"
                            #    MerCelluloseII_shape_name = "crystallite"
                            #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif MerCelluloseII_sulfate_plane_selection == "Two (010) planes":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  
                                            
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010-2.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    MerCelluloseII_script_name = "infinite_010-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010-2.py"
                            #    MerCelluloseII_ud_folder = "user-defined"
                            #    MerCelluloseII_shape_name = "crystallite"
                            #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif MerCelluloseII_sulfate_plane_selection == "Single (100) plane":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  
                                   
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    MerCelluloseII_script_name = "infinite_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100.py"
                            #    MerCelluloseII_ud_folder = "user-defined"
                            #    MerCelluloseII_shape_name = "crystallite"
                            #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif MerCelluloseII_sulfate_plane_selection == "Two (100) planes":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  
                          
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_100-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100-2.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    MerCelluloseII_script_name = "infinite_100-2.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100-2.py"
                            #    MerCelluloseII_ud_folder = "user-defined"
                            #    MerCelluloseII_shape_name = "crystallite"
                            #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif MerCelluloseII_sulfate_plane_selection == "Single (010) and (100) planes":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  
                     
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_010_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_100_010_100.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    MerCelluloseII_script_name = "infinite_010_100.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_010_100.py"
                            #    MerCelluloseII_ud_folder = "user-defined"
                            #    MerCelluloseII_shape_name = "crystallite"
                            #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")   


                        elif MerCelluloseII_sulfate_plane_selection == "Both (010) and (100) planes":                                                                                                                                          
                            MerCelluloseII_a_parm = self.MerCelluloseII_aParam.text()
                            MerCelluloseII_b_parm = self.MerCelluloseII_bParam.text()
                            MerCelluloseII_c_parm = self.MerCelluloseII_cParam.text()       
                            MerCelluloseII_gamma =  self.MerCelluloseII_gammaParam.text()             
                            MerCelluloseII_a_unit = self.MerCelluloseII_aRepeatUnits.text()
                            MerCelluloseII_b_unit = self.MerCelluloseII_bRepeatUnits.text()
                            MerCelluloseII_c_unit = self.MerCelluloseII_cRepeatUnits.text()
                            sulfate = self.MerCelluloseII_sulfate_LineEdit.text()  
                           
                            if not MerCelluloseII_a_parm and MerCelluloseII_c_parm and MerCelluloseII_b_parm and MerCelluloseII_a_unit and MerCelluloseII_b_unit and MerCelluloseII_c_unit:
                                QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                                return
                            MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
                            MerCelluloseII_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if MerCelluloseII_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                MerCelluloseII_script_name = "infinite_ud.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_ud.py"
                                MerCelluloseII_ud_folder = "user-defined"
                                MerCelluloseII_shape_name = "crystallite"
                                MerCelluloseII_folder_name = "charmm36"
                            #elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    MerCelluloseII_script_name = "infinite_ud.py" if "Infinite" in MerCelluloseII_ForceFieldType else "finite_ud.py"
                            #    MerCelluloseII_ud_folder = "user-defined"
                            #    MerCelluloseII_shape_name = "crystallite"
                            #    MerCelluloseII_folder_name = "glycam06"
                            elif MerCelluloseII_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, sulfate cellulose doesn't support Glycam06 Force Field.")

                            try:
                                MerCelluloseII_script_path = os.path.join(MerCelluloseII_base_dir, "function", "cellulose-II-sulfate", MerCelluloseII_ud_folder, MerCelluloseII_shape_name, MerCelluloseII_folder_name, MerCelluloseII_script_name)
                                MerCelluloseII_command = ["python", MerCelluloseII_script_path, MerCelluloseII_a_parm, MerCelluloseII_b_parm, MerCelluloseII_c_parm, MerCelluloseII_gamma, MerCelluloseII_a_unit, MerCelluloseII_b_unit, MerCelluloseII_c_unit, sulfate]

                                MerCelluloseII_result = subprocess.run(MerCelluloseII_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if MerCelluloseII_result.returncode == 0:
                                    MerCelluloseII_output = MerCelluloseII_result.stdout.strip()
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Popup(MerCelluloseII_output)
                                    self.MerCelluloseII_exp_parallelogram_sulfate_Topology()                 
                                else:
                                    error_message = MerCelluloseII_result.stderr.strip()
                                    QMessageBox.critical(self, "Mercerized CelluloseII Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.warning(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")   
                                
##Mercellulose-II experimental data no modification
    def MerCelluloseII_exp_nochemical_Topology(self):  
        MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-II_icm_topgen.py" if "Infinite" in MerCelluloseII_ForceFieldType else "cellulose-II_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in MerCelluloseII_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-II"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.MerCelluloseII_exp_nochemical_TopologyPopup()
        else:
            QMessageBox.warning(self, "Mercerized Cellulose II  Topology Generation Failed")

    def MerCelluloseII_exp_nochemical_Popup(self, message):
        message = f"Mercerized Cellulose II was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def MerCelluloseII_exp_nochemical_TopologyPopup(self):
        MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in MerCelluloseII_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Mercerized Cellulose II Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


## =======carboxylation=========== MerCelluloseII ===========parallelogram=========== experimental data windows output
    def MerCelluloseII_exp_parallelogram_carboxylation_Topology(self):  
        MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-II_icm_topgen.py" if "Infinite" in MerCelluloseII_ForceFieldType else "cellulose-II_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in MerCelluloseII_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-II"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.MerCelluloseII_exp_parallelogram_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated Mercerized CelluloseII Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated Mercerized CelluloseII Topology Generation Failed")

    def MerCelluloseII_exp_parallelogram_carboxylation_Popup(self, MerCelluloseII_parallelogram_output):
        lines = [line.strip() for line in MerCelluloseII_parallelogram_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated Mercerized CelluloseII was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def MerCelluloseII_exp_parallelogram_carboxylation_Topology_Popup(self):
        MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in MerCelluloseII_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated Mercerized CelluloseII Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##========sulfate====== MerCelluloseII =========parallelogram========== data windows output
    def MerCelluloseII_exp_parallelogram_sulfate_Topology(self):   
        MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-II_icm_topgen.py" if "Infinite" in MerCelluloseII_ForceFieldType else "cellulose-II_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in MerCelluloseII_ForceFieldType else "charmm36"
        folder_name_j = "cellulose-II"
        folder_name_k = "crystallite"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.MerCelluloseII_exp_parallelogram_sulfate_Topology_Popup()
            else:
                QMessageBox.warning(self, "Sulfate Mercerized CelluloseII Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Sulfate Mercerized CelluloseII Topology Generation Failed")

    def MerCelluloseII_exp_parallelogram_sulfate_Popup(self, MerCelluloseII_parallelogram_output):
        lines = [line.strip() for line in MerCelluloseII_parallelogram_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        sulfate_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        sulfate_degree = float(parts[1].split(':')[1].strip())  # Correct 
        sulfate_formatted = "{:.2f}".format(sulfate_in_charge_density)
        sulfate_degree_formatted = "{:.2f}".format(sulfate_degree)
        message = f"Sulfate Mercerized CelluloseII was Generated Successfully!\nActual charge density: {sulfate_formatted} mmol/g \nActual sulfate degree: {sulfate_degree_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def MerCelluloseII_exp_parallelogram_sulfate_Topology_Popup(self):
        MerCelluloseII_ForceFieldType = self.MerCelluloseII_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in MerCelluloseII_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Sulfate Mercerized CelluloseII Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)

#----------------------cellulose-II------------------------------
  
############################################################cellulose_building#########################################################





#############################################################chitin_building##########################################################
    def populateChitinSubTabs(self):
        chitosanTab = QWidget()
        alphaChitinTab = QWidget()
        betaChitinTab = QWidget()
        self.populateChitosanTab(chitosanTab)
        self.populateAlphaChitinTab(alphaChitinTab)
        self.populateBetaChitinTab(betaChitinTab)


        #chitin_font = QFont("Arial", 8)
        self.chitinTab.addTab(chitosanTab, "Chitosan Builder")
        self.chitinTab.addTab(alphaChitinTab, "α-Chitin Builder")
        self.chitinTab.addTab(betaChitinTab, "β-Chitin  Builder")

        #self.chitinTab.tabBar().setFont(chitin_font)

        self.chitinTab.setStyle(QStyleFactory.create('Fusion'))
        self.chitinTab.tabBar().setExpanding(False)  # Disable automatic expanding
        self.updateTabWidths()  # Set initial widths
      


##------------------------------------------------------------------chitosan building-------------------------------------------------------
    def populateChitosanTab(self, tab):
        layout = QGridLayout(tab)
        layout.setVerticalSpacing(10)
        layout.setContentsMargins(10, 10, 10, 10)

        self.dpLineEdit = QLineEdit()
        self.unitLineEdit = QLineEdit()
        self.ddaLineEdit = QLineEdit()
        self.phLineEdit = QLineEdit()

        inputs = [
            ("Degree of Polymerization:", self.dpLineEdit),
            ("Unit Repeat Distance (Angstrom):", self.unitLineEdit),
            ("Deacetylation Degree (≥0 and <1):", self.ddaLineEdit),
            ("pH Level:", self.phLineEdit)
        ]
        
        chitosan_font = QFont("Arial", 13)
        modelTypeLabel = QLabel("Chain Model Type:")
        modelTypeLabel.setFont(chitosan_font)
        
        self.modelTypeSelector = QComboBox()
        self.modelTypeSelector.setFont(chitosan_font)
        self.modelTypeSelector.addItem(" ", True)
        self.modelTypeSelector.addItem("CHARMM36 Infinite Chain Model", False)
        self.modelTypeSelector.addItem("CHARMM36 Finite Chain Model", False)
        self.modelTypeSelector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.modelTypeSelector.addItem("GLYCAM06 Finite Chain Model", False)

        for index, (label_text, widget) in enumerate(inputs):
            label = QLabel(label_text)
            label.setFont(chitosan_font)
            widget.setFont(chitosan_font)
            layout.addWidget(label, index // 2, 2 * (index % 2), 1, 1, Qt.AlignTop)
            layout.addWidget(widget, index // 2, 2 * (index % 2) + 1, 15, 1, Qt.AlignTop)  #the last two number control inter-layer disatnce
 
        layout.addWidget(modelTypeLabel, 2, 0, 1, 1, Qt.AlignTop)
        layout.addWidget(self.modelTypeSelector, 2, 1, 1, 2, Qt.AlignTop)

        generateButton = QPushButton("Generate Structure")
        font_button = QFont()
        font_button.setPointSize(14)
        generateButton.setFont(font_button) 
        layout.addWidget(generateButton, 3, 0, 2, 5)
        generateButton.clicked.connect(self.chitosanGenerate)

    def chitosanGenerate(self):
        dp = self.dpLineEdit.text()
        unit_distance = self.unitLineEdit.text()
        dda = self.ddaLineEdit.text()
        ph = self.phLineEdit.text()
        modelType = self.modelTypeSelector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
    
        if modelType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
            script_name = "infinite-chain.py" if "Infinite" in modelType else "finite-chain.py"
            folder_name = "charmm36"
            script_path = os.path.join(base_dir, "function", "chitosan", folder_name, script_name)
            command = ["python", script_path, dp, unit_distance, dda, ph]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        #elif modelType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
        #    script_name = "infinite-chain.py" if "Infinite" in modelType else "finite-chain.py"
        #    folder_name = "glycam06"
        elif modelType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
            QMessageBox.warning(self, "Unsupported Operation", "Currently, chitosan doesn't support Glycam06 Force Field.")  
        else:
            QMessageBox.warning(self, "Configuration Error", "Model type is not configured properly.")
            return
    
        if result.returncode == 0:
            output = result.stdout.strip()
            self.chitosanStructurePopup(output)
            self.chitosanTopology() 
        else:
            QMessageBox.warning(self, "Generation Failed")
    
    def chitosanTopology(self):
        modelType = self.modelTypeSelector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "chitosan_ifc_topgen.py" if "Infinite" in modelType else "chitosan_fc_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in modelType else "charmm36"
        folder_name_j = "chitosan"
    
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
        if result.returncode == 0:
            self.chitosanTopologyPopup()
        else:
            QMessageBox.warning(self, "Topology Generation Failed")

    def chitosanStructurePopup(self, output):
        lines = [line.strip() for line in output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')

        dda = parts[0].split(':')[1].strip()
        ph = parts[1].split(':')[1].strip()
        units = parts[2].split(':')[1].strip()
        message = f"Chitosan chain was generated successfully!\nActual DDA: {dda}\nActual pH: {ph}\nDeprotonated units: {units}"
        QMessageBox.information(self, "Structure Build Result", message)   


    def chitosanTopologyPopup(self):
        modelType = self.modelTypeSelector.currentText()
        file_name = "glycam06" if "GLYCAM06" in modelType else "CHARMM36"
        message = f"{file_name} topology file was generated successfully."
        QMessageBox.information(self, "Topology Build Result", message)
        
    

##------------------------------------------------------------------chitosan building-------------------------------------------------------

##----------------------------------------------------------------alpha-chitin building-----------------------------------------------------
    def populateAlphaChitinTab(self, tab):
        Alpha_mainLayout = QVBoxLayout(tab)  # Primary layout to arrange content vertically
    
        # Top-left alignment for the container
        Alpha_topLayout = QHBoxLayout()  # Use horizontal layout for top-aligned items
        Alpha_topLayout.setAlignment(Qt.AlignTop | Qt.AlignLeft)  # Align content to the top left
   
        Alpha_font = QFont("Arial", 13)
    
        # Label for the dropdown
        Alpha_label = QLabel("Please select the crystal structure to build α-chitin crystallite:")
        Alpha_label.setFont(Alpha_font)
        Alpha_topLayout.addWidget(Alpha_label)  # Add label to the horizontal layout
        Alpha_comboBox = QComboBox()
        Alpha_comboBox.setFont(Alpha_font)
        Alpha_comboBox.addItem("Select here")  # Initial empty selection
        Alpha_comboBox.addItem("α-chitin-A")
        Alpha_comboBox.addItem("α-chitin-B")
        Alpha_comboBox.addItem("α-chitin-AB")
        Alpha_comboBox.currentIndexChanged.connect(self.updateAlphaChitinOptions)
        Alpha_topLayout.addWidget(Alpha_comboBox)  # Add combo box to the horizontal layout
    
        Alpha_mainLayout.addLayout(Alpha_topLayout)  # Add the top horizontal layout to the main vertical layout
    
        self.AlphaStackedWidget = QStackedWidget()
        self.AlphaStackedWidget.addWidget(QWidget())  # Add an empty widget for the "Select here" option
        self.setupAlphaAOptions()  # Setup options for α-chitin-A
        self.setupAlphaBOptions()  # Setup options for α-chitin-B
        self.setupAlphaABOptions()  # Setup options for α-chitin-B
        Alpha_mainLayout.addWidget(self.AlphaStackedWidget)  # Add the stacked widget to the main vertical layout

    def updateAlphaChitinOptions(self, index):
        #print("Selected index in Alpha ComboBox:", index)
        if index == 0:
            self.AlphaStackedWidget.setVisible(False)
        elif index == 1:
            self.AlphaStackedWidget.setCurrentIndex(1)
            self.AlphaStackedWidget.setVisible(True)
        elif index == 2:
            self.AlphaStackedWidget.setCurrentIndex(2)
            self.AlphaStackedWidget.setVisible(True)
        elif index == 3:
            self.AlphaStackedWidget.setCurrentIndex(3)
            self.AlphaStackedWidget.setVisible(True)


    ##########-------------------------Alpha-chitin-A
    def setupAlphaAOptions(self):
        self.AlphaAOptions = QWidget()
        self.AlphaStackedWidget.addWidget(self.AlphaAOptions) 
        AlphaA_layout = QVBoxLayout(self.AlphaAOptions)
        AlphaA_layout.setAlignment(Qt.AlignTop)
        AlphaA_Font = QFont("Arial", 13)

        # Radio buttons setup
        self.AlphaA_radioGroup = QGroupBox("Parameter Type")
        self.AlphaA_radioGroup.setAlignment(Qt.AlignTop)
        AlphaA_radioLayout = QHBoxLayout()
        self.AlphaA_Experimental = QRadioButton("Crystallographic Parameters from X-Ray Diffraction Experiments")
        self.AlphaA_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")
        self.AlphaA_Experimental.setFont(AlphaA_Font)
        self.AlphaA_UserDefined.setFont(AlphaA_Font)
        AlphaA_radioLayout.addWidget(self.AlphaA_Experimental)
        AlphaA_radioLayout.addWidget(self.AlphaA_UserDefined)
        AlphaA_layout.addLayout(AlphaA_radioLayout)

        # Combo box setup
        self.AlphaA_ComboBox = QComboBox(self.AlphaAOptions)
        self.AlphaA_ComboBox.addItem("Please select the crystallite shape")
        self.AlphaA_ComboBox.addItems(["Rectangle cross-section shape", "Hexagon cross-section shape"])
        self.AlphaA_ComboBox.setVisible(False)
        AlphaA_layout.addWidget(self.AlphaA_ComboBox)

        # Connecting radio buttons to toggle visibility
        self.AlphaA_Experimental.toggled.connect(self.AlphaA_Visibility)
        self.AlphaA_UserDefined.toggled.connect(self.AlphaA_Visibility)
        self.AlphaA_ComboBox.currentIndexChanged.connect(self.AlphaA_updateParametersDisplay)

        # Parameter display setup
        self.AlphaA_parametersGroup = QGroupBox("Crystallographic parameters")
        AlphaA_parametersLayout = QVBoxLayout()  
        self.AlphaA_parametersGroup.setLayout(AlphaA_parametersLayout)
        self.AlphaA_parametersGroup.setVisible(False)
        AlphaA_layout.addWidget(self.AlphaA_parametersGroup)

        self.AlphaA_initParameterWidgets(AlphaA_Font)
        
        ##demonstration for alpha-chitin cross-sction and building structure
        self.AlphaA_imageLabel = QLabel(self)
        self.AlphaA_imageLabel.setFixedSize(1000, 250) 
        self.AlphaA_imageLabel.setAlignment(Qt.AlignCenter)
        self.AlphaA_imageLabel.setScaledContents(True)
        AlphaA_layout.addWidget(self.AlphaA_imageLabel)
        self.AlphaA_imageLabel.clear()
        AlphaA_layout.addWidget(self.AlphaA_imageLabel)
        AlphaA_layout.setAlignment(self.AlphaA_imageLabel, Qt.AlignCenter)  
        self.AlphaA_ComboBox.currentIndexChanged.connect(self.AlphaA_updateImageDisplay)

        ###citation for alpha-chitin crystallographic parameter

        self.AlphaA_citationLabel = QLabel("Crystallographic parameter reference: Sikorski et al. Biomacromolecules, vol. 10, no. 5, pp. 1100-1105.")
        self.AlphaA_citationLabel.setWordWrap(True)
        AlphaA_citation_font = self.AlphaA_citationLabel.font()
        AlphaA_citation_font.setPointSize(6) 
        self.AlphaA_citationLabel.setFont(AlphaA_citation_font)
        AlphaA_layout.addWidget(self.AlphaA_citationLabel)
        self.AlphaA_citationLabel.hide()

        # Connect combo box selection changes to update display
        self.AlphaA_ComboBox.currentIndexChanged.connect(self.AlphaA_updateParametersDisplay)

        # Invoke button setup, initially hidden
        self.AlphaA_invokeButton = QPushButton("Invoke Script")
        self.AlphaA_invokeButton.setVisible(False)
        self.AlphaA_invokeButton.clicked.connect(self.AlphaA_invokeScript)
        AlphaA_layout.addWidget(self.AlphaA_invokeButton)


    def AlphaA_updateImageDisplay(self, index):
        AlphaA_shape = self.AlphaA_ComboBox.currentText()
        if AlphaA_shape == "Rectangle cross-section shape":
            AlphaA_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'alpha-chitin', 'chitin-rectangle-shape.png') )
        elif AlphaA_shape == "Hexagon cross-section shape":
            AlphaA_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'alpha-chitin', 'chitin-hexagonal-shape.png') )
        else:
            self.AlphaA_imageLabel.clear()
            return
        self.AlphaA_imageLabel.setPixmap(AlphaA_pixmap)
        self.AlphaA_imageLabel.show()

 
    def AlphaA_initParameterWidgets(self, font):
        # Create two horizontal layouts
        self.AlphaA_paramLine1 = QHBoxLayout()
        self.AlphaA_paramLine2 = QHBoxLayout()
        self.AlphaA_paramLine3 = QHBoxLayout()
        # Initialize QLineEdit objects for parameters and repeat units
        self.AlphaA_aParam = QLineEdit()
        self.AlphaA_bParam = QLineEdit()
        self.AlphaA_cParam = QLineEdit()
        self.AlphaA_aRepeatUnits = QLineEdit()
        self.AlphaA_bRepeatUnits = QLineEdit()
        self.AlphaA_cRepeatUnits = QLineEdit()
        
        self.AlphaA_width = QLineEdit()
        self.AlphaA_height = QLineEdit()
        # Add widgets to first line layout
        self.AlphaA_setupParameterWidget("a (Å)", self.AlphaA_aParam, True, "", self.AlphaA_paramLine1, font)
        self.AlphaA_setupParameterWidget("b (Å)", self.AlphaA_bParam, True, "", self.AlphaA_paramLine1, font)
        self.AlphaA_setupParameterWidget("c (Å)", self.AlphaA_cParam, True, "", self.AlphaA_paramLine1, font)

        self.AlphaA_setupParameterWidget("Cross-section width (Å)", self.AlphaA_width, True, "", self.AlphaA_paramLine2, font)
        self.AlphaA_setupParameterWidget("Cross-section height (Å)", self.AlphaA_height, True, "", self.AlphaA_paramLine2, font)

        self.AlphaA_setupParameterWidget("a repetition", self.AlphaA_aRepeatUnits, True, "", self.AlphaA_paramLine3, font)
        self.AlphaA_setupParameterWidget("b repetition", self.AlphaA_bRepeatUnits, True, "", self.AlphaA_paramLine3, font)
        self.AlphaA_setupParameterWidget("c repetition", self.AlphaA_cRepeatUnits, True, "", self.AlphaA_paramLine3, font)

        # Add both lines to the group box layout
        self.AlphaA_parametersGroup.layout().addLayout(self.AlphaA_paramLine1)
        self.AlphaA_parametersGroup.layout().addLayout(self.AlphaA_paramLine2)
        self.AlphaA_parametersGroup.layout().addLayout(self.AlphaA_paramLine3)

    def AlphaA_setupParameterWidget(self, AlphaA_label, AlphaA_widget, readOnly, AlphaA_defaultValue, AlphaA_layout, AlphaA_font):
        AlphaA_labelWidget = QLabel(AlphaA_label)
        AlphaA_labelWidget.setFont(AlphaA_font)
        AlphaA_widget.setFont(AlphaA_font)
        AlphaA_widget.setReadOnly(readOnly)
        AlphaA_widget.setText(AlphaA_defaultValue)
        if readOnly:
            AlphaA_widget.setStyleSheet("background-color: lightgrey;")
        AlphaA_layout.addWidget(AlphaA_labelWidget)
        AlphaA_layout.addWidget(AlphaA_widget)
    

    def AlphaA_updateReadOnlyState(self, AlphaA_widget, readOnly):
        AlphaA_widget.setReadOnly(readOnly)
        if readOnly:
            AlphaA_widget.setStyleSheet("background-color: #D3D3D3;")  # Light grey background
            AlphaA_widget.setEnabled(False)  # Optionally disable the widget to make it clear it's not interactive
        else:
            AlphaA_widget.setStyleSheet("background-color: white;")
            AlphaA_widget.setEnabled(True)  # Re-enable the widget for user interaction

    def AlphaA_Visibility(self, checked):
        self.AlphaA_ComboBox.setVisible(checked)
        if checked:
            self.AlphaA_ComboBox.setCurrentIndex(0) 
            self.AlphaA_parametersGroup.setVisible(False)
        else:
            self.AlphaA_ComboBox.setVisible(False)
            self.AlphaA_parametersGroup.setVisible(False)

    def AlphaA_updateParametersDisplay(self):
        if self.AlphaA_ComboBox.currentIndex() == 0:
            self.AlphaA_parametersGroup.setVisible(False)
        else:
            self.AlphaA_parametersGroup.setVisible(True)
            model = self.AlphaA_ComboBox.currentText()
            
            if self.AlphaA_Experimental.isChecked() :
                self.AlphaA_citationLabel.show()
                if model == "Rectangle cross-section shape":
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.AlphaA_setupModificationsSection(self.AlphaA_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaA_aParam.clear()
                    self.AlphaA_bParam.clear()
                    self.AlphaA_cParam.clear()
                    #self.AlphaA_clear_model_image()
                    self.AlphaA_aRepeatUnits.clear()
                    self.AlphaA_bRepeatUnits.clear()
                    self.AlphaA_cRepeatUnits.clear()
                    self.AlphaA_width.clear()
                    self.AlphaA_height.clear()

                    self.AlphaA_aParam.setText("4.749")
                    self.AlphaA_bParam.setText("18.89")
                    self.AlphaA_cParam.setText("10.33")

                    self.AlphaA_updateReadOnlyState(self.AlphaA_aParam, True)    
                    self.AlphaA_updateReadOnlyState(self.AlphaA_bParam, True)             
                    self.AlphaA_updateReadOnlyState(self.AlphaA_cParam, True) 
                    self.AlphaA_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_cParam.setStyleSheet("background-color: #D3D3D3;")  

                    self.AlphaA_updateReadOnlyState(self.AlphaA_width, True)             
                    self.AlphaA_updateReadOnlyState(self.AlphaA_height, True)   
                    self.AlphaA_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.AlphaA_updateReadOnlyState(self.AlphaA_bRepeatUnits, False)     
                    self.AlphaA_updateReadOnlyState(self.AlphaA_aRepeatUnits, False)   
                    self.AlphaA_updateReadOnlyState(self.AlphaA_cRepeatUnits, False)    
                    self.AlphaA_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaA_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaA_cRepeatUnits.setStyleSheet("background-color: white;") 
                    

                elif model == "Hexagon cross-section shape":
                    self.AlphaA_setupModificationsSection(self.AlphaA_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaA_aParam.clear()
                    self.AlphaA_bParam.clear()
                    self.AlphaA_cParam.clear()
                    self.AlphaA_aRepeatUnits.clear()
                    self.AlphaA_bRepeatUnits.clear()
                    self.AlphaA_cRepeatUnits.clear()
                    self.AlphaA_width.clear()
                    self.AlphaA_height.clear()
                    self.AlphaA_aParam.setText("4.749")
                    self.AlphaA_bParam.setText("18.89")
                    self.AlphaA_cParam.setText("10.33")

                    self.AlphaA_updateReadOnlyState(self.AlphaA_aParam, True)    
                    self.AlphaA_updateReadOnlyState(self.AlphaA_bParam, True)             
                    self.AlphaA_updateReadOnlyState(self.AlphaA_cParam, True)  
                    self.AlphaA_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_cParam.setStyleSheet("background-color: #D3D3D3;")                     

                    self.AlphaA_updateReadOnlyState(self.AlphaA_width,  False)             
                    self.AlphaA_updateReadOnlyState(self.AlphaA_height, False)   
                    self.AlphaA_width.setStyleSheet("background-color:  white;") 
                    self.AlphaA_height.setStyleSheet("background-color: white;")     


                    self.AlphaA_updateReadOnlyState(self.AlphaA_bRepeatUnits, True)     
                    self.AlphaA_updateReadOnlyState(self.AlphaA_aRepeatUnits, True)   
                    self.AlphaA_updateReadOnlyState(self.AlphaA_cRepeatUnits, False)    
                    self.AlphaA_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_cRepeatUnits.setStyleSheet("background-color: white;") 
            
            elif self.AlphaA_UserDefined.isChecked() :

                self.AlphaA_citationLabel.hide()
                if model == "Rectangle cross-section shape":
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.AlphaA_setupModificationsSection(self.AlphaA_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaA_aParam.clear()
                    self.AlphaA_bParam.clear()
                    self.AlphaA_cParam.clear()
                    self.AlphaA_aRepeatUnits.clear()
                    self.AlphaA_bRepeatUnits.clear()
                    self.AlphaA_cRepeatUnits.clear()
                    self.AlphaA_width.clear()
                    self.AlphaA_height.clear()

                    self.AlphaA_updateReadOnlyState(self.AlphaA_aParam, False)    
                    self.AlphaA_updateReadOnlyState(self.AlphaA_bParam, False)             
                    self.AlphaA_updateReadOnlyState(self.AlphaA_cParam, False) 
                    self.AlphaA_aParam.setStyleSheet("background-color: white;") 
                    self.AlphaA_bParam.setStyleSheet("background-color: white;") 
                    self.AlphaA_cParam.setStyleSheet("background-color: white;")  

                    self.AlphaA_updateReadOnlyState(self.AlphaA_width, True)             
                    self.AlphaA_updateReadOnlyState(self.AlphaA_height, True)   
                    self.AlphaA_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.AlphaA_updateReadOnlyState(self.AlphaA_bRepeatUnits, False)     
                    self.AlphaA_updateReadOnlyState(self.AlphaA_aRepeatUnits, False)   
                    self.AlphaA_updateReadOnlyState(self.AlphaA_cRepeatUnits, False)    
                    self.AlphaA_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaA_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaA_cRepeatUnits.setStyleSheet("background-color: white;")   


                elif model == "Hexagon cross-section shape":
                    self.AlphaA_setupModificationsSection(self.AlphaA_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaA_aParam.clear()
                    self.AlphaA_bParam.clear()
                    self.AlphaA_cParam.clear()
                    self.AlphaA_aRepeatUnits.clear()
                    self.AlphaA_bRepeatUnits.clear()
                    self.AlphaA_cRepeatUnits.clear()
                    self.AlphaA_width.clear()
                    self.AlphaA_height.clear()

                    self.AlphaA_updateReadOnlyState(self.AlphaA_aParam, False)    
                    self.AlphaA_updateReadOnlyState(self.AlphaA_bParam, False)             
                    self.AlphaA_updateReadOnlyState(self.AlphaA_cParam, False)  
                    self.AlphaA_aParam.setStyleSheet("background-color: white;") 
                    self.AlphaA_bParam.setStyleSheet("background-color: white;") 
                    self.AlphaA_cParam.setStyleSheet("background-color: white;")                     

                    self.AlphaA_updateReadOnlyState(self.AlphaA_width,  False)             
                    self.AlphaA_updateReadOnlyState(self.AlphaA_height, False)   
                    self.AlphaA_width.setStyleSheet("background-color:  white;") 
                    self.AlphaA_height.setStyleSheet("background-color: white;")     


                    self.AlphaA_updateReadOnlyState(self.AlphaA_bRepeatUnits, True)     
                    self.AlphaA_updateReadOnlyState(self.AlphaA_aRepeatUnits, True)   
                    self.AlphaA_updateReadOnlyState(self.AlphaA_cRepeatUnits, False)    
                    self.AlphaA_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaA_cRepeatUnits.setStyleSheet("background-color: white;")       


            else:
                # Hide modification options if not the specific model and type
                for i in reversed(range(self.AlphaA_modificationsLayout.count())): 
                    self.AlphaA_modificationsLayout.itemAt(i).widget().setParent(None)

    def AlphaA_setupModificationsSection(self, AlphaA_layout, AlphaA_font):
        # Add a layout for modifications if it doesn't exist
        if not hasattr(self, 'AlphaA_modificationsLayout'):
            self.AlphaA_modificationsLayout = QHBoxLayout()
            self.AlphaA_deacetylationRadio = QRadioButton("Deacetylation")
            self.AlphaA_carboxylationRadio = QRadioButton("Carboxylation")
            self.AlphaA_noModRadio = QRadioButton("No Modification")
            self.AlphaA_deacetylationRadio.setFont(AlphaA_font)
            self.AlphaA_carboxylationRadio.setFont(AlphaA_font)
            self.AlphaA_noModRadio.setFont(AlphaA_font)
            self.AlphaA_modificationsLayout.addWidget(self.AlphaA_deacetylationRadio)
            self.AlphaA_modificationsLayout.addWidget(self.AlphaA_carboxylationRadio)
            self.AlphaA_modificationsLayout.addWidget(self.AlphaA_noModRadio)
            AlphaA_layout.addLayout(self.AlphaA_modificationsLayout)

            # Setup Inputs and Connections
            self.AlphaA_setupModificationInputs()
            AlphaA_layout.addWidget(self.AlphaA_modificationInputsWidget)
            self.AlphaA_deacetylationRadio.toggled.connect(lambda checked: self.AlphaA_updateModificationInputs("Deacetylation", checked))
            self.AlphaA_carboxylationRadio.toggled.connect(lambda checked: self.AlphaA_updateModificationInputs("Carboxylation", checked))
            self.AlphaA_noModRadio.toggled.connect(lambda checked: self.AlphaA_updateModificationInputs("None", checked))


            # Generate Structure Button
            AlphaA_Font = QFont("Arial", 13)
            self.AlphaA_invokeButton = QPushButton("Generate Structure")
            self.AlphaA_invokeButton.setFont(AlphaA_Font)
            self.AlphaA_invokeButton.setVisible(False)  # Initially hidden
            self.AlphaA_invokeButton.clicked.connect(self.AlphaA_invokeScript)  # Connect to invoke script logic
            AlphaA_layout.addWidget(self.AlphaA_invokeButton)
            
    def AlphaA_setupModificationInputs(self):
        self.AlphaA_modificationInputsWidget = QWidget()
        AlphaA_modification_mainLayout = QVBoxLayout(self.AlphaA_modificationInputsWidget)
        AlphaA_font = QFont("Arial", 13)
        AlphaA_font_Sel = QFont("Arial", 12)
  
        # Degree of deacetylation input
        AlphaA_deacetyl_plane_layout = QHBoxLayout()
        self.AlphaA_deacetyl_planeLabel = QLabel("Please select α-chitin plane for deacetylation modifications:")
        self.AlphaA_deacetyl_planeLabel.setFont(AlphaA_font)
        self.AlphaA_deacetyl_planeComboBox = QComboBox()
        self.AlphaA_deacetyl_planeComboBox.setFont(AlphaA_font_Sel)
        self.AlphaA_deacetyl_planeComboBox.addItems([ "Select here",
                                                      "Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", 
                                                      "Inside the α-chitin"])
        AlphaA_deacetyl_plane_layout.addWidget(self.AlphaA_deacetyl_planeLabel)
        AlphaA_deacetyl_plane_layout.addWidget(self.AlphaA_deacetyl_planeComboBox)
        AlphaA_modification_mainLayout.addLayout(AlphaA_deacetyl_plane_layout)
 

        # Degree of carboxylation input
        AlphaA_carboxylation_plane_layout = QHBoxLayout()
        self.AlphaA_carboxylation_planeLabel = QLabel("Please select α-chitin plane for carboxylation modifications:")
        self.AlphaA_carboxylation_planeLabel.setFont(AlphaA_font)
        self.AlphaA_carboxylation_planeComboBox = QComboBox()
        self.AlphaA_carboxylation_planeComboBox.setFont(AlphaA_font_Sel)
        self.AlphaA_carboxylation_planeComboBox.addItems([ "Select here",
                                                      "Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)"])
        AlphaA_carboxylation_plane_layout.addWidget(self.AlphaA_carboxylation_planeLabel)
        AlphaA_carboxylation_plane_layout.addWidget(self.AlphaA_carboxylation_planeComboBox)
        AlphaA_modification_mainLayout.addLayout(AlphaA_carboxylation_plane_layout)


        ##dda and pH for deacetylations
        AlphaA_dda_pH_layout = QHBoxLayout()
        self.AlphaA_dda_Label = QLabel("Degree of deacetylation (≥0 and <1):")
        #self.AlphaA_dda_Label.setFixedSize(QSize(500, 40))
        self.AlphaA_dda_Label.setFont(AlphaA_font)
        self.AlphaA_dda_LineEdit = QLineEdit()
        self.AlphaA_dda_LineEdit.setFont(AlphaA_font)
        self.AlphaA_dda_LineEdit.setFixedSize(QSize(200, 40))

        # pH input (specific to Deacetylation)
        self.AlphaA_dda_pHLabel = QLabel("pH level of α-chitin structure (>0 and <14):")
        self.AlphaA_dda_pHLabel.setFont(AlphaA_font)
        #self.AlphaA_dda_pHLabel.addSpacing(150)
        self.AlphaA_dda_pHLineEdit = QLineEdit()
        self.AlphaA_dda_pHLineEdit.setFont(AlphaA_font)
        self.AlphaA_dda_pHLineEdit.setFixedSize(QSize(200, 40))

        AlphaA_dda_pH_layout.addWidget(self.AlphaA_dda_Label)
        AlphaA_dda_pH_layout.addWidget(self.AlphaA_dda_LineEdit)
        AlphaA_dda_pH_layout.addSpacing(100)  ##space between dda and pH
        AlphaA_dda_pH_layout.addWidget(self.AlphaA_dda_pHLabel)
        AlphaA_dda_pH_layout.addWidget(self.AlphaA_dda_pHLineEdit)
        AlphaA_modification_mainLayout.addLayout(AlphaA_dda_pH_layout)

        # Degree of carboxylation input
        AlphaA_carboxylation_pH_layout = QHBoxLayout()
        self.AlphaA_carboxylation_Label = QLabel("Degree of carboxylation (unit: mmol/g):")
        self.AlphaA_carboxylation_Label.setFont(AlphaA_font)
        self.AlphaA_carboxylation_LineEdit = QLineEdit()
        self.AlphaA_carboxylation_LineEdit.setFont(AlphaA_font)
        self.AlphaA_carboxylation_LineEdit.setFixedSize(QSize(200, 40))
        self.AlphaA_carboxylation_pHLabel = QLabel("pH level of α-chitin structure (>0 and <14):")
        self.AlphaA_carboxylation_pHLabel.setFont(AlphaA_font)
        self.AlphaA_carboxylation_pHLineEdit = QLineEdit()
        self.AlphaA_carboxylation_pHLineEdit.setFont(AlphaA_font)
        self.AlphaA_carboxylation_pHLineEdit.setFixedSize(QSize(200, 40))
        AlphaA_carboxylation_pH_layout.addWidget(self.AlphaA_carboxylation_Label)
        AlphaA_carboxylation_pH_layout.addWidget(self.AlphaA_carboxylation_LineEdit)
        AlphaA_carboxylation_pH_layout.addSpacing(100)  ##space between dda and pH
        AlphaA_carboxylation_pH_layout.addWidget(self.AlphaA_carboxylation_pHLabel)
        AlphaA_carboxylation_pH_layout.addWidget(self.AlphaA_carboxylation_pHLineEdit)
        AlphaA_modification_mainLayout.addLayout(AlphaA_carboxylation_pH_layout)


        AlphaA_ForceField_layout = QHBoxLayout()
        self.AlphaA_ForceFieldTypeLabel = QLabel("Atomistic Simulation Force Field:")
        self.AlphaA_ForceFieldTypeLabel.setFont(AlphaA_font)
        self.AlphaA_ForceFieldTypeselector = QComboBox()
        self.AlphaA_ForceFieldTypeselector.setFont(AlphaA_font)
        #self.AlphaA_ForceFieldTypeLabel.setFixedSize(550, 60)  # Width of 200 pixels and height of 20 pixels
        self.AlphaA_ForceFieldTypeselector.addItem("Please select the force field for atomistic simulations", True)
        self.AlphaA_ForceFieldTypeselector.addItem("CHARMM36 Infinite Chain Model", False)
        self.AlphaA_ForceFieldTypeselector.addItem("CHARMM36 Finite Chain Model", False)
        self.AlphaA_ForceFieldTypeselector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.AlphaA_ForceFieldTypeselector.addItem("GLYCAM06 Finite Chain Model", False)
        AlphaA_ForceField_layout.addWidget(self.AlphaA_ForceFieldTypeLabel)
        AlphaA_ForceField_layout.addWidget(self.AlphaA_ForceFieldTypeselector)
        AlphaA_modification_mainLayout.addLayout(AlphaA_ForceField_layout)

        self.AlphaA_deacetyl_planeLabel.setVisible(False)
        self.AlphaA_deacetyl_planeComboBox.setVisible(False)
        self.AlphaA_carboxylation_planeLabel.setVisible(False)
        self.AlphaA_carboxylation_planeComboBox.setVisible(False)

        self.AlphaA_dda_Label.setVisible(False)
        self.AlphaA_dda_LineEdit.setVisible(False)
        self.AlphaA_dda_pHLabel.setVisible(False)
        self.AlphaA_dda_pHLineEdit.setVisible(False)

        self.AlphaA_carboxylation_Label.setVisible(False)
        self.AlphaA_carboxylation_LineEdit.setVisible(False)
        self.AlphaA_carboxylation_pHLabel.setVisible(False)
        self.AlphaA_carboxylation_pHLineEdit.setVisible(False)


        self.AlphaA_ForceFieldTypeLabel.setVisible(False)
        self.AlphaA_ForceFieldTypeselector.setVisible(False)

        self.AlphaA_deacetyl_planeComboBox.currentIndexChanged.connect(
        lambda: self.AlphaA_manageVisibilityAndStylesForDeacetylation(
            self.AlphaA_deacetyl_planeComboBox.currentText()
           )
        )
        self.AlphaA_modificationInputsWidget.setLayout(AlphaA_modification_mainLayout)

        self.AlphaA_carboxylation_planeComboBox.currentIndexChanged.connect(
        lambda: self.AlphaA_manageVisibilityAndStylesForCarboxylation(
            self.AlphaA_carboxylation_planeComboBox.currentText()
           )
        )
        self.AlphaA_modificationInputsWidget.setLayout(AlphaA_modification_mainLayout)


    def AlphaA_updateModificationInputs(self, AlphaA_modificationType, checked):
        if checked:
            if  AlphaA_modificationType == "Deacetylation":
                AlphaA_deacetylation_plane_selection = self.AlphaA_deacetyl_planeComboBox.currentText()
                self.AlphaA_manageVisibilityAndStylesForDeacetylation(AlphaA_deacetylation_plane_selection)

            elif AlphaA_modificationType == "Carboxylation":
                AlphaA_carboxylation_plane_selection = self.AlphaA_carboxylation_planeComboBox.currentText()
                self.AlphaA_manageVisibilityAndStylesForCarboxylation(AlphaA_carboxylation_plane_selection)
            elif  AlphaA_modificationType == "None":
                self.AlphaA_dda_Label.setVisible(False)
                self.AlphaA_dda_LineEdit.setVisible(False)
                self.AlphaA_carboxylation_Label.setVisible(False)
                self.AlphaA_carboxylation_LineEdit.setVisible(False)

                self.AlphaA_carboxylation_pHLabel.setVisible(False)
                self.AlphaA_carboxylation_pHLineEdit.setVisible(False)
                self.AlphaA_dda_pHLabel.setVisible(False)
                self.AlphaA_dda_pHLineEdit.setVisible(False)

    
                self.AlphaA_deacetyl_planeLabel.setVisible(False)
                self.AlphaA_deacetyl_planeComboBox.setVisible(False)
                self.AlphaA_carboxylation_planeLabel.setVisible(False)
                self.AlphaA_carboxylation_planeComboBox.setVisible(False)


                self.AlphaA_ForceFieldTypeLabel.setVisible(True)
                self.AlphaA_ForceFieldTypeselector.setVisible(True)
                self.AlphaA_invokeButton.setVisible(True)  # Show "Generate Structure" button
        else:
            self.AlphaA_dda_Label.setVisible(False)
            self.AlphaA_dda_LineEdit.setVisible(False)
            self.AlphaA_carboxylation_Label.setVisible(False)
            self.AlphaA_carboxylation_LineEdit.setVisible(False)


            self.AlphaA_dda_pHLabel.setVisible(False)
            self.AlphaA_dda_pHLineEdit.setVisible(False)
            self.AlphaA_carboxylation_pHLabel.setVisible(False)
            self.AlphaA_carboxylation_pHLineEdit.setVisible(False)


            self.AlphaA_deacetyl_planeLabel.setVisible(False)
            self.AlphaA_deacetyl_planeComboBox.setVisible(False)
            self.AlphaA_carboxylation_planeLabel.setVisible(False)
            self.AlphaA_carboxylation_planeComboBox.setVisible(False)


            self.AlphaA_ForceFieldTypeLabel.setVisible(False)
            self.AlphaA_ForceFieldTypeselector.setVisible(False)
            self.AlphaA_invokeButton.setVisible(False)  

    def AlphaA_manageVisibilityAndStylesForDeacetylation(self, AlphaA_deacetylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.AlphaA_deacetyl_planeLabel.setVisible(True)
        self.AlphaA_deacetyl_planeComboBox.setVisible(True)
        self.AlphaA_carboxylation_planeLabel.setVisible(False)
        self.AlphaA_carboxylation_planeComboBox.setVisible(False)
        self.AlphaA_dda_Label.setVisible(True)
        self.AlphaA_dda_LineEdit.setVisible(True)
        self.AlphaA_dda_pHLabel.setVisible(True)
        self.AlphaA_dda_pHLineEdit.setVisible(True)
        self.AlphaA_carboxylation_Label.setVisible(False)
        self.AlphaA_carboxylation_LineEdit.setVisible(False)
        self.AlphaA_carboxylation_pHLabel.setVisible(False)
        self.AlphaA_carboxylation_pHLineEdit.setVisible(False)
        self.AlphaA_ForceFieldTypeLabel.setVisible(True)
        self.AlphaA_ForceFieldTypeselector.setVisible(True)
        self.AlphaA_invokeButton.setVisible(True)
    
        if AlphaA_deacetylation_plane_selection in ["Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", ]:
            self.AlphaA_dda_LineEdit.setReadOnly(False)
            self.AlphaA_dda_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaA_dda_pHLineEdit.setReadOnly(False)
            self.AlphaA_dda_pHLineEdit.setStyleSheet("background-color: white;")
        elif AlphaA_deacetylation_plane_selection == "Inside the α-chitin":
            self.AlphaA_dda_LineEdit.setReadOnly(False)
            self.AlphaA_dda_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaA_dda_pHLineEdit.setReadOnly(True)
            self.AlphaA_dda_pHLineEdit.setStyleSheet("background-color: #D3D3D3;")



    def AlphaA_manageVisibilityAndStylesForCarboxylation(self, AlphaA_carboxylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.AlphaA_deacetyl_planeLabel.setVisible(False)
        self.AlphaA_deacetyl_planeComboBox.setVisible(False)
        self.AlphaA_carboxylation_planeLabel.setVisible(True)
        self.AlphaA_carboxylation_planeComboBox.setVisible(True)
        self.AlphaA_dda_Label.setVisible(False)
        self.AlphaA_dda_LineEdit.setVisible(False)
        self.AlphaA_dda_pHLabel.setVisible(False)
        self.AlphaA_dda_pHLineEdit.setVisible(False)
        self.AlphaA_carboxylation_Label.setVisible(True)
        self.AlphaA_carboxylation_LineEdit.setVisible(True)
        self.AlphaA_carboxylation_pHLabel.setVisible(True)
        self.AlphaA_carboxylation_pHLineEdit.setVisible(True)
        self.AlphaA_ForceFieldTypeLabel.setVisible(True)
        self.AlphaA_ForceFieldTypeselector.setVisible(True)
        self.AlphaA_invokeButton.setVisible(True)
    
        if AlphaA_carboxylation_plane_selection in ["Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", ]:
            self.AlphaA_carboxylation_LineEdit.setReadOnly(False)
            self.AlphaA_carboxylation_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaA_carboxylation_pHLineEdit.setReadOnly(False)
            self.AlphaA_carboxylation_pHLineEdit.setStyleSheet("background-color: white;")


    def AlphaA_invokeScript(self):
            model = self.AlphaA_ComboBox.currentText()
            
            if self.AlphaA_Experimental.isChecked():
                #self.AlphaA_ForceFieldTypeselector.setCurrentIndex(0)
                
                if self.AlphaA_noModRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                    AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                    AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                    if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit:
                        QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                        return
                    AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                    AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        AlphaA_shape_name = "rectangle"
                        AlphaA_folder_name = "charmm36"
                    elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        AlphaA_shape_name = "rectangle"
                        AlphaA_folder_name = "glycam06"
                    try:    
                        AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A", AlphaA_shape_name, AlphaA_folder_name, AlphaA_script_name)
                        AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit]
                        AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaA_result.returncode == 0:
                            AlphaA_output = AlphaA_result.stdout.strip()
                            self.AlphaA_exp_rectangle_nochemical_Popup(AlphaA_output)
                            self.AlphaA_exp_rectangle_nochemical_Topology()                    
                        else:
                            error_message = AlphaA_result.stderr.strip()
                            QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                elif self.AlphaA_noModRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaA_width  = self.AlphaA_width.text()  
                    AlphaA_height = self.AlphaA_height.text()
                    AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                    if not AlphaA_c_unit and AlphaA_width and AlphaA_height:
                        QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                        return
                    AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                    AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        AlphaA_shape_name = "hexagon"
                        AlphaA_folder_name = "charmm36"
                    elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        AlphaA_shape_name = "hexagon"
                        AlphaA_folder_name = "glycam06"
                    try:    
                        AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A", AlphaA_shape_name, AlphaA_folder_name, AlphaA_script_name)
                        AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width]
                        AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaA_result.returncode == 0:
                            AlphaA_output = AlphaA_result.stdout.strip()
                            self.AlphaA_exp_hexagon_nochemical_Popup(AlphaA_output)
                            self.AlphaA_exp_hexagon_nochemical_Topology()                    
                        else:
                            error_message = AlphaA_result.stderr.strip() 
                            QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                #----rectangle --------------experimental-----------deacetylation  deacetylationRadio
                elif self.AlphaA_deacetylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaA_deacetylation_plane_selection = self.AlphaA_deacetyl_planeComboBox.currentText()

                    ###double plane modifications
                    if  AlphaA_deacetylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")
                    elif AlphaA_deacetylation_plane_selection == "Two (010) planes":

                        ##deacetylation parameter 
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaA_deacetylation_plane_selection == "Single (010) plane":

                        ##deacetylation parameter 
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaA_deacetylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaA_deacetylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-infinite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_deacetylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_deacetylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)": 
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_deacetylation_plane_selection == "Inside the α-chitin":

                        ##deacetylation parameter 
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-inside-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-inside-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #AlphaA_folder_name = "charmm36"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")                           
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_inside_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_inside_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                #----------carboxylation------------rectangle-----experimental----- crystallographic parameter-----------
                elif self.AlphaA_carboxylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaA_carboxylation_plane_selection = self.AlphaA_carboxylation_planeComboBox.currentText()

                    ###double plane modifications
                    if  AlphaA_carboxylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")
                    elif AlphaA_carboxylation_plane_selection == "Two (010) planes":

                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaA_carboxylation_plane_selection == "Single (010) plane":

                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaA_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-infinite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)": 
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaA_shape_name = "rectangle"
                            #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaA_shape_name = "rectangle"
                            #    AlphaA_folder_name = "glycam06"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                
                
                ######-#####################-----------experimenetal-----------hexagonal-deacetylation----------------------##########################
                elif self.AlphaA_deacetylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaA_deacetylation_plane_selection = self.AlphaA_deacetyl_planeComboBox.currentText()

                    ###single plane modifications
                    if  AlphaA_deacetylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support hexagonal cross-section shape.")                    
                    elif AlphaA_deacetylation_plane_selection == "Single (010) plane":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ###two 010 plane modifications
                    if AlphaA_deacetylation_plane_selection == "Two (010) planes":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaA_deacetylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    if AlphaA_deacetylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_deacetylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_deacetylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                ####---------------hexagonal-shape carboxylation ----------- experimental------- 
                # 
                elif self.AlphaA_carboxylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaA_carboxylation_plane_selection = self.AlphaA_carboxylation_planeComboBox.currentText()
        

                    ###single plane modifications
                    if  AlphaA_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane carboxylated chitin doesn't support hexagonal cross-section shape.")       

                    elif AlphaA_carboxylation_plane_selection == "Single (010) plane":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaA_carboxylation_plane_selection == "Two (010) planes":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaA_carboxylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



            ###----------------user-defined------------ crystallographic parameters
            elif self.AlphaA_UserDefined.isChecked():
                if self.AlphaA_noModRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaA_a_parm = self.AlphaA_aParam.text()
                    AlphaA_b_parm = self.AlphaA_bParam.text()
                    AlphaA_c_parm = self.AlphaA_cParam.text()
                    AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                    AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                    AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                    if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm  and AlphaA_a_unit and AlphaA_b_unit and AlphaA_c_unit: 
                        QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                        return
                    AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                    AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaA_script_name = "alpha_chitin_A_infinite_ud.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_ud.py"
                        AlphaA_ud_folder = "user-defined"
                        AlphaA_shape_name = "rectangle"
                        AlphaA_folder_name = "charmm36"
                    elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaA_script_name = "alpha_chitin_A_infinite_ud.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_ud.py"
                        AlphaA_ud_folder = "user-defined"
                        AlphaA_shape_name = "rectangle"
                        AlphaA_folder_name = "glycam06"
                    try:    
                        AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_folder_name, AlphaA_script_name)
                        AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit,  AlphaA_c_unit]
                        AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaA_result.returncode == 0:
                            AlphaA_output = AlphaA_result.stdout.strip()
                            self.AlphaA_exp_rectangle_nochemical_Popup(AlphaA_output)
                            self.AlphaA_exp_rectangle_nochemical_Topology()                    
                        else:
                            error_message = AlphaA_result.stderr.strip()
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.") 
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n")  

                elif self.AlphaA_noModRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaA_a_parm = self.AlphaA_aParam.text()
                    AlphaA_b_parm = self.AlphaA_bParam.text()
                    AlphaA_c_parm = self.AlphaA_cParam.text()
                    AlphaA_width  = self.AlphaA_width.text()  
                    AlphaA_height = self.AlphaA_height.text()
                    AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                    if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm  and AlphaA_a_unit and AlphaA_b_unit and AlphaA_c_unit and AlphaA_height and AlphaA_width: 
                        QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                        return
                    AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                    AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaA_script_name = "alpha_chitin_A_infinite_ud.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_ud.py"
                        AlphaA_ud_folder = "user-defined"
                        AlphaA_shape_name = "hexagon"
                        AlphaA_folder_name = "charmm36"
                    elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaA_script_name = "alpha_chitin_A_infinite_ud.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_ud.py"
                        AlphaA_ud_folder = "user-defined"
                        AlphaA_shape_name = "hexagon"
                        AlphaA_folder_name = "glycam06"
                    try:    
                        AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_folder_name, AlphaA_script_name)
                        AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_c_unit, AlphaA_height, AlphaA_width]
                        AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaA_result.returncode == 0:
                            AlphaA_output = AlphaA_result.stdout.strip()
                            self.AlphaA_exp_hexagon_nochemical_Popup(AlphaA_output)
                            self.AlphaA_exp_hexagon_nochemical_Topology()                    
                        else:    
                            error_message = AlphaA_result.stderr.strip()
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")  
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n") 




                ###deacetylation

                ######-#####################----------------user-defined------Rectangle-deacetylation----------------------##########################


                elif self.AlphaA_deacetylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaA_deacetylation_plane_selection = self.AlphaA_deacetyl_planeComboBox.currentText()

                    if  AlphaA_deacetylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")

                    elif AlphaA_deacetylation_plane_selection == "Two (010) planes":

                        ##deacetylation parameter 
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()


                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_deacetylation_plane_selection == "Single (010) plane":

                        ##deacetylation parameter 
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()


                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_ud_folder, AlphaA_shape_name,AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaA_deacetylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()


                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_ud_folder, AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    elif AlphaA_deacetylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()


                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-2-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_ud_folder, AlphaA_shape_name,AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaA_deacetylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()


                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaA_deacetylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()


                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_ud_folder, AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaA_deacetylation_plane_selection == "Inside the α-chitin":
                        ##deacetylation parameter 
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-inside-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-inside-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                            AlphaA_folder_name = "charmm36"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_ud_folder, AlphaA_shape_name,  AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, dda]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_deacetylation_inside_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_deacetylation_inside_Topology()                    
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                #####----------------------------------user-defined rectangle carboxylation --------------------
                elif self.AlphaA_carboxylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaA_carboxylation_plane_selection = self.AlphaA_carboxylation_planeComboBox.currentText()

                    if  AlphaA_carboxylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane carboxylated chitin doesn't support rectangle cross-section shape.")

                    elif AlphaA_carboxylation_plane_selection == "Two (010) planes":

                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Single (010) plane":

                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaA_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-2-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
                        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaA_ud_folder = "user-defined"
                            AlphaA_shape_name = "rectangle"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "UnsupporteOperation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaA_shape_name = "rectangle"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_ud_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path,  AlphaA_a_parm, AlphaA_b_parm, AlphaA_c_parm, AlphaA_a_unit, AlphaA_b_unit, AlphaA_c_unit, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_exp_rectangle_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaA_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                ######-#####################--------------user-defined--------Hexagon-deacetylation----------------------##########################
                elif self.AlphaA_deacetylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaA_deacetylation_plane_selection = self.AlphaA_deacetyl_planeComboBox.currentText()

                    if  AlphaA_deacetylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support hexagonal cross-section shape.")       
                    ###single plane modifications
                    elif AlphaA_deacetylation_plane_selection == "Single (010) plane":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaA_folder="user-defined"
                            AlphaA_shape_name = "hexagon"

                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ###two 010 plane modifications
                    if AlphaA_deacetylation_plane_selection == "Two (010) planes":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()                        
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
    
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaA_shape_name = "hexagon"
                            AlphaA_folder="user-defined"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaA_deacetylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaA_shape_name = "hexagon"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    if AlphaA_deacetylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text() 
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaA_shape_name = "hexagon"
                            AlphaA_folder="user-defined"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaA_deacetylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaA_shape_name = "hexagon"
                            AlphaA_folder="user-defined"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaA_deacetylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        dda = self.AlphaA_dda_LineEdit.text()  
                        ph = self.AlphaA_dda_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and dda and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaA_shape_name = "hexagon"
                            AlphaA_folder="user-defined"
                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-deacetylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, dda, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_deacetylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ######-#####################--------------user-defined--------Hexagon-carboxylation----------------------##########################
                elif self.AlphaA_carboxylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaA_carboxylation_plane_selection = self.AlphaA_carboxylation_planeComboBox.currentText()

                    if  AlphaA_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane carboxylated chitin doesn't support hexagonal cross-section shape.")       
                    ###single plane modifications
                    elif AlphaA_carboxylation_plane_selection == "Single (010) plane":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaA_folder="user-defined"
                            AlphaA_shape_name = "hexagon"

                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaA_carboxylation_plane_selection == "Two (010) planes":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaA_folder="user-defined"
                            AlphaA_shape_name = "hexagon"

                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaA_carboxylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaA_folder="user-defined"
                            AlphaA_shape_name = "hexagon"

                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaA_carboxylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaA_folder="user-defined"
                            AlphaA_shape_name = "hexagon"

                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaA_carboxylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaA_folder="user-defined"
                            AlphaA_shape_name = "hexagon"

                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    elif AlphaA_carboxylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaA_a_parm = self.AlphaA_aParam.text()
                        AlphaA_b_parm = self.AlphaA_bParam.text()
                        AlphaA_c_parm = self.AlphaA_cParam.text()
                        AlphaA_width  = self.AlphaA_width.text()  
                        AlphaA_height = self.AlphaA_height.text()
                        AlphaA_c_unit = self.AlphaA_cRepeatUnits.text()
                        carboxylation = self.AlphaA_carboxylation_LineEdit.text()  
                        ph = self.AlphaA_carboxylation_pHLineEdit.text()
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()

                        if not AlphaA_a_parm and AlphaA_b_parm and AlphaA_c_parm and AlphaA_c_unit and AlphaA_a_unit and AlphaA_b_unit and carboxylation and ph and AlphaA_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
                        AlphaA_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaA_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaA_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaA_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaA_folder="user-defined"
                            AlphaA_shape_name = "hexagon"

                        elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaA_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaA_script_name = "infinite_experiment.py" if "Infinite" in AlphaA_ForceFieldType else "finite_experiment.py"
                        #    AlphaA_shape_name = "hexagon"
                        #    AlphaA_folder_name = "glycam06"
                        try:    
                            AlphaA_script_path = os.path.join(AlphaA_base_dir, "function", "alpha-chitin-A-carboxylation", AlphaA_folder, AlphaA_shape_name, AlphaA_script_name)
                            AlphaA_command = ["python", AlphaA_script_path, AlphaA_a_parm, AlphaA_b_parm , AlphaA_c_parm , AlphaA_c_unit, AlphaA_height, AlphaA_width, carboxylation, ph]
                            AlphaA_result = subprocess.run(AlphaA_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaA_result.returncode == 0:
                                AlphaA_output = AlphaA_result.stdout.strip()
                                self.AlphaA_hexagon_carboxylation_Popup(AlphaA_output)
                                self.AlphaA_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaA_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


##alpha-chitin-A rectangle experimental data no modification windows output
    def AlphaA_exp_rectangle_nochemical_Topology(self):  #native chitin topology
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaA_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "A-configuration"
        AlphaA_a_unit = self.AlphaA_aRepeatUnits.text()
        AlphaA_b_unit = self.AlphaA_bRepeatUnits.text()
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path,AlphaA_a_unit, AlphaA_b_unit]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaA_exp_rectangle_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Native α-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Native α-chitin Topology Generation Failed")

    def AlphaA_exp_rectangle_nochemical_Popup(self, AlphaA_rectangle_output):
        AlphaA_rectangle_output = f"Native α-chitin-A Generated Successfully"
        QMessageBox.information(self, "Build Result", AlphaA_rectangle_output)

    def AlphaA_exp_rectangle_nochemical_Topology_Popup(self):
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Native α-chitin-A Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##alpha-chitin-A rectangle deacetylation windows output
    def AlphaA_exp_rectangle_deacetylation_Topology(self):   
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaA_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "A-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaA_exp_rectangle_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-A Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-A Topology Generation Failed")

    def AlphaA_exp_rectangle_deacetylation_Popup(self, AlphaA_rectangle_output):
        lines = [line.strip() for line in AlphaA_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')

        dda = float(parts[0].split(':')[1].strip())   
        ph = float(parts[1].split(':')[1].strip())   
        units = float(parts[2].split(':')[1].strip())   
        dda_formatted = "{:.2f}".format(dda)
        ph_formatted = "{:.2f}".format(ph)
        units_formatted = "{:.2f}".format(units)
        message = f"Deacetylated α-chitin-A was Generated Successfully!\nActual DDA: {dda_formatted}\nActual pH: {ph_formatted}\nDeprotonated units: {units_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaA_exp_rectangle_deacetylation_Topology_Popup(self):
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-A Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##alpha-chitin-A hexgonal deacetylation windows output
    def AlphaA_hexagon_deacetylation_Topology(self):  #native chitin topology
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaA_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "A-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaA_hexagon_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-A Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-A Topology Generation Failed")

    def AlphaA_hexagon_deacetylation_Popup(self, AlphaA_hexagon_output):
        lines = [line.strip() for line in AlphaA_hexagon_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')

        dda = float(parts[0].split(':')[1].strip())   
        ph = float(parts[1].split(':')[1].strip())   
        units = float(parts[2].split(':')[1].strip())   
        dda_formatted = "{:.2f}".format(dda)
        ph_formatted = "{:.2f}".format(ph)
        units_formatted = "{:.2f}".format(units)
        message = f"Deacetylated α-chitin-A was Generated Successfully!\nActual DDA: {dda_formatted}\nActual pH: {ph_formatted}\nDeprotonated units: {units_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaA_hexagon_deacetylation_Topology_Popup(self):
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-A Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)





##alpha-chitin-A hexagon experimental data no modification windows output
    def AlphaA_exp_hexagon_nochemical_Topology(self):   
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaA_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "A-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaA_exp_hexagon_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Native α-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Native α-chitin Topology Generation Failed")


    def AlphaA_exp_hexagon_nochemical_Popup(self, AlphaA_hexagon_output):
        AlphaA_hexagon_output = f"Native α-chitin-A Generated Successfully"
        QMessageBox.information(self, "Build Result", AlphaA_hexagon_output)


    def AlphaA_exp_hexagon_nochemical_Topology_Popup(self):
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Native α-chitin-A Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)





#Inside case 
##alpha-chitin-A rectangle deacetylation ---inside ----- windows output
    def AlphaA_exp_rectangle_deacetylation_inside_Topology(self):  
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaA_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "A-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaA_exp_rectangle_deacetylation_inside_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-A Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-A Topology Generation Failed")

    def AlphaA_exp_rectangle_deacetylation_inside_Popup(self, AlphaA_rectangle_output):
        lines = [line.strip() for line in AlphaA_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = parts[0].split(':')[1].strip()
        units = parts[1].split(':')[1].strip()
        message = f"Deacetylated α-chitin-A was Generated Successfully!\nActual DDA: {dda}\nDeacetylation units: {units}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaA_exp_rectangle_deacetylation_inside_Topology_Popup(self):
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-A Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##alpha-chitin-A carboxylation (rectangle-cross-section) windows output
    def AlphaA_exp_rectangle_carboxylation_Topology(self):  
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaA_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "A-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaA_exp_rectangle_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated α-chitin-A Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated α-chitin-A Topology Generation Failed")

    def AlphaA_exp_rectangle_carboxylation_Popup(self, AlphaA_rectangle_output):
        lines = [line.strip() for line in AlphaA_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated α-chitin-A was Generated Successfully!\nActual carboxylation: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaA_exp_rectangle_carboxylation_Topology_Popup(self):
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated α-chitin-A Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)





##alpha-chitin-A carboxylation (hexagonal-cross-section) windows output
    def AlphaA_hexagon_carboxylation_Topology(self):   
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaA_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "A-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaA_hexagon_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated α-chitin-A Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated α-chitin-A Topology Generation Failed")

    def AlphaA_hexagon_carboxylation_Popup(self, AlphaA_hexagon_output):
        lines = [line.strip() for line in AlphaA_hexagon_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated α-chitin-A was Generated Successfully!\nActual carboxylation: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaA_hexagon_carboxylation_Topology_Popup(self):
        AlphaA_ForceFieldType = self.AlphaA_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaA_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated α-chitin-A Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##########-------------------------Alpha-chitin-b
    def setupAlphaBOptions(self):
        self.AlphaBOptions = QWidget()
        self.AlphaStackedWidget.addWidget(self.AlphaBOptions) 
        AlphaB_layout = QVBoxLayout(self.AlphaBOptions)
        AlphaB_layout.setAlignment(Qt.AlignTop)
        AlphaB_Font = QFont("Arial", 13)

        # Radio buttons setup
        self.AlphaB_radioGroup = QGroupBox("Parameter Type")
        self.AlphaB_radioGroup.setAlignment(Qt.AlignTop)
        AlphaB_radioLayout = QHBoxLayout()
        self.AlphaB_Experimental = QRadioButton("Crystallographic Parameters from X-Ray Diffraction Experiments")
        self.AlphaB_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")
        self.AlphaB_Experimental.setFont(AlphaB_Font)
        self.AlphaB_UserDefined.setFont(AlphaB_Font)
        AlphaB_radioLayout.addWidget(self.AlphaB_Experimental)
        AlphaB_radioLayout.addWidget(self.AlphaB_UserDefined)
        AlphaB_layout.addLayout(AlphaB_radioLayout)

        # Combo box setup
        self.AlphaB_ComboBox = QComboBox(self.AlphaBOptions)
        self.AlphaB_ComboBox.addItem("Please select the crystallite shape")
        self.AlphaB_ComboBox.addItems(["Rectangle cross-section shape", "Hexagon cross-section shape"])
        self.AlphaB_ComboBox.setVisible(False)
        AlphaB_layout.addWidget(self.AlphaB_ComboBox)

        # Connecting radio buttons to toggle visibility
        self.AlphaB_Experimental.toggled.connect(self.AlphaB_Visibility)
        self.AlphaB_UserDefined.toggled.connect(self.AlphaB_Visibility)
        self.AlphaB_ComboBox.currentIndexChanged.connect(self.AlphaB_updateParametersDisplay)

        # Parameter display setup
        self.AlphaB_parametersGroup = QGroupBox("Crystallographic parameters")
        AlphaB_parametersLayout = QVBoxLayout()  
        self.AlphaB_parametersGroup.setLayout(AlphaB_parametersLayout)
        self.AlphaB_parametersGroup.setVisible(False)
        AlphaB_layout.addWidget(self.AlphaB_parametersGroup)

        self.AlphaB_initParameterWidgets(AlphaB_Font)

        self.AlphaB_imageLabel = QLabel(self)
        self.AlphaB_imageLabel.setFixedSize(1000, 250) 
        self.AlphaB_imageLabel.setAlignment(Qt.AlignCenter)
        self.AlphaB_imageLabel.setScaledContents(True)
        AlphaB_layout.addWidget(self.AlphaB_imageLabel)
        self.AlphaB_imageLabel.clear()
        AlphaB_layout.addWidget(self.AlphaB_imageLabel)
        AlphaB_layout.setAlignment(self.AlphaB_imageLabel, Qt.AlignCenter)  
        self.AlphaB_ComboBox.currentIndexChanged.connect(self.AlphaB_updateImageDisplay) 



        ###cititation for alpha-chitin crystallographic parameter
        self.AlphaB_citationLabel = QLabel("Crystallographic parameter reference: Sikorski et al. Biomacromolecules, vol. 10, no. 5, pp. 1100-1105.")
        self.AlphaB_citationLabel.setWordWrap(True)
        AlphaB_citation_font = self.AlphaB_citationLabel.font()
        AlphaB_citation_font.setPointSize(6) 
        self.AlphaB_citationLabel.setFont(AlphaB_citation_font)
        AlphaB_layout.addWidget(self.AlphaB_citationLabel)
        self.AlphaB_citationLabel.hide()

        # Connect combo box selection changes to update display
        self.AlphaB_ComboBox.currentIndexChanged.connect(self.AlphaB_updateParametersDisplay)

        # Invoke button setup, initially hidden
        self.AlphaB_invokeButton = QPushButton("Invoke Script")
        self.AlphaB_invokeButton.setVisible(False)
        self.AlphaB_invokeButton.clicked.connect(self.AlphaB_invokeScript)
        AlphaB_layout.addWidget(self.AlphaB_invokeButton)

    def AlphaB_updateImageDisplay(self, index):
        AlphaB_shape = self.AlphaB_ComboBox.currentText()
        if AlphaB_shape == "Rectangle cross-section shape":
            AlphaB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'alpha-chitin', 'chitin-rectangle-shape.png') )
        elif AlphaB_shape == "Hexagon cross-section shape":
            AlphaB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'alpha-chitin', 'chitin-hexagonal-shape.png') )
        else:
            self.AlphaB_imageLabel.clear()
            return
        self.AlphaB_imageLabel.setPixmap(AlphaB_pixmap)
        self.AlphaB_imageLabel.show()

    def AlphaB_initParameterWidgets(self, font):
        # Create two horizontal layouts
        self.AlphaB_paramLine1 = QHBoxLayout()
        self.AlphaB_paramLine2 = QHBoxLayout()
        self.AlphaB_paramLine3 = QHBoxLayout()
        # Initialize QLineEdit objects for parameters and repeat units
        self.AlphaB_aParam = QLineEdit()
        self.AlphaB_bParam = QLineEdit()
        self.AlphaB_cParam = QLineEdit()
        self.AlphaB_aRepeatUnits = QLineEdit()
        self.AlphaB_bRepeatUnits = QLineEdit()
        self.AlphaB_cRepeatUnits = QLineEdit()
        
        self.AlphaB_width = QLineEdit()
        self.AlphaB_height = QLineEdit()
        # Add widgets to first line layout
        self.AlphaB_setupParameterWidget("a (Å)", self.AlphaB_aParam, True, "", self.AlphaB_paramLine1, font)
        self.AlphaB_setupParameterWidget("b (Å)", self.AlphaB_bParam, True, "", self.AlphaB_paramLine1, font)
        self.AlphaB_setupParameterWidget("c (Å)", self.AlphaB_cParam, True, "", self.AlphaB_paramLine1, font)

        self.AlphaB_setupParameterWidget("Cross-section width (Å)", self.AlphaB_width, True, "", self.AlphaB_paramLine2, font)
        self.AlphaB_setupParameterWidget("Cross-section height (Å)", self.AlphaB_height, True, "", self.AlphaB_paramLine2, font)

        self.AlphaB_setupParameterWidget("a repetition", self.AlphaB_aRepeatUnits, True, "", self.AlphaB_paramLine3, font)
        self.AlphaB_setupParameterWidget("b repetition", self.AlphaB_bRepeatUnits, True, "", self.AlphaB_paramLine3, font)
        self.AlphaB_setupParameterWidget("c repetition", self.AlphaB_cRepeatUnits, True, "", self.AlphaB_paramLine3, font)

        # Add both lines to the group box layout
        self.AlphaB_parametersGroup.layout().addLayout(self.AlphaB_paramLine1)
        self.AlphaB_parametersGroup.layout().addLayout(self.AlphaB_paramLine2)
        self.AlphaB_parametersGroup.layout().addLayout(self.AlphaB_paramLine3)

    def AlphaB_setupParameterWidget(self, AlphaB_label, AlphaB_widget, readOnly, AlphaB_defaultValue, AlphaB_layout, AlphaB_font):
        AlphaB_labelWidget = QLabel(AlphaB_label)
        AlphaB_labelWidget.setFont(AlphaB_font)
        AlphaB_widget.setFont(AlphaB_font)
        AlphaB_widget.setReadOnly(readOnly)
        AlphaB_widget.setText(AlphaB_defaultValue)
        if readOnly:
            AlphaB_widget.setStyleSheet("background-color: lightgrey;")
        AlphaB_layout.addWidget(AlphaB_labelWidget)
        AlphaB_layout.addWidget(AlphaB_widget)
    

    def AlphaB_updateReadOnlyState(self, AlphaB_widget, readOnly):
        AlphaB_widget.setReadOnly(readOnly)
        if readOnly:
            AlphaB_widget.setStyleSheet("background-color: #D3D3D3;")  # Light grey background
            AlphaB_widget.setEnabled(False)  # Optionally disable the widget to make it clear it's not interactive
        else:
            AlphaB_widget.setStyleSheet("background-color: white;")
            AlphaB_widget.setEnabled(True)  # Re-enable the widget for user interaction

    def AlphaB_Visibility(self, checked):
        self.AlphaB_ComboBox.setVisible(checked)
        if checked:
            self.AlphaB_ComboBox.setCurrentIndex(0) 
            self.AlphaB_parametersGroup.setVisible(False)
        else:
            self.AlphaB_ComboBox.setVisible(False)
            self.AlphaB_parametersGroup.setVisible(False)

    def AlphaB_updateParametersDisplay(self):
        if self.AlphaB_ComboBox.currentIndex() == 0:
            self.AlphaB_parametersGroup.setVisible(False)
        else:
            self.AlphaB_parametersGroup.setVisible(True)
            model = self.AlphaB_ComboBox.currentText()
            
            if self.AlphaB_Experimental.isChecked() :
                self.AlphaB_citationLabel.show()
                if model == "Rectangle cross-section shape":
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.AlphaB_setupModificationsSection(self.AlphaB_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaB_aParam.clear()
                    self.AlphaB_bParam.clear()
                    self.AlphaB_cParam.clear()
                    self.AlphaB_aRepeatUnits.clear()
                    self.AlphaB_bRepeatUnits.clear()
                    self.AlphaB_cRepeatUnits.clear()
                    self.AlphaB_width.clear()
                    self.AlphaB_height.clear()

                    self.AlphaB_aParam.setText("4.749")
                    self.AlphaB_bParam.setText("18.89")
                    self.AlphaB_cParam.setText("10.33")

                    self.AlphaB_updateReadOnlyState(self.AlphaB_aParam, True)    
                    self.AlphaB_updateReadOnlyState(self.AlphaB_bParam, True)             
                    self.AlphaB_updateReadOnlyState(self.AlphaB_cParam, True) 
                    self.AlphaB_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_cParam.setStyleSheet("background-color: #D3D3D3;")  

                    self.AlphaB_updateReadOnlyState(self.AlphaB_width, True)             
                    self.AlphaB_updateReadOnlyState(self.AlphaB_height, True)   
                    self.AlphaB_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.AlphaB_updateReadOnlyState(self.AlphaB_bRepeatUnits, False)     
                    self.AlphaB_updateReadOnlyState(self.AlphaB_aRepeatUnits, False)   
                    self.AlphaB_updateReadOnlyState(self.AlphaB_cRepeatUnits, False)    
                    self.AlphaB_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaB_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaB_cRepeatUnits.setStyleSheet("background-color: white;") 
                    
                elif model == "Hexagon cross-section shape":
                    self.AlphaB_setupModificationsSection(self.AlphaB_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaB_aParam.clear()
                    self.AlphaB_bParam.clear()
                    self.AlphaB_cParam.clear()
                    self.AlphaB_aRepeatUnits.clear()
                    self.AlphaB_bRepeatUnits.clear()
                    self.AlphaB_cRepeatUnits.clear()
                    self.AlphaB_width.clear()
                    self.AlphaB_height.clear()
                    self.AlphaB_aParam.setText("4.749")
                    self.AlphaB_bParam.setText("18.89")
                    self.AlphaB_cParam.setText("10.33")

                    self.AlphaB_updateReadOnlyState(self.AlphaB_aParam, True)    
                    self.AlphaB_updateReadOnlyState(self.AlphaB_bParam, True)             
                    self.AlphaB_updateReadOnlyState(self.AlphaB_cParam, True)  
                    self.AlphaB_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_cParam.setStyleSheet("background-color: #D3D3D3;")                     

                    self.AlphaB_updateReadOnlyState(self.AlphaB_width,  False)             
                    self.AlphaB_updateReadOnlyState(self.AlphaB_height, False)   
                    self.AlphaB_width.setStyleSheet("background-color:  white;") 
                    self.AlphaB_height.setStyleSheet("background-color: white;")     


                    self.AlphaB_updateReadOnlyState(self.AlphaB_bRepeatUnits, True)     
                    self.AlphaB_updateReadOnlyState(self.AlphaB_aRepeatUnits, True)   
                    self.AlphaB_updateReadOnlyState(self.AlphaB_cRepeatUnits, False)    
                    self.AlphaB_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_cRepeatUnits.setStyleSheet("background-color: white;") 
            
            elif self.AlphaB_UserDefined.isChecked() :

                self.AlphaB_citationLabel.hide()
                if model == "Rectangle cross-section shape":
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.AlphaB_setupModificationsSection(self.AlphaB_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaB_aParam.clear()
                    self.AlphaB_bParam.clear()
                    self.AlphaB_cParam.clear()
                    self.AlphaB_aRepeatUnits.clear()
                    self.AlphaB_bRepeatUnits.clear()
                    self.AlphaB_cRepeatUnits.clear()
                    self.AlphaB_width.clear()
                    self.AlphaB_height.clear()

                    self.AlphaB_updateReadOnlyState(self.AlphaB_aParam, False)    
                    self.AlphaB_updateReadOnlyState(self.AlphaB_bParam, False)             
                    self.AlphaB_updateReadOnlyState(self.AlphaB_cParam, False) 
                    self.AlphaB_aParam.setStyleSheet("background-color: white;") 
                    self.AlphaB_bParam.setStyleSheet("background-color: white;") 
                    self.AlphaB_cParam.setStyleSheet("background-color: white;")  

                    self.AlphaB_updateReadOnlyState(self.AlphaB_width, True)             
                    self.AlphaB_updateReadOnlyState(self.AlphaB_height, True)   
                    self.AlphaB_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.AlphaB_updateReadOnlyState(self.AlphaB_bRepeatUnits, False)     
                    self.AlphaB_updateReadOnlyState(self.AlphaB_aRepeatUnits, False)   
                    self.AlphaB_updateReadOnlyState(self.AlphaB_cRepeatUnits, False)    
                    self.AlphaB_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaB_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaB_cRepeatUnits.setStyleSheet("background-color: white;")    
    
                elif model == "Hexagon cross-section shape":
                    self.AlphaB_setupModificationsSection(self.AlphaB_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaB_aParam.clear()
                    self.AlphaB_bParam.clear()
                    self.AlphaB_cParam.clear()
                    self.AlphaB_aRepeatUnits.clear()
                    self.AlphaB_bRepeatUnits.clear()
                    self.AlphaB_cRepeatUnits.clear()
                    self.AlphaB_width.clear()
                    self.AlphaB_height.clear()

                    self.AlphaB_updateReadOnlyState(self.AlphaB_aParam, False)    
                    self.AlphaB_updateReadOnlyState(self.AlphaB_bParam, False)             
                    self.AlphaB_updateReadOnlyState(self.AlphaB_cParam, False)  
                    self.AlphaB_aParam.setStyleSheet("background-color: white;") 
                    self.AlphaB_bParam.setStyleSheet("background-color: white;") 
                    self.AlphaB_cParam.setStyleSheet("background-color: white;")                     

                    self.AlphaB_updateReadOnlyState(self.AlphaB_width,  False)             
                    self.AlphaB_updateReadOnlyState(self.AlphaB_height, False)   
                    self.AlphaB_width.setStyleSheet("background-color:  white;") 
                    self.AlphaB_height.setStyleSheet("background-color: white;")     


                    self.AlphaB_updateReadOnlyState(self.AlphaB_bRepeatUnits, True)     
                    self.AlphaB_updateReadOnlyState(self.AlphaB_aRepeatUnits, True)   
                    self.AlphaB_updateReadOnlyState(self.AlphaB_cRepeatUnits, False)    
                    self.AlphaB_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaB_cRepeatUnits.setStyleSheet("background-color: white;")       


            else:
                # Hide modification options if not the specific model and type
                for i in reversed(range(self.AlphaB_modificationsLayout.count())): 
                    self.AlphaB_modificationsLayout.itemAt(i).widget().setParent(None)

    def AlphaB_setupModificationsSection(self, AlphaB_layout, AlphaB_font):
        # Add a layout for modifications if it doesn't exist
        if not hasattr(self, 'AlphaB_modificationsLayout'):
            self.AlphaB_modificationsLayout = QHBoxLayout()
            self.AlphaB_deacetylationRadio = QRadioButton("Deacetylation")
            self.AlphaB_carboxylationRadio = QRadioButton("Carboxylation")
            self.AlphaB_noModRadio = QRadioButton("No Modification")
            self.AlphaB_deacetylationRadio.setFont(AlphaB_font)
            self.AlphaB_carboxylationRadio.setFont(AlphaB_font)
            self.AlphaB_noModRadio.setFont(AlphaB_font)
            self.AlphaB_modificationsLayout.addWidget(self.AlphaB_deacetylationRadio)
            self.AlphaB_modificationsLayout.addWidget(self.AlphaB_carboxylationRadio)
            self.AlphaB_modificationsLayout.addWidget(self.AlphaB_noModRadio)
            AlphaB_layout.addLayout(self.AlphaB_modificationsLayout)

            # Setup Inputs and Connections
            self.AlphaB_setupModificationInputs()
            AlphaB_layout.addWidget(self.AlphaB_modificationInputsWidget)
            self.AlphaB_deacetylationRadio.toggled.connect(lambda checked: self.AlphaB_updateModificationInputs("Deacetylation", checked))
            self.AlphaB_carboxylationRadio.toggled.connect(lambda checked: self.AlphaB_updateModificationInputs("Carboxylation", checked))
            self.AlphaB_noModRadio.toggled.connect(lambda checked: self.AlphaB_updateModificationInputs("None", checked))


            # Generate Structure Button
            AlphaB_Font = QFont("Arial", 13)
            self.AlphaB_invokeButton = QPushButton("Generate Structure")
            self.AlphaB_invokeButton.setFont(AlphaB_Font)
            self.AlphaB_invokeButton.setVisible(False)  # Initially hidden
            self.AlphaB_invokeButton.clicked.connect(self.AlphaB_invokeScript)  # Connect to invoke script logic
            AlphaB_layout.addWidget(self.AlphaB_invokeButton)
            
    def AlphaB_setupModificationInputs(self):
        self.AlphaB_modificationInputsWidget = QWidget()
        AlphaB_modification_mainLayout = QVBoxLayout(self.AlphaB_modificationInputsWidget)
        AlphaB_font = QFont("Arial", 13)
        AlphaB_font_Sel = QFont("Arial", 12)
  
        # Degree of deacetylation input
        AlphaB_deacetyl_plane_layout = QHBoxLayout()
        self.AlphaB_deacetyl_planeLabel = QLabel("Please select α-chitin plane for deacetylation modifications:")
        self.AlphaB_deacetyl_planeLabel.setFont(AlphaB_font)
        self.AlphaB_deacetyl_planeComboBox = QComboBox()
        self.AlphaB_deacetyl_planeComboBox.setFont(AlphaB_font_Sel)
        self.AlphaB_deacetyl_planeComboBox.addItems([ "Select here",
                                                      "Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", 
                                                      "Inside the α-chitin"])
        AlphaB_deacetyl_plane_layout.addWidget(self.AlphaB_deacetyl_planeLabel)
        AlphaB_deacetyl_plane_layout.addWidget(self.AlphaB_deacetyl_planeComboBox)
        AlphaB_modification_mainLayout.addLayout(AlphaB_deacetyl_plane_layout)
 

        # Degree of carboxylation input
        AlphaB_carboxylation_plane_layout = QHBoxLayout()
        self.AlphaB_carboxylation_planeLabel = QLabel("Please select α-chitin plane for carboxylation modifications:")
        self.AlphaB_carboxylation_planeLabel.setFont(AlphaB_font)
        self.AlphaB_carboxylation_planeComboBox = QComboBox()
        self.AlphaB_carboxylation_planeComboBox.setFont(AlphaB_font_Sel)
        self.AlphaB_carboxylation_planeComboBox.addItems([ "Select here",
                                                      "Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)"])
        AlphaB_carboxylation_plane_layout.addWidget(self.AlphaB_carboxylation_planeLabel)
        AlphaB_carboxylation_plane_layout.addWidget(self.AlphaB_carboxylation_planeComboBox)
        AlphaB_modification_mainLayout.addLayout(AlphaB_carboxylation_plane_layout)


        ##dda and pH for deacetylations
        AlphaB_dda_pH_layout = QHBoxLayout()
        self.AlphaB_dda_Label = QLabel("Degree of deacetylation (≥0 and <1):")
        #self.AlphaB_dda_Label.setFixedSize(QSize(500, 40))
        self.AlphaB_dda_Label.setFont(AlphaB_font)
        self.AlphaB_dda_LineEdit = QLineEdit()
        self.AlphaB_dda_LineEdit.setFont(AlphaB_font)
        self.AlphaB_dda_LineEdit.setFixedSize(QSize(200, 40))

        # pH input (specific to Deacetylation)
        self.AlphaB_dda_pHLabel = QLabel("pH level of α-chitin structure (>0 and <14):")
        self.AlphaB_dda_pHLabel.setFont(AlphaB_font)
        #self.AlphaB_dda_pHLabel.addSpacing(150)
        self.AlphaB_dda_pHLineEdit = QLineEdit()
        self.AlphaB_dda_pHLineEdit.setFont(AlphaB_font)
        self.AlphaB_dda_pHLineEdit.setFixedSize(QSize(200, 40))

        AlphaB_dda_pH_layout.addWidget(self.AlphaB_dda_Label)
        AlphaB_dda_pH_layout.addWidget(self.AlphaB_dda_LineEdit)
        AlphaB_dda_pH_layout.addSpacing(100)  ##space between dda and pH
        AlphaB_dda_pH_layout.addWidget(self.AlphaB_dda_pHLabel)
        AlphaB_dda_pH_layout.addWidget(self.AlphaB_dda_pHLineEdit)
        AlphaB_modification_mainLayout.addLayout(AlphaB_dda_pH_layout)

        # Degree of carboxylation input
        AlphaB_carboxylation_pH_layout = QHBoxLayout()
        self.AlphaB_carboxylation_Label = QLabel("Degree of carboxylation (unit: mmol/g):")
        self.AlphaB_carboxylation_Label.setFont(AlphaB_font)
        self.AlphaB_carboxylation_LineEdit = QLineEdit()
        self.AlphaB_carboxylation_LineEdit.setFont(AlphaB_font)
        self.AlphaB_carboxylation_LineEdit.setFixedSize(QSize(200, 40))
        self.AlphaB_carboxylation_pHLabel = QLabel("pH level of α-chitin structure (>0 and <14):")
        self.AlphaB_carboxylation_pHLabel.setFont(AlphaB_font)
        self.AlphaB_carboxylation_pHLineEdit = QLineEdit()
        self.AlphaB_carboxylation_pHLineEdit.setFont(AlphaB_font)
        self.AlphaB_carboxylation_pHLineEdit.setFixedSize(QSize(200, 40))
        AlphaB_carboxylation_pH_layout.addWidget(self.AlphaB_carboxylation_Label)
        AlphaB_carboxylation_pH_layout.addWidget(self.AlphaB_carboxylation_LineEdit)
        AlphaB_carboxylation_pH_layout.addSpacing(100)  ##space between dda and pH
        AlphaB_carboxylation_pH_layout.addWidget(self.AlphaB_carboxylation_pHLabel)
        AlphaB_carboxylation_pH_layout.addWidget(self.AlphaB_carboxylation_pHLineEdit)
        AlphaB_modification_mainLayout.addLayout(AlphaB_carboxylation_pH_layout)


        AlphaB_ForceField_layout = QHBoxLayout()
        self.AlphaB_ForceFieldTypeLabel = QLabel("Atomistic Simulation Force Field:")
        self.AlphaB_ForceFieldTypeLabel.setFont(AlphaB_font)
        self.AlphaB_ForceFieldTypeselector = QComboBox()
        self.AlphaB_ForceFieldTypeselector.setFont(AlphaB_font)
        #self.AlphaB_ForceFieldTypeLabel.setFixedSize(550, 60)  # Width of 200 pixels and height of 20 pixels
        self.AlphaB_ForceFieldTypeselector.addItem("Please select the force field for atomistic simulations", True)
        self.AlphaB_ForceFieldTypeselector.addItem("CHARMM36 Infinite Chain Model", False)
        self.AlphaB_ForceFieldTypeselector.addItem("CHARMM36 Finite Chain Model", False)
        self.AlphaB_ForceFieldTypeselector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.AlphaB_ForceFieldTypeselector.addItem("GLYCAM06 Finite Chain Model", False)
        AlphaB_ForceField_layout.addWidget(self.AlphaB_ForceFieldTypeLabel)
        AlphaB_ForceField_layout.addWidget(self.AlphaB_ForceFieldTypeselector)
        AlphaB_modification_mainLayout.addLayout(AlphaB_ForceField_layout)

        self.AlphaB_deacetyl_planeLabel.setVisible(False)
        self.AlphaB_deacetyl_planeComboBox.setVisible(False)
        self.AlphaB_carboxylation_planeLabel.setVisible(False)
        self.AlphaB_carboxylation_planeComboBox.setVisible(False)


        self.AlphaB_dda_Label.setVisible(False)
        self.AlphaB_dda_LineEdit.setVisible(False)
        self.AlphaB_dda_pHLabel.setVisible(False)
        self.AlphaB_dda_pHLineEdit.setVisible(False)

        self.AlphaB_carboxylation_Label.setVisible(False)
        self.AlphaB_carboxylation_LineEdit.setVisible(False)
        self.AlphaB_carboxylation_pHLabel.setVisible(False)
        self.AlphaB_carboxylation_pHLineEdit.setVisible(False)


        self.AlphaB_ForceFieldTypeLabel.setVisible(False)
        self.AlphaB_ForceFieldTypeselector.setVisible(False)

        self.AlphaB_deacetyl_planeComboBox.currentIndexChanged.connect(
        lambda: self.AlphaB_manageVisibilityAndStylesForDeacetylation(
            self.AlphaB_deacetyl_planeComboBox.currentText()
           )
        )
        self.AlphaB_modificationInputsWidget.setLayout(AlphaB_modification_mainLayout)

        self.AlphaB_carboxylation_planeComboBox.currentIndexChanged.connect(
        lambda: self.AlphaB_manageVisibilityAndStylesForCarboxylation(
            self.AlphaB_carboxylation_planeComboBox.currentText()
           )
        )
        self.AlphaB_modificationInputsWidget.setLayout(AlphaB_modification_mainLayout)


    def AlphaB_updateModificationInputs(self, AlphaB_modificationType, checked):
        if checked:
            if  AlphaB_modificationType == "Deacetylation":
                AlphaB_deacetylation_plane_selection = self.AlphaB_deacetyl_planeComboBox.currentText()
                self.AlphaB_manageVisibilityAndStylesForDeacetylation(AlphaB_deacetylation_plane_selection)

            elif AlphaB_modificationType == "Carboxylation":
                AlphaB_carboxylation_plane_selection = self.AlphaB_carboxylation_planeComboBox.currentText()
                self.AlphaB_manageVisibilityAndStylesForCarboxylation(AlphaB_carboxylation_plane_selection)
            elif  AlphaB_modificationType == "None":
                self.AlphaB_dda_Label.setVisible(False)
                self.AlphaB_dda_LineEdit.setVisible(False)
                self.AlphaB_carboxylation_Label.setVisible(False)
                self.AlphaB_carboxylation_LineEdit.setVisible(False)

                self.AlphaB_carboxylation_pHLabel.setVisible(False)
                self.AlphaB_carboxylation_pHLineEdit.setVisible(False)
                self.AlphaB_dda_pHLabel.setVisible(False)
                self.AlphaB_dda_pHLineEdit.setVisible(False)

    
                self.AlphaB_deacetyl_planeLabel.setVisible(False)
                self.AlphaB_deacetyl_planeComboBox.setVisible(False)
                self.AlphaB_carboxylation_planeLabel.setVisible(False)
                self.AlphaB_carboxylation_planeComboBox.setVisible(False)


                self.AlphaB_ForceFieldTypeLabel.setVisible(True)
                self.AlphaB_ForceFieldTypeselector.setVisible(True)
                self.AlphaB_invokeButton.setVisible(True)  # Show "Generate Structure" button
        else:
            self.AlphaB_dda_Label.setVisible(False)
            self.AlphaB_dda_LineEdit.setVisible(False)
            self.AlphaB_carboxylation_Label.setVisible(False)
            self.AlphaB_carboxylation_LineEdit.setVisible(False)


            self.AlphaB_dda_pHLabel.setVisible(False)
            self.AlphaB_dda_pHLineEdit.setVisible(False)
            self.AlphaB_carboxylation_pHLabel.setVisible(False)
            self.AlphaB_carboxylation_pHLineEdit.setVisible(False)


            self.AlphaB_deacetyl_planeLabel.setVisible(False)
            self.AlphaB_deacetyl_planeComboBox.setVisible(False)
            self.AlphaB_carboxylation_planeLabel.setVisible(False)
            self.AlphaB_carboxylation_planeComboBox.setVisible(False)


            self.AlphaB_ForceFieldTypeLabel.setVisible(False)
            self.AlphaB_ForceFieldTypeselector.setVisible(False)
            self.AlphaB_invokeButton.setVisible(False)  

    def AlphaB_manageVisibilityAndStylesForDeacetylation(self, AlphaB_deacetylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.AlphaB_deacetyl_planeLabel.setVisible(True)
        self.AlphaB_deacetyl_planeComboBox.setVisible(True)
        self.AlphaB_carboxylation_planeLabel.setVisible(False)
        self.AlphaB_carboxylation_planeComboBox.setVisible(False)
        self.AlphaB_dda_Label.setVisible(True)
        self.AlphaB_dda_LineEdit.setVisible(True)
        self.AlphaB_dda_pHLabel.setVisible(True)
        self.AlphaB_dda_pHLineEdit.setVisible(True)
        self.AlphaB_carboxylation_Label.setVisible(False)
        self.AlphaB_carboxylation_LineEdit.setVisible(False)
        self.AlphaB_carboxylation_pHLabel.setVisible(False)
        self.AlphaB_carboxylation_pHLineEdit.setVisible(False)
        self.AlphaB_ForceFieldTypeLabel.setVisible(True)
        self.AlphaB_ForceFieldTypeselector.setVisible(True)
        self.AlphaB_invokeButton.setVisible(True)
    
        if AlphaB_deacetylation_plane_selection in ["Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", ]:
            self.AlphaB_dda_LineEdit.setReadOnly(False)
            self.AlphaB_dda_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaB_dda_pHLineEdit.setReadOnly(False)
            self.AlphaB_dda_pHLineEdit.setStyleSheet("background-color: white;")
        elif AlphaB_deacetylation_plane_selection == "Inside the α-chitin":
            self.AlphaB_dda_LineEdit.setReadOnly(False)
            self.AlphaB_dda_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaB_dda_pHLineEdit.setReadOnly(True)
            self.AlphaB_dda_pHLineEdit.setStyleSheet("background-color: #D3D3D3;")



    def AlphaB_manageVisibilityAndStylesForCarboxylation(self, AlphaB_carboxylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.AlphaB_deacetyl_planeLabel.setVisible(False)
        self.AlphaB_deacetyl_planeComboBox.setVisible(False)
        self.AlphaB_carboxylation_planeLabel.setVisible(True)
        self.AlphaB_carboxylation_planeComboBox.setVisible(True)
        self.AlphaB_dda_Label.setVisible(False)
        self.AlphaB_dda_LineEdit.setVisible(False)
        self.AlphaB_dda_pHLabel.setVisible(False)
        self.AlphaB_dda_pHLineEdit.setVisible(False)
        self.AlphaB_carboxylation_Label.setVisible(True)
        self.AlphaB_carboxylation_LineEdit.setVisible(True)
        self.AlphaB_carboxylation_pHLabel.setVisible(True)
        self.AlphaB_carboxylation_pHLineEdit.setVisible(True)
        self.AlphaB_ForceFieldTypeLabel.setVisible(True)
        self.AlphaB_ForceFieldTypeselector.setVisible(True)
        self.AlphaB_invokeButton.setVisible(True)
    
        if AlphaB_carboxylation_plane_selection in ["Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", ]:
            self.AlphaB_carboxylation_LineEdit.setReadOnly(False)
            self.AlphaB_carboxylation_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaB_carboxylation_pHLineEdit.setReadOnly(False)
            self.AlphaB_carboxylation_pHLineEdit.setStyleSheet("background-color: white;")



    def AlphaB_invokeScript(self):
            model = self.AlphaB_ComboBox.currentText()
            
            if self.AlphaB_Experimental.isChecked():
                #self.AlphaB_ForceFieldTypeselector.setCurrentIndex(0)
                if self.AlphaB_noModRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                    AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                    AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                    AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                    if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and AlphaB_ForceFieldType:
                        QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                        return
                    AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaB_script_name = "alpha_chitin_B_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_B_finite_experiment.py"
                        AlphaB_shape_name = "rectangle"
                        AlphaB_folder_name = "charmm36"
                    elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaB_script_name = "alpha_chitin_B_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_B_finite_experiment.py"
                        AlphaB_shape_name = "rectangle"
                        AlphaB_folder_name = "glycam06"
                    try:    
                        AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B", AlphaB_shape_name, AlphaB_folder_name, AlphaB_script_name)
                        AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit]
                        AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaB_result.returncode == 0:
                            AlphaB_output = AlphaB_result.stdout.strip()
                            self.AlphaB_exp_rectangle_nochemical_Popup(AlphaB_output)
                            self.AlphaB_exp_rectangle_nochemical_Topology()                    
                        else:
                            QMessageBox.warning(self, "Generation Failed")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                elif self.AlphaB_noModRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaB_width  = self.AlphaB_width.text()  
                    AlphaB_height = self.AlphaB_height.text()
                    AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                    AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                    if not AlphaB_c_unit and AlphaB_width and AlphaB_height and AlphaB_ForceFieldType:
                        QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                        return
                    
                    AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        AlphaB_shape_name = "hexagon"
                        AlphaB_folder_name = "charmm36"
                    elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        AlphaB_shape_name = "hexagon"
                        AlphaB_folder_name = "glycam06"
                    try:    
                        AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B", AlphaB_shape_name, AlphaB_folder_name, AlphaB_script_name)
                        AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit,  AlphaB_height, AlphaB_width ]
                        AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaB_result.returncode == 0:
                            AlphaB_output = AlphaB_result.stdout.strip()
                            self.AlphaB_exp_hexagon_nochemical_Popup(AlphaB_output)
                            self.AlphaB_exp_hexagon_nochemical_Topology()                    
                        else:
                            error_message = AlphaB_result.stderr.strip() 
                            QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                #deacetylation  deacetylationRadio
                elif self.AlphaB_deacetylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaB_deacetylation_plane_selection = self.AlphaB_deacetyl_planeComboBox.currentText()

                    if  AlphaB_deacetylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")


                    elif AlphaB_deacetylation_plane_selection == "Two (010) planes":

                        ##deacetylation parameter 
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaB_deacetylation_plane_selection == "Single (010) plane":

                        ##deacetylation parameter 
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaB_deacetylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaB_deacetylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                  
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_deacetylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_deacetylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)": 
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")





                    elif AlphaB_deacetylation_plane_selection == "Inside the α-chitin":

                        ##deacetylation parameter 
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-inside-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-inside-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #AlphaB_folder_name = "charmm36"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_inside_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_inside_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                #----------carboxylation------------rectangle-----experimental----- crystallographic parameter-----------
                elif self.AlphaB_carboxylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaB_carboxylation_plane_selection = self.AlphaB_carboxylation_planeComboBox.currentText()

                    ###double plane modifications
                    if  AlphaB_carboxylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")
                    elif AlphaB_carboxylation_plane_selection == "Two (010) planes":

                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaB_carboxylation_plane_selection == "Single (010) plane":

                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaB_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-infinite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)": 
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaB_shape_name = "rectangle"
                            #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaB_shape_name = "rectangle"
                            #    AlphaB_folder_name = "glycam06"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



               
                ######-#####################----------------------hexagonal-deacetylation----------------------##########################
                elif self.AlphaB_deacetylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaB_deacetylation_plane_selection = self.AlphaB_deacetyl_planeComboBox.currentText()
                    if  AlphaB_deacetylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support hexagonal cross-section shape.")       
                    ###single plane modifications
                    elif AlphaB_deacetylation_plane_selection == "Single (010) plane":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ###two 010 plane modifications
                    if AlphaB_deacetylation_plane_selection == "Two (010) planes":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaB_deacetylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    if AlphaB_deacetylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaB_deacetylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaB_deacetylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ####---------------hexagonal-shape carboxylation ----------- experimental------- 
                # 
                elif self.AlphaB_carboxylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaB_carboxylation_plane_selection = self.AlphaB_carboxylation_planeComboBox.currentText()
        

                    ###single plane modifications
                    if  AlphaB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane carboxylated chitin doesn't support hexagonal cross-section shape.")       

                    elif AlphaB_carboxylation_plane_selection == "Single (010) plane":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaB_carboxylation_plane_selection == "Two (010) planes":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaB_carboxylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")





            ###user-defined crystallographic parameters
            elif self.AlphaB_UserDefined.isChecked():
                if self.AlphaB_noModRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaB_a_parm = self.AlphaB_aParam.text()
                    AlphaB_b_parm = self.AlphaB_bParam.text()
                    AlphaB_c_parm = self.AlphaB_cParam.text()
                    AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                    AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                    AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                    AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                    if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm  and AlphaB_a_unit and AlphaB_b_unit and AlphaB_c_unit and AlphaB_ForceFieldType: 
                        QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                        return
                    
                    AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaB_script_name = "alpha_chitin_B_infinite_ud.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_B_finite_ud.py"
                        AlphaB_ud_folder = "user-defined"
                        AlphaB_shape_name = "rectangle"
                        AlphaB_folder_name = "charmm36"
                    elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaB_script_name = "alpha_chitin_B_infinite_ud.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_B_finite_ud.py"
                        AlphaB_ud_folder = "user-defined"
                        AlphaB_shape_name = "rectangle"
                        AlphaB_folder_name = "glycam06"

                    try:    
                        AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_folder_name, AlphaB_script_name)
                        AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit,  AlphaB_c_unit]
                        AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaB_result.returncode == 0:
                            AlphaB_output = AlphaB_result.stdout.strip()
                            self.AlphaB_exp_rectangle_nochemical_Popup(AlphaB_output)
                            self.AlphaB_exp_rectangle_nochemical_Topology()                    
                        else:
                            QMessageBox.warning(self, "Generation Failed")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                elif self.AlphaB_noModRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaB_a_parm = self.AlphaB_aParam.text()
                    AlphaB_b_parm = self.AlphaB_bParam.text()
                    AlphaB_c_parm = self.AlphaB_cParam.text()
                    AlphaB_width  = self.AlphaB_width.text()  
                    AlphaB_height = self.AlphaB_height.text()
                    AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                    AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                    if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm  and AlphaB_c_unit and AlphaB_width and AlphaB_height and AlphaB_ForceFieldType: 
                        QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                        return
                    
                    AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaB_script_name = "alpha_chitin_B_infinite_ud.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_B_finite_ud.py"
                        AlphaB_ud_folder = "user-defined"
                        AlphaB_shape_name = "hexagon"
                        AlphaB_folder_name = "charmm36"
                    elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaB_script_name = "alpha_chitin_B_infinite_ud.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_B_finite_ud.py"
                        AlphaB_ud_folder = "user-defined"
                        AlphaB_shape_name = "hexagon"
                        AlphaB_folder_name = "glycam06"

                    try:    
                        AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_folder_name, AlphaB_script_name)
                        AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_c_unit, AlphaB_height, AlphaB_width]
                        AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaB_result.returncode == 0:
                            AlphaB_output = AlphaB_result.stdout.strip()
                            self.AlphaB_exp_hexagon_nochemical_Popup(AlphaB_output)
                            self.AlphaB_exp_hexagon_nochemical_Topology()                    
                        else:
                            error_message = AlphaB_result.stderr.strip() 
                            QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ###deacetylation

                ######-#####################----------------------user-defined- Rectangle-deacetylation----------------------##########################


                elif self.AlphaB_deacetylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaB_deacetylation_plane_selection = self.AlphaB_deacetyl_planeComboBox.currentText()


                    if  AlphaB_deacetylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")

                    if AlphaB_deacetylation_plane_selection == "Two (010) planes":

                        ##deacetylation parameter 
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()


                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_deacetylation_plane_selection == "Single (010) plane":

                        ##deacetylation parameter 
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()


                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_ud_folder, AlphaB_shape_name,AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaB_deacetylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()


                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_ud_folder, AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    elif AlphaB_deacetylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()


                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-2-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_ud_folder, AlphaB_shape_name,AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaB_deacetylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()


                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaB_deacetylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()


                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_ud_folder, AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaB_deacetylation_plane_selection == "Inside the α-chitin":
                        ##deacetylation parameter 
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-inside-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-inside-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                            AlphaB_folder_name = "charmm36"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_ud_folder, AlphaB_shape_name,  AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, dda]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_deacetylation_inside_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_deacetylation_inside_Topology()                    
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                #####----------------------------------user-defined rectangle carboxylation --------------------
                elif self.AlphaB_carboxylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaB_carboxylation_plane_selection = self.AlphaB_carboxylation_planeComboBox.currentText()

                    if  AlphaB_carboxylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane carboxylated chitin doesn't support rectangle cross-section shape.")

                    elif AlphaB_carboxylation_plane_selection == "Two (010) planes":

                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Single (010) plane":

                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaB_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-2-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
                        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaB_ud_folder = "user-defined"
                            AlphaB_shape_name = "rectangle"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "UnsupporteOperation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaB_shape_name = "rectangle"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_ud_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path,  AlphaB_a_parm, AlphaB_b_parm, AlphaB_c_parm, AlphaB_a_unit, AlphaB_b_unit, AlphaB_c_unit, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_exp_rectangle_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                ####user-defined-hexagonal deacetylation chitin 
                elif self.AlphaB_deacetylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaB_deacetylation_plane_selection = self.AlphaB_deacetyl_planeComboBox.currentText()
                    if  AlphaB_deacetylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support hexagonal cross-section shape.")       
                    elif AlphaB_deacetylation_plane_selection == "Single (010) plane":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaB_folder="user-defined"
                            AlphaB_shape_name = "hexagon"

                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ###two 010 plane modifications
                    if AlphaB_deacetylation_plane_selection == "Two (010) planes":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()                        
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
    
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaB_shape_name = "hexagon"
                            AlphaB_folder="user-defined"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaB_deacetylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaB_shape_name = "hexagon"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    if AlphaB_deacetylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text() 
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaB_shape_name = "hexagon"
                            AlphaB_folder="user-defined"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaB_deacetylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaB_shape_name = "hexagon"
                            AlphaB_folder="user-defined"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaB_deacetylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        dda = self.AlphaB_dda_LineEdit.text()  
                        ph = self.AlphaB_dda_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and dda and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaB_shape_name = "hexagon"
                            AlphaB_folder="user-defined"
                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-deacetylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, dda, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_deacetylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ######-#####################--------------user-defined--------Hexagon-carboxylation----------------------##########################
                elif self.AlphaB_carboxylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaB_carboxylation_plane_selection = self.AlphaB_carboxylation_planeComboBox.currentText()

                    if  AlphaB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane carboxylated chitin doesn't support hexagonal cross-section shape.")       
                    ###single plane modifications
                    elif AlphaB_carboxylation_plane_selection == "Single (010) plane":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaB_folder="user-defined"
                            AlphaB_shape_name = "hexagon"

                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaB_carboxylation_plane_selection == "Two (010) planes":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaB_folder="user-defined"
                            AlphaB_shape_name = "hexagon"

                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaB_carboxylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaB_folder="user-defined"
                            AlphaB_shape_name = "hexagon"

                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaB_carboxylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaB_folder="user-defined"
                            AlphaB_shape_name = "hexagon"

                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaB_carboxylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaB_folder="user-defined"
                            AlphaB_shape_name = "hexagon"

                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    elif AlphaB_carboxylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaB_a_parm = self.AlphaB_aParam.text()
                        AlphaB_b_parm = self.AlphaB_bParam.text()
                        AlphaB_c_parm = self.AlphaB_cParam.text()
                        AlphaB_width  = self.AlphaB_width.text()  
                        AlphaB_height = self.AlphaB_height.text()
                        AlphaB_c_unit = self.AlphaB_cRepeatUnits.text()
                        carboxylation = self.AlphaB_carboxylation_LineEdit.text()  
                        ph = self.AlphaB_carboxylation_pHLineEdit.text()
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()

                        if not AlphaB_a_parm and AlphaB_b_parm and AlphaB_c_parm and AlphaB_c_unit and AlphaB_a_unit and AlphaB_b_unit and carboxylation and ph and AlphaB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
                        AlphaB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaB_folder="user-defined"
                            AlphaB_shape_name = "hexagon"

                        elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaB_script_name = "infinite_experiment.py" if "Infinite" in AlphaB_ForceFieldType else "finite_experiment.py"
                        #    AlphaB_shape_name = "hexagon"
                        #    AlphaB_folder_name = "glycam06"
                        try:    
                            AlphaB_script_path = os.path.join(AlphaB_base_dir, "function", "alpha-chitin-B-carboxylation", AlphaB_folder, AlphaB_shape_name, AlphaB_script_name)
                            AlphaB_command = ["python", AlphaB_script_path, AlphaB_a_parm, AlphaB_b_parm , AlphaB_c_parm , AlphaB_c_unit, AlphaB_height, AlphaB_width, carboxylation, ph]
                            AlphaB_result = subprocess.run(AlphaB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaB_result.returncode == 0:
                                AlphaB_output = AlphaB_result.stdout.strip()
                                self.AlphaB_hexagon_carboxylation_Popup(AlphaB_output)
                                self.AlphaB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

##alpha-chitin-B rectangle experimental data no modification windows output
    def AlphaB_exp_rectangle_nochemical_Topology(self):  #native chitin topology
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaB_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "B-configuration"
        AlphaB_a_unit = self.AlphaB_aRepeatUnits.text()
        AlphaB_b_unit = self.AlphaB_bRepeatUnits.text()
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path,AlphaB_a_unit, AlphaB_b_unit]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaB_exp_rectangle_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Native α-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Native α-chitin Topology Generation Failed")

    def AlphaB_exp_rectangle_nochemical_Popup(self, AlphaB_rectangle_output):
        AlphaB_rectangle_output = f"Native α-chitin-B Generated Successfully"
        QMessageBox.information(self, "Build Result", AlphaB_rectangle_output)

    def AlphaB_exp_rectangle_nochemical_Topology_Popup(self):
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Native α-chitin-B Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##alpha-chitin-B rectangle  data deacetylation windows output
    def AlphaB_exp_rectangle_deacetylation_Topology(self):  #native chitin topology
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaB_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "B-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaB_exp_rectangle_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-B Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-B Topology Generation Failed")

    def AlphaB_exp_rectangle_deacetylation_Popup(self, AlphaB_rectangle_output):
        lines = [line.strip() for line in AlphaB_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = float(parts[0].split(':')[1].strip())   
        ph = float(parts[1].split(':')[1].strip())   
        units = float(parts[2].split(':')[1].strip())  
        message = f"Deacetylated α-chitin-B was Generated Successfully!\nActual DDA: {dda}\nActual pH: {ph}\nDeprotonated units: {units}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaB_exp_rectangle_deacetylation_Topology_Popup(self):
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-B Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##alpha-chitin-B hexagon experimental data no modification windows output
    def AlphaB_exp_hexagon_nochemical_Topology(self):  #native chitin topology
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaB_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "B-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaB_exp_hexagon_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Native α-chitin-B Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Native α-chitin-B Topology Generation Failed")


    def AlphaB_exp_hexagon_nochemical_Popup(self, AlphaB_hexagon_output):
        AlphaB_hexagon_output = f"Native α-chitin-B Generated Successfully"
        QMessageBox.information(self, "Build Result", AlphaB_hexagon_output)


    def AlphaB_exp_hexagon_nochemical_Topology_Popup(self):
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Native α-chitin-B Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##alpha-chitin-B rectangle deacetylation ---inside ----- windows output
    def AlphaB_exp_rectangle_deacetylation_inside_Topology(self):  #native chitin topology
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaB_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "B-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaB_exp_rectangle_deacetylation_inside_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-B Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-B Topology Generation Failed")

    def AlphaB_exp_rectangle_deacetylation_inside_Popup(self, AlphaB_rectangle_output):
        lines = [line.strip() for line in AlphaB_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = parts[0].split(':')[1].strip()
        units = parts[1].split(':')[1].strip()
        message = f"Deacetylated α-chitin-B was Generated Successfully!\nActual DDA: {dda}\nDeacetylation units: {units}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaB_exp_rectangle_deacetylation_inside_Topology_Popup(self):
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-B Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##alpha-chitin-B hexgonal deacetylation windows output
    def AlphaB_hexagon_deacetylation_Topology(self):  #native chitin topology
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaB_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "B-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaB_hexagon_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-B Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-B Topology Generation Failed")

    def AlphaB_hexagon_deacetylation_Popup(self, AlphaB_hexagon_output):
        lines = [line.strip() for line in AlphaB_hexagon_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = float(parts[0].split(':')[1].strip())   
        ph = float(parts[1].split(':')[1].strip())   
        units = float(parts[2].split(':')[1].strip())   
        dda_formatted = "{:.2f}".format(dda)
        ph_formatted = "{:.2f}".format(ph)
        units_formatted = "{:.2f}".format(units)
        message = f"Deacetylated α-chitin-B was Generated Successfully!\nActual DDA: {dda_formatted}\nActual pH: {ph_formatted}\nDeprotonated units: {units_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaB_hexagon_deacetylation_Topology_Popup(self):
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-B Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##alpha-chitin-B carboxylation (rectangle-cross-section) windows output
    def AlphaB_exp_rectangle_carboxylation_Topology(self):  #native chitin topology
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaB_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "B-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaB_exp_rectangle_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated α-chitin-B Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated α-chitin-B Topology Generation Failed")

    def AlphaB_exp_rectangle_carboxylation_Popup(self, AlphaB_rectangle_output):
        lines = [line.strip() for line in AlphaB_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated α-chitin-B was Generated Successfully!\nActual carboxylation: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaB_exp_rectangle_carboxylation_Topology_Popup(self):
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated α-chitin-B Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)





##alpha-chitin-B carboxylation (hexagonal-cross-section) windows output
    def AlphaB_hexagon_carboxylation_Topology(self):  #native chitin topology
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaB_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "B-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaB_hexagon_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated α-chitin-B Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated α-chitin-B Topology Generation Failed")

    def AlphaB_hexagon_carboxylation_Popup(self, AlphaB_hexagon_output):
        lines = [line.strip() for line in AlphaB_hexagon_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated α-chitin-B was Generated Successfully!\nActual carboxylation: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaB_hexagon_carboxylation_Topology_Popup(self):
        AlphaB_ForceFieldType = self.AlphaB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated α-chitin-B Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


#################-----------------------------------alpha-chitin-AB
    def setupAlphaABOptions(self):
            self.AlphaABOptions = QWidget()
            self.AlphaStackedWidget.addWidget(self.AlphaABOptions) 
            AlphaAB_layout = QVBoxLayout(self.AlphaABOptions)
            AlphaAB_layout.setAlignment(Qt.AlignTop)
            AlphaAB_Font = QFont("Arial", 13)
    
            # Radio buttons setup
            self.AlphaAB_radioGroup = QGroupBox("Parameter Type")
            self.AlphaAB_radioGroup.setAlignment(Qt.AlignTop)
            AlphaAB_radioLayout = QHBoxLayout()
            self.AlphaAB_Experimental = QRadioButton("Crystallographic Parameters from X-Ray Diffraction Experiments")
            self.AlphaAB_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")
            self.AlphaAB_Experimental.setFont(AlphaAB_Font)
            self.AlphaAB_UserDefined.setFont(AlphaAB_Font)
            AlphaAB_radioLayout.addWidget(self.AlphaAB_Experimental)
            AlphaAB_radioLayout.addWidget(self.AlphaAB_UserDefined)
            AlphaAB_layout.addLayout(AlphaAB_radioLayout)
    
            # Combo box setup
            self.AlphaAB_ComboBox = QComboBox(self.AlphaABOptions)
            self.AlphaAB_ComboBox.addItem("Please select the crystallite shape")
            self.AlphaAB_ComboBox.addItems(["Rectangle cross-section shape", "Hexagon cross-section shape"])
            self.AlphaAB_ComboBox.setVisible(False)
            AlphaAB_layout.addWidget(self.AlphaAB_ComboBox)
    
            # Connecting radio buttons to toggle visibility
            self.AlphaAB_Experimental.toggled.connect(self.AlphaAB_Visibility)
            self.AlphaAB_UserDefined.toggled.connect(self.AlphaAB_Visibility)
            self.AlphaAB_ComboBox.currentIndexChanged.connect(self.AlphaAB_updateParametersDisplay)
    
            # Parameter display setup
            self.AlphaAB_parametersGroup = QGroupBox("Crystallographic parameters")
            AlphaAB_parametersLayout = QVBoxLayout()  
            self.AlphaAB_parametersGroup.setLayout(AlphaAB_parametersLayout)
            self.AlphaAB_parametersGroup.setVisible(False)
            AlphaAB_layout.addWidget(self.AlphaAB_parametersGroup)
    
            self.AlphaAB_initParameterWidgets(AlphaAB_Font)
            
            ##demonstration for alpha-chitin cross-sction and building structure
            self.AlphaAB_imageLabel = QLabel(self)
            self.AlphaAB_imageLabel.setFixedSize(1000, 250) 
            self.AlphaAB_imageLabel.setAlignment(Qt.AlignCenter)
            self.AlphaAB_imageLabel.setScaledContents(True)
            AlphaAB_layout.addWidget(self.AlphaAB_imageLabel)
            self.AlphaAB_imageLabel.clear()
            AlphaAB_layout.addWidget(self.AlphaAB_imageLabel)
            AlphaAB_layout.setAlignment(self.AlphaAB_imageLabel, Qt.AlignCenter)  
            self.AlphaAB_ComboBox.currentIndexChanged.connect(self.AlphaAB_updateImageDisplay)
    
            ###citation for alpha-chitin crystallographic parameter
    
            self.AlphaAB_citationLabel = QLabel("Crystallographic parameter reference: Sikorski et al. Biomacromolecules, vol. 10, no. 5, pp. 1100-1105.")
            self.AlphaAB_citationLabel.setWordWrap(True)
            AlphaAB_citation_font = self.AlphaAB_citationLabel.font()
            AlphaAB_citation_font.setPointSize(6) 
            self.AlphaAB_citationLabel.setFont(AlphaAB_citation_font)
            AlphaAB_layout.addWidget(self.AlphaAB_citationLabel)
            self.AlphaAB_citationLabel.hide()
    
            # Connect combo box selection changes to update display
            self.AlphaAB_ComboBox.currentIndexChanged.connect(self.AlphaAB_updateParametersDisplay)
    
            # Invoke button setup, initially hidden
            self.AlphaAB_invokeButton = QPushButton("Invoke Script")
            self.AlphaAB_invokeButton.setVisible(False)
            self.AlphaAB_invokeButton.clicked.connect(self.AlphaAB_invokeScript)
            AlphaAB_layout.addWidget(self.AlphaAB_invokeButton)


    def AlphaAB_updateImageDisplay(self, index):
        AlphaAB_shape = self.AlphaAB_ComboBox.currentText()
        if AlphaAB_shape == "Rectangle cross-section shape":
            AlphaAB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'alpha-chitin', 'chitin-rectangle-shape.png') )
        elif AlphaAB_shape == "Hexagon cross-section shape":
            AlphaAB_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'alpha-chitin', 'chitin-hexagonal-shape.png') )
        else:
            self.AlphaAB_imageLabel.clear()
            return
        self.AlphaAB_imageLabel.setPixmap(AlphaAB_pixmap)
        self.AlphaAB_imageLabel.show()

 
    def AlphaAB_initParameterWidgets(self, font):
        # Create two horizontal layouts
        self.AlphaAB_paramLine1 = QHBoxLayout()
        self.AlphaAB_paramLine2 = QHBoxLayout()
        self.AlphaAB_paramLine3 = QHBoxLayout()
        # Initialize QLineEdit objects for parameters and repeat units
        self.AlphaAB_aParam = QLineEdit()
        self.AlphaAB_bParam = QLineEdit()
        self.AlphaAB_cParam = QLineEdit()
        self.AlphaAB_aRepeatUnits = QLineEdit()
        self.AlphaAB_bRepeatUnits = QLineEdit()
        self.AlphaAB_cRepeatUnits = QLineEdit()
        
        self.AlphaAB_width = QLineEdit()
        self.AlphaAB_height = QLineEdit()
        # Add widgets to first line layout
        self.AlphaAB_setupParameterWidget("a (Å)", self.AlphaAB_aParam, True, "", self.AlphaAB_paramLine1, font)
        self.AlphaAB_setupParameterWidget("b (Å)", self.AlphaAB_bParam, True, "", self.AlphaAB_paramLine1, font)
        self.AlphaAB_setupParameterWidget("c (Å)", self.AlphaAB_cParam, True, "", self.AlphaAB_paramLine1, font)

        self.AlphaAB_setupParameterWidget("Cross-section width (Å)", self.AlphaAB_width, True, "", self.AlphaAB_paramLine2, font)
        self.AlphaAB_setupParameterWidget("Cross-section height (Å)", self.AlphaAB_height, True, "", self.AlphaAB_paramLine2, font)

        self.AlphaAB_setupParameterWidget("a repetition", self.AlphaAB_aRepeatUnits, True, "", self.AlphaAB_paramLine3, font)
        self.AlphaAB_setupParameterWidget("b repetition", self.AlphaAB_bRepeatUnits, True, "", self.AlphaAB_paramLine3, font)
        self.AlphaAB_setupParameterWidget("c repetition", self.AlphaAB_cRepeatUnits, True, "", self.AlphaAB_paramLine3, font)

        # Add both lines to the group box layout
        self.AlphaAB_parametersGroup.layout().addLayout(self.AlphaAB_paramLine1)
        self.AlphaAB_parametersGroup.layout().addLayout(self.AlphaAB_paramLine2)
        self.AlphaAB_parametersGroup.layout().addLayout(self.AlphaAB_paramLine3)

    def AlphaAB_setupParameterWidget(self, AlphaAB_label, AlphaAB_widget, readOnly, AlphaAB_defaultValue, AlphaAB_layout, AlphaAB_font):
        AlphaAB_labelWidget = QLabel(AlphaAB_label)
        AlphaAB_labelWidget.setFont(AlphaAB_font)
        AlphaAB_widget.setFont(AlphaAB_font)
        AlphaAB_widget.setReadOnly(readOnly)
        AlphaAB_widget.setText(AlphaAB_defaultValue)
        if readOnly:
            AlphaAB_widget.setStyleSheet("background-color: lightgrey;")
        AlphaAB_layout.addWidget(AlphaAB_labelWidget)
        AlphaAB_layout.addWidget(AlphaAB_widget)
    

    def AlphaAB_updateReadOnlyState(self, AlphaAB_widget, readOnly):
        AlphaAB_widget.setReadOnly(readOnly)
        if readOnly:
            AlphaAB_widget.setStyleSheet("background-color: #D3D3D3;")  # Light grey background
            AlphaAB_widget.setEnabled(False)  # Optionally disable the widget to make it clear it's not interactive
        else:
            AlphaAB_widget.setStyleSheet("background-color: white;")
            AlphaAB_widget.setEnabled(True)  # Re-enable the widget for user interaction

    def AlphaAB_Visibility(self, checked):
        self.AlphaAB_ComboBox.setVisible(checked)
        if checked:
            self.AlphaAB_ComboBox.setCurrentIndex(0) 
            self.AlphaAB_parametersGroup.setVisible(False)
        else:
            self.AlphaAB_ComboBox.setVisible(False)
            self.AlphaAB_parametersGroup.setVisible(False)

    def AlphaAB_updateParametersDisplay(self):
        if self.AlphaAB_ComboBox.currentIndex() == 0:
            self.AlphaAB_parametersGroup.setVisible(False)
        else:
            self.AlphaAB_parametersGroup.setVisible(True)
            model = self.AlphaAB_ComboBox.currentText()
            
            if self.AlphaAB_Experimental.isChecked() :
                self.AlphaAB_citationLabel.show()
                if model == "Rectangle cross-section shape":
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.AlphaAB_setupModificationsSection(self.AlphaAB_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaAB_aParam.clear()
                    self.AlphaAB_bParam.clear()
                    self.AlphaAB_cParam.clear()
                    #self.AlphaAB_clear_model_image()
                    self.AlphaAB_aRepeatUnits.clear()
                    self.AlphaAB_bRepeatUnits.clear()
                    self.AlphaAB_cRepeatUnits.clear()
                    self.AlphaAB_width.clear()
                    self.AlphaAB_height.clear()

                    self.AlphaAB_aParam.setText("4.749")
                    self.AlphaAB_bParam.setText("18.89")
                    self.AlphaAB_cParam.setText("10.33")

                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_aParam, True)    
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_bParam, True)             
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_cParam, True) 
                    self.AlphaAB_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_cParam.setStyleSheet("background-color: #D3D3D3;")  

                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_width, True)             
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_height, True)   
                    self.AlphaAB_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_bRepeatUnits, False)     
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_aRepeatUnits, False)   
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_cRepeatUnits, False)    
                    self.AlphaAB_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaAB_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaAB_cRepeatUnits.setStyleSheet("background-color: white;") 
                    

                elif model == "Hexagon cross-section shape":
                    self.AlphaAB_setupModificationsSection(self.AlphaAB_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaAB_aParam.clear()
                    self.AlphaAB_bParam.clear()
                    self.AlphaAB_cParam.clear()
                    self.AlphaAB_aRepeatUnits.clear()
                    self.AlphaAB_bRepeatUnits.clear()
                    self.AlphaAB_cRepeatUnits.clear()
                    self.AlphaAB_width.clear()
                    self.AlphaAB_height.clear()
                    self.AlphaAB_aParam.setText("4.749")
                    self.AlphaAB_bParam.setText("18.89")
                    self.AlphaAB_cParam.setText("10.33")

                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_aParam, True)    
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_bParam, True)             
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_cParam, True)  
                    self.AlphaAB_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_cParam.setStyleSheet("background-color: #D3D3D3;")                     

                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_width,  False)             
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_height, False)   
                    self.AlphaAB_width.setStyleSheet("background-color:  white;") 
                    self.AlphaAB_height.setStyleSheet("background-color: white;")     


                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_bRepeatUnits, True)     
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_aRepeatUnits, True)   
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_cRepeatUnits, False)    
                    self.AlphaAB_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_cRepeatUnits.setStyleSheet("background-color: white;") 
            
            elif self.AlphaAB_UserDefined.isChecked() :

                self.AlphaAB_citationLabel.hide()
                if model == "Rectangle cross-section shape":
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.AlphaAB_setupModificationsSection(self.AlphaAB_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaAB_aParam.clear()
                    self.AlphaAB_bParam.clear()
                    self.AlphaAB_cParam.clear()
                    self.AlphaAB_aRepeatUnits.clear()
                    self.AlphaAB_bRepeatUnits.clear()
                    self.AlphaAB_cRepeatUnits.clear()
                    self.AlphaAB_width.clear()
                    self.AlphaAB_height.clear()

                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_aParam, False)    
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_bParam, False)             
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_cParam, False) 
                    self.AlphaAB_aParam.setStyleSheet("background-color: white;") 
                    self.AlphaAB_bParam.setStyleSheet("background-color: white;") 
                    self.AlphaAB_cParam.setStyleSheet("background-color: white;")  

                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_width, True)             
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_height, True)   
                    self.AlphaAB_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_bRepeatUnits, False)     
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_aRepeatUnits, False)   
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_cRepeatUnits, False)    
                    self.AlphaAB_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaAB_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.AlphaAB_cRepeatUnits.setStyleSheet("background-color: white;")   


                elif model == "Hexagon cross-section shape":
                    self.AlphaAB_setupModificationsSection(self.AlphaAB_parametersGroup.layout(), QFont("Arial", 13))
                    self.AlphaAB_aParam.clear()
                    self.AlphaAB_bParam.clear()
                    self.AlphaAB_cParam.clear()
                    self.AlphaAB_aRepeatUnits.clear()
                    self.AlphaAB_bRepeatUnits.clear()
                    self.AlphaAB_cRepeatUnits.clear()
                    self.AlphaAB_width.clear()
                    self.AlphaAB_height.clear()

                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_aParam, False)    
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_bParam, False)             
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_cParam, False)  
                    self.AlphaAB_aParam.setStyleSheet("background-color: white;") 
                    self.AlphaAB_bParam.setStyleSheet("background-color: white;") 
                    self.AlphaAB_cParam.setStyleSheet("background-color: white;")                     

                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_width,  False)             
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_height, False)   
                    self.AlphaAB_width.setStyleSheet("background-color:  white;") 
                    self.AlphaAB_height.setStyleSheet("background-color: white;")     


                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_bRepeatUnits, True)     
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_aRepeatUnits, True)   
                    self.AlphaAB_updateReadOnlyState(self.AlphaAB_cRepeatUnits, False)    
                    self.AlphaAB_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.AlphaAB_cRepeatUnits.setStyleSheet("background-color: white;")       


            else:
                # Hide modification options if not the specific model and type
                for i in reversed(range(self.AlphaAB_modificationsLayout.count())): 
                    self.AlphaAB_modificationsLayout.itemAt(i).widget().setParent(None)

    def AlphaAB_setupModificationsSection(self, AlphaAB_layout, AlphaAB_font):
        # Add a layout for modifications if it doesn't exist
        if not hasattr(self, 'AlphaAB_modificationsLayout'):
            self.AlphaAB_modificationsLayout = QHBoxLayout()
            self.AlphaAB_deacetylationRadio = QRadioButton("Deacetylation")
            self.AlphaAB_carboxylationRadio = QRadioButton("Carboxylation")
            self.AlphaAB_noModRadio = QRadioButton("No Modification")
            self.AlphaAB_deacetylationRadio.setFont(AlphaAB_font)
            self.AlphaAB_carboxylationRadio.setFont(AlphaAB_font)
            self.AlphaAB_noModRadio.setFont(AlphaAB_font)
            self.AlphaAB_modificationsLayout.addWidget(self.AlphaAB_deacetylationRadio)
            self.AlphaAB_modificationsLayout.addWidget(self.AlphaAB_carboxylationRadio)
            self.AlphaAB_modificationsLayout.addWidget(self.AlphaAB_noModRadio)
            AlphaAB_layout.addLayout(self.AlphaAB_modificationsLayout)

            # Setup Inputs and Connections
            self.AlphaAB_setupModificationInputs()
            AlphaAB_layout.addWidget(self.AlphaAB_modificationInputsWidget)
            self.AlphaAB_deacetylationRadio.toggled.connect(lambda checked: self.AlphaAB_updateModificationInputs("Deacetylation", checked))
            self.AlphaAB_carboxylationRadio.toggled.connect(lambda checked: self.AlphaAB_updateModificationInputs("Carboxylation", checked))
            self.AlphaAB_noModRadio.toggled.connect(lambda checked: self.AlphaAB_updateModificationInputs("None", checked))


            # Generate Structure Button
            AlphaAB_Font = QFont("Arial", 13)
            self.AlphaAB_invokeButton = QPushButton("Generate Structure")
            self.AlphaAB_invokeButton.setFont(AlphaAB_Font)
            self.AlphaAB_invokeButton.setVisible(False)  # Initially hidden
            self.AlphaAB_invokeButton.clicked.connect(self.AlphaAB_invokeScript)  # Connect to invoke script logic
            AlphaAB_layout.addWidget(self.AlphaAB_invokeButton)           



    def AlphaAB_setupModificationInputs(self):
        self.AlphaAB_modificationInputsWidget = QWidget()
        AlphaAB_modification_mainLayout = QVBoxLayout(self.AlphaAB_modificationInputsWidget)
        AlphaAB_font = QFont("Arial", 13)
        AlphaAB_font_Sel = QFont("Arial", 12)
  
        # Degree of deacetylation input
        AlphaAB_deacetyl_plane_layout = QHBoxLayout()
        self.AlphaAB_deacetyl_planeLabel = QLabel("Please select α-chitin plane for deacetylation modifications:")
        self.AlphaAB_deacetyl_planeLabel.setFont(AlphaAB_font)
        self.AlphaAB_deacetyl_planeComboBox = QComboBox()
        self.AlphaAB_deacetyl_planeComboBox.setFont(AlphaAB_font_Sel)
        self.AlphaAB_deacetyl_planeComboBox.addItems([ "Select here",
                                                      "Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", 
                                                      "Inside the α-chitin"])
        AlphaAB_deacetyl_plane_layout.addWidget(self.AlphaAB_deacetyl_planeLabel)
        AlphaAB_deacetyl_plane_layout.addWidget(self.AlphaAB_deacetyl_planeComboBox)
        AlphaAB_modification_mainLayout.addLayout(AlphaAB_deacetyl_plane_layout)
 

        # Degree of carboxylation input
        AlphaAB_carboxylation_plane_layout = QHBoxLayout()
        self.AlphaAB_carboxylation_planeLabel = QLabel("Please select α-chitin plane for carboxylation modifications:")
        self.AlphaAB_carboxylation_planeLabel.setFont(AlphaAB_font)
        self.AlphaAB_carboxylation_planeComboBox = QComboBox()
        self.AlphaAB_carboxylation_planeComboBox.setFont(AlphaAB_font_Sel)
        self.AlphaAB_carboxylation_planeComboBox.addItems([ "Select here",
                                                      "Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)"])
        AlphaAB_carboxylation_plane_layout.addWidget(self.AlphaAB_carboxylation_planeLabel)
        AlphaAB_carboxylation_plane_layout.addWidget(self.AlphaAB_carboxylation_planeComboBox)
        AlphaAB_modification_mainLayout.addLayout(AlphaAB_carboxylation_plane_layout)


        ##dda and pH for deacetylations
        AlphaAB_dda_pH_layout = QHBoxLayout()
        self.AlphaAB_dda_Label = QLabel("Degree of deacetylation (≥0 and <1):")
        #self.AlphaAB_dda_Label.setFixedSize(QSize(500, 40))
        self.AlphaAB_dda_Label.setFont(AlphaAB_font)
        self.AlphaAB_dda_LineEdit = QLineEdit()
        self.AlphaAB_dda_LineEdit.setFont(AlphaAB_font)
        self.AlphaAB_dda_LineEdit.setFixedSize(QSize(200, 40))

        # pH input (specific to Deacetylation)
        self.AlphaAB_dda_pHLabel = QLabel("pH level of α-chitin structure (>0 and <14):")
        self.AlphaAB_dda_pHLabel.setFont(AlphaAB_font)
        #self.AlphaAB_dda_pHLabel.addSpacing(150)
        self.AlphaAB_dda_pHLineEdit = QLineEdit()
        self.AlphaAB_dda_pHLineEdit.setFont(AlphaAB_font)
        self.AlphaAB_dda_pHLineEdit.setFixedSize(QSize(200, 40))

        AlphaAB_dda_pH_layout.addWidget(self.AlphaAB_dda_Label)
        AlphaAB_dda_pH_layout.addWidget(self.AlphaAB_dda_LineEdit)
        AlphaAB_dda_pH_layout.addSpacing(100)  ##space between dda and pH
        AlphaAB_dda_pH_layout.addWidget(self.AlphaAB_dda_pHLabel)
        AlphaAB_dda_pH_layout.addWidget(self.AlphaAB_dda_pHLineEdit)
        AlphaAB_modification_mainLayout.addLayout(AlphaAB_dda_pH_layout)

        # Degree of carboxylation input
        AlphaAB_carboxylation_pH_layout = QHBoxLayout()
        self.AlphaAB_carboxylation_Label = QLabel("Degree of carboxylation (unit: mmol/g):")
        self.AlphaAB_carboxylation_Label.setFont(AlphaAB_font)
        self.AlphaAB_carboxylation_LineEdit = QLineEdit()
        self.AlphaAB_carboxylation_LineEdit.setFont(AlphaAB_font)
        self.AlphaAB_carboxylation_LineEdit.setFixedSize(QSize(200, 40))
        self.AlphaAB_carboxylation_pHLabel = QLabel("pH level of α-chitin structure (>0 and <14):")
        self.AlphaAB_carboxylation_pHLabel.setFont(AlphaAB_font)
        self.AlphaAB_carboxylation_pHLineEdit = QLineEdit()
        self.AlphaAB_carboxylation_pHLineEdit.setFont(AlphaAB_font)
        self.AlphaAB_carboxylation_pHLineEdit.setFixedSize(QSize(200, 40))
        AlphaAB_carboxylation_pH_layout.addWidget(self.AlphaAB_carboxylation_Label)
        AlphaAB_carboxylation_pH_layout.addWidget(self.AlphaAB_carboxylation_LineEdit)
        AlphaAB_carboxylation_pH_layout.addSpacing(100)  ##space between dda and pH
        AlphaAB_carboxylation_pH_layout.addWidget(self.AlphaAB_carboxylation_pHLabel)
        AlphaAB_carboxylation_pH_layout.addWidget(self.AlphaAB_carboxylation_pHLineEdit)
        AlphaAB_modification_mainLayout.addLayout(AlphaAB_carboxylation_pH_layout)


        AlphaAB_ForceField_layout = QHBoxLayout()
        self.AlphaAB_ForceFieldTypeLabel = QLabel("Atomistic Simulation Force Field:")
        self.AlphaAB_ForceFieldTypeLabel.setFont(AlphaAB_font)
        self.AlphaAB_ForceFieldTypeselector = QComboBox()
        self.AlphaAB_ForceFieldTypeselector.setFont(AlphaAB_font)
        #self.AlphaAB_ForceFieldTypeLabel.setFixedSize(550, 60)  # Width of 200 pixels and height of 20 pixels
        self.AlphaAB_ForceFieldTypeselector.addItem("Please select the force field for atomistic simulations", True)
        self.AlphaAB_ForceFieldTypeselector.addItem("CHARMM36 Infinite Chain Model", False)
        self.AlphaAB_ForceFieldTypeselector.addItem("CHARMM36 Finite Chain Model", False)
        self.AlphaAB_ForceFieldTypeselector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.AlphaAB_ForceFieldTypeselector.addItem("GLYCAM06 Finite Chain Model", False)
        AlphaAB_ForceField_layout.addWidget(self.AlphaAB_ForceFieldTypeLabel)
        AlphaAB_ForceField_layout.addWidget(self.AlphaAB_ForceFieldTypeselector)
        AlphaAB_modification_mainLayout.addLayout(AlphaAB_ForceField_layout)

        self.AlphaAB_deacetyl_planeLabel.setVisible(False)
        self.AlphaAB_deacetyl_planeComboBox.setVisible(False)
        self.AlphaAB_carboxylation_planeLabel.setVisible(False)
        self.AlphaAB_carboxylation_planeComboBox.setVisible(False)

        self.AlphaAB_dda_Label.setVisible(False)
        self.AlphaAB_dda_LineEdit.setVisible(False)
        self.AlphaAB_dda_pHLabel.setVisible(False)
        self.AlphaAB_dda_pHLineEdit.setVisible(False)

        self.AlphaAB_carboxylation_Label.setVisible(False)
        self.AlphaAB_carboxylation_LineEdit.setVisible(False)
        self.AlphaAB_carboxylation_pHLabel.setVisible(False)
        self.AlphaAB_carboxylation_pHLineEdit.setVisible(False)


        self.AlphaAB_ForceFieldTypeLabel.setVisible(False)
        self.AlphaAB_ForceFieldTypeselector.setVisible(False)

        self.AlphaAB_deacetyl_planeComboBox.currentIndexChanged.connect(
        lambda: self.AlphaAB_manageVisibilityAndStylesForDeacetylation(
            self.AlphaAB_deacetyl_planeComboBox.currentText()
           )
        )
        self.AlphaAB_modificationInputsWidget.setLayout(AlphaAB_modification_mainLayout)

        self.AlphaAB_carboxylation_planeComboBox.currentIndexChanged.connect(
        lambda: self.AlphaAB_manageVisibilityAndStylesForCarboxylation(
            self.AlphaAB_carboxylation_planeComboBox.currentText()
           )
        )
        self.AlphaAB_modificationInputsWidget.setLayout(AlphaAB_modification_mainLayout)


    def AlphaAB_updateModificationInputs(self, AlphaAB_modificationType, checked):
        if checked:
            if  AlphaAB_modificationType == "Deacetylation":
                AlphaAB_deacetylation_plane_selection = self.AlphaAB_deacetyl_planeComboBox.currentText()
                self.AlphaAB_manageVisibilityAndStylesForDeacetylation(AlphaAB_deacetylation_plane_selection)

            elif AlphaAB_modificationType == "Carboxylation":
                AlphaAB_carboxylation_plane_selection = self.AlphaAB_carboxylation_planeComboBox.currentText()
                self.AlphaAB_manageVisibilityAndStylesForCarboxylation(AlphaAB_carboxylation_plane_selection)
            elif  AlphaAB_modificationType == "None":
                self.AlphaAB_dda_Label.setVisible(False)
                self.AlphaAB_dda_LineEdit.setVisible(False)
                self.AlphaAB_carboxylation_Label.setVisible(False)
                self.AlphaAB_carboxylation_LineEdit.setVisible(False)

                self.AlphaAB_carboxylation_pHLabel.setVisible(False)
                self.AlphaAB_carboxylation_pHLineEdit.setVisible(False)
                self.AlphaAB_dda_pHLabel.setVisible(False)
                self.AlphaAB_dda_pHLineEdit.setVisible(False)

    
                self.AlphaAB_deacetyl_planeLabel.setVisible(False)
                self.AlphaAB_deacetyl_planeComboBox.setVisible(False)
                self.AlphaAB_carboxylation_planeLabel.setVisible(False)
                self.AlphaAB_carboxylation_planeComboBox.setVisible(False)


                self.AlphaAB_ForceFieldTypeLabel.setVisible(True)
                self.AlphaAB_ForceFieldTypeselector.setVisible(True)
                self.AlphaAB_invokeButton.setVisible(True)  # Show "Generate Structure" button
        else:
            self.AlphaAB_dda_Label.setVisible(False)
            self.AlphaAB_dda_LineEdit.setVisible(False)
            self.AlphaAB_carboxylation_Label.setVisible(False)
            self.AlphaAB_carboxylation_LineEdit.setVisible(False)


            self.AlphaAB_dda_pHLabel.setVisible(False)
            self.AlphaAB_dda_pHLineEdit.setVisible(False)
            self.AlphaAB_carboxylation_pHLabel.setVisible(False)
            self.AlphaAB_carboxylation_pHLineEdit.setVisible(False)


            self.AlphaAB_deacetyl_planeLabel.setVisible(False)
            self.AlphaAB_deacetyl_planeComboBox.setVisible(False)
            self.AlphaAB_carboxylation_planeLabel.setVisible(False)
            self.AlphaAB_carboxylation_planeComboBox.setVisible(False)


            self.AlphaAB_ForceFieldTypeLabel.setVisible(False)
            self.AlphaAB_ForceFieldTypeselector.setVisible(False)
            self.AlphaAB_invokeButton.setVisible(False)  

    def AlphaAB_manageVisibilityAndStylesForDeacetylation(self, AlphaAB_deacetylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.AlphaAB_deacetyl_planeLabel.setVisible(True)
        self.AlphaAB_deacetyl_planeComboBox.setVisible(True)
        self.AlphaAB_carboxylation_planeLabel.setVisible(False)
        self.AlphaAB_carboxylation_planeComboBox.setVisible(False)
        self.AlphaAB_dda_Label.setVisible(True)
        self.AlphaAB_dda_LineEdit.setVisible(True)
        self.AlphaAB_dda_pHLabel.setVisible(True)
        self.AlphaAB_dda_pHLineEdit.setVisible(True)
        self.AlphaAB_carboxylation_Label.setVisible(False)
        self.AlphaAB_carboxylation_LineEdit.setVisible(False)
        self.AlphaAB_carboxylation_pHLabel.setVisible(False)
        self.AlphaAB_carboxylation_pHLineEdit.setVisible(False)
        self.AlphaAB_ForceFieldTypeLabel.setVisible(True)
        self.AlphaAB_ForceFieldTypeselector.setVisible(True)
        self.AlphaAB_invokeButton.setVisible(True)
    
        if AlphaAB_deacetylation_plane_selection in ["Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", ]:
            self.AlphaAB_dda_LineEdit.setReadOnly(False)
            self.AlphaAB_dda_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaAB_dda_pHLineEdit.setReadOnly(False)
            self.AlphaAB_dda_pHLineEdit.setStyleSheet("background-color: white;")
        elif AlphaAB_deacetylation_plane_selection == "Inside the α-chitin":
            self.AlphaAB_dda_LineEdit.setReadOnly(False)
            self.AlphaAB_dda_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaAB_dda_pHLineEdit.setReadOnly(True)
            self.AlphaAB_dda_pHLineEdit.setStyleSheet("background-color: #D3D3D3;")



    def AlphaAB_manageVisibilityAndStylesForCarboxylation(self, AlphaAB_carboxylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.AlphaAB_deacetyl_planeLabel.setVisible(False)
        self.AlphaAB_deacetyl_planeComboBox.setVisible(False)
        self.AlphaAB_carboxylation_planeLabel.setVisible(True)
        self.AlphaAB_carboxylation_planeComboBox.setVisible(True)
        self.AlphaAB_dda_Label.setVisible(False)
        self.AlphaAB_dda_LineEdit.setVisible(False)
        self.AlphaAB_dda_pHLabel.setVisible(False)
        self.AlphaAB_dda_pHLineEdit.setVisible(False)
        self.AlphaAB_carboxylation_Label.setVisible(True)
        self.AlphaAB_carboxylation_LineEdit.setVisible(True)
        self.AlphaAB_carboxylation_pHLabel.setVisible(True)
        self.AlphaAB_carboxylation_pHLineEdit.setVisible(True)
        self.AlphaAB_ForceFieldTypeLabel.setVisible(True)
        self.AlphaAB_ForceFieldTypeselector.setVisible(True)
        self.AlphaAB_invokeButton.setVisible(True)
    
        if AlphaAB_carboxylation_plane_selection in ["Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (120) plane (Only support hexagon cross-section)",
                                                      "Two (120) planes (Only support hexagon cross-section)",
                                                      "Single (120) and (010) planes (Only support hexagon cross-section)",
                                                      "Both (120) and (010) planes (Only support hexagon cross-section)", ]:
            self.AlphaAB_carboxylation_LineEdit.setReadOnly(False)
            self.AlphaAB_carboxylation_LineEdit.setStyleSheet("background-color: white;")
            self.AlphaAB_carboxylation_pHLineEdit.setReadOnly(False)
            self.AlphaAB_carboxylation_pHLineEdit.setStyleSheet("background-color: white;")
    


    def AlphaAB_invokeScript(self):
            model = self.AlphaAB_ComboBox.currentText()
            
            if self.AlphaAB_Experimental.isChecked():
                #self.AlphaAB_ForceFieldTypeselector.setCurrentIndex(0)
                if self.AlphaAB_noModRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                    AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                    AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                    if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit:
                        QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                        return
                    AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                    AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaAB_script_name = "alpha_chitin_AB_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_AB_finite_experiment.py"
                        AlphaAB_shape_name = "rectangle"
                        AlphaAB_folder_name = "charmm36"
                    elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaAB_script_name = "alpha_chitin_AB_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_AB_finite_experiment.py"
                        AlphaAB_shape_name = "rectangle"
                        AlphaAB_folder_name = "glycam06"
                    try:    
                        AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB", AlphaAB_shape_name, AlphaAB_folder_name, AlphaAB_script_name)
                        AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit]
                        AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaAB_result.returncode == 0:
                            AlphaAB_output = AlphaAB_result.stdout.strip()
                            self.AlphaAB_exp_rectangle_nochemical_Popup(AlphaAB_output)
                            self.AlphaAB_exp_rectangle_nochemical_Topology()                    
                        else:
                            QMessageBox.warning(self, "Generation Failed")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                elif self.AlphaAB_noModRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaAB_width  = self.AlphaAB_width.text()  
                    AlphaAB_height = self.AlphaAB_height.text()
                    AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                    if not AlphaAB_c_unit and AlphaAB_width and AlphaAB_height:
                        QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                        return
                    AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                    AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        AlphaAB_shape_name = "hexagon"
                        AlphaAB_folder_name = "charmm36"
                    elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        AlphaAB_shape_name = "hexagon"
                        AlphaAB_folder_name = "glycam06"
                    try:    
                        AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB", AlphaAB_shape_name, AlphaAB_folder_name, AlphaAB_script_name)
                        AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width]
                        AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaAB_result.returncode == 0:
                            AlphaAB_output = AlphaAB_result.stdout.strip()
                            self.AlphaAB_exp_hexagon_nochemical_Popup(AlphaAB_output)
                            self.AlphaAB_exp_hexagon_nochemical_Topology()                    
                        else:
                            error_message = AlphaAB_result.stderr.strip() 
                            QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                #deacetylation  deacetylationRadio
                elif self.AlphaAB_deacetylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaAB_deacetylation_plane_selection = self.AlphaAB_deacetyl_planeComboBox.currentText()
                    if  AlphaAB_deacetylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")

                    elif AlphaAB_deacetylation_plane_selection == "Two (010) planes":

                        ##deacetylation parameter 
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaAB_deacetylation_plane_selection == "Single (010) plane":

                        ##deacetylation parameter 
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaAB_deacetylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaAB_deacetylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-infinite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_deacetylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_deacetylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)": 
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    #####inside chitin
                    elif AlphaAB_deacetylation_plane_selection == "Inside the α-chitin":

                        ##deacetylation parameter 
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-inside-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-inside-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #AlphaAB_folder_name = "charmm36"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                           #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                           #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                           #    AlphaAB_shape_name = "rectangle"
                           #    AlphaAB_folder_name = "glycam06"  
                        try: 
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name, AlphaAB_script_name)     
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                               AlphaAB_output = AlphaAB_result.stdout.strip()
                               self.AlphaAB_exp_rectangle_deacetylation_inside_Popup(AlphaAB_output)
                               self.AlphaAB_exp_rectangle_deacetylation_inside_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                #----------carboxylation------------rectangle-----experimental----- crystallographic parameter-----------
                elif self.AlphaAB_carboxylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaAB_carboxylation_plane_selection = self.AlphaAB_carboxylation_planeComboBox.currentText()

                    ###double plane modifications
                    if  AlphaAB_carboxylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")
                    elif AlphaAB_carboxylation_plane_selection == "Two (010) planes":

                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaAB_carboxylation_plane_selection == "Single (010) plane":

                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaAB_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-infinite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)": 
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaAB_shape_name = "rectangle"
                            #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    AlphaAB_shape_name = "rectangle"
                            #    AlphaAB_folder_name = "glycam06"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



               
                ######-#####################----------------------hexagonal-deacetylation----------------------##########################
                elif self.AlphaAB_deacetylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaAB_deacetylation_plane_selection = self.AlphaAB_deacetyl_planeComboBox.currentText()

                    if  AlphaAB_deacetylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support hexagonal cross-section shape.")       
                    elif AlphaAB_deacetylation_plane_selection == "Single (010) plane":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ###two 010 plane modifications
                    if AlphaAB_deacetylation_plane_selection == "Two (010) planes":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaAB_deacetylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    if AlphaAB_deacetylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaAB_deacetylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaAB_deacetylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ####---------------hexagonal-shape carboxylation ----------- experimental------- 
                # 
                elif self.AlphaAB_carboxylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaAB_carboxylation_plane_selection = self.AlphaAB_carboxylation_planeComboBox.currentText()
        

                    ###single plane modifications
                    if  AlphaAB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane carboxylated chitin doesn't support hexagonal cross-section shape.")       

                    elif AlphaAB_carboxylation_plane_selection == "Single (010) plane":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaAB_carboxylation_plane_selection == "Two (010) planes":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaAB_carboxylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()                     
  
                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")





            ###user-defined crystallographic parameters
            elif self.AlphaAB_UserDefined.isChecked():
                if self.AlphaAB_noModRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaAB_a_parm = self.AlphaAB_aParam.text()
                    AlphaAB_b_parm = self.AlphaAB_bParam.text()
                    AlphaAB_c_parm = self.AlphaAB_cParam.text()
                    AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                    AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                    AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                    if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm  and AlphaAB_a_unit and AlphaAB_b_unit and AlphaAB_c_unit: 
                        QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                        return
                    AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                    AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaAB_script_name = "alpha_chitin_AB_infinite_ud.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_AB_finite_ud.py"
                        AlphaAB_ud_folder = "user-defined"
                        AlphaAB_shape_name = "rectangle"
                        AlphaAB_folder_name = "charmm36"
                    elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaAB_script_name = "alpha_chitin_AB_infinite_ud.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_AB_finite_ud.py"
                        AlphaAB_ud_folder = "user-defined"
                        AlphaAB_shape_name = "rectangle"
                        AlphaAB_folder_name = "glycam06"
                    try:    
                        AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_folder_name, AlphaAB_script_name)
                        AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit,  AlphaAB_c_unit]
                        AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaAB_result.returncode == 0:
                            AlphaAB_output = AlphaAB_result.stdout.strip()
                            self.AlphaAB_exp_rectangle_nochemical_Popup(AlphaAB_output)
                            self.AlphaAB_exp_rectangle_nochemical_Topology()                    
                        else:
                            QMessageBox.warning(self, "Generation Failed")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                elif self.AlphaAB_noModRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaAB_a_parm = self.AlphaAB_aParam.text()
                    AlphaAB_b_parm = self.AlphaAB_bParam.text()
                    AlphaAB_c_parm = self.AlphaAB_cParam.text()
                    AlphaAB_width  = self.AlphaAB_width.text()  
                    AlphaAB_height = self.AlphaAB_height.text()
                    AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                    if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm  and AlphaAB_width and AlphaAB_height and AlphaAB_c_unit: 
                        QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                        return
                    AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                    AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        AlphaAB_script_name = "alpha_chitin_AB_infinite_ud.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_AB_finite_ud.py"
                        AlphaAB_ud_folder = "user-defined"
                        AlphaAB_shape_name = "hexagon"
                        AlphaAB_folder_name = "charmm36"
                    elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        AlphaAB_script_name = "alpha_chitin_AB_infinite_ud.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_AB_finite_ud.py"
                        AlphaAB_ud_folder = "user-defined"
                        AlphaAB_shape_name = "hexagon"
                        AlphaAB_folder_name = "glycam06"
                    try:    
                        AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_folder_name, AlphaAB_script_name)
                        AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_c_unit, AlphaAB_height, AlphaAB_width]
                        AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if AlphaAB_result.returncode == 0:
                            AlphaAB_output = AlphaAB_result.stdout.strip()
                            self.AlphaAB_exp_hexagon_nochemical_Popup(AlphaAB_output)
                            self.AlphaAB_exp_hexagon_nochemical_Topology()                    
                        else:    
                            QMessageBox.warning(self, "Generation Failed")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ######-#####################----------------------Rectangle-deacetylation----------------------##########################


                elif self.AlphaAB_deacetylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaAB_deacetylation_plane_selection = self.AlphaAB_deacetyl_planeComboBox.currentText()

                    if  AlphaAB_deacetylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane deacetylated chitin doesn't support rectangle cross-section shape.")

                    elif AlphaAB_deacetylation_plane_selection == "Two (010) planes":

                        ##deacetylation parameter 
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()


                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_deacetylation_plane_selection == "Single (010) plane":

                        ##deacetylation parameter 
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()


                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_ud_folder, AlphaAB_shape_name,AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaAB_deacetylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()


                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_ud_folder, AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    elif AlphaAB_deacetylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()


                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-2-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_ud_folder, AlphaAB_shape_name,AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaAB_deacetylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()


                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaAB_deacetylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":

                        ##deacetylation parameter 
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()


                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_ud_folder, AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaAB_deacetylation_plane_selection == "Inside the α-chitin":
                        ##deacetylation parameter 
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-inside-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-inside-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                            AlphaAB_folder_name = "charmm36"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_ud_folder, AlphaAB_shape_name,  AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, dda]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_deacetylation_inside_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_deacetylation_inside_Topology()                    
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                #####----------------------------------user-defined rectangle carboxylation --------------------
                elif self.AlphaAB_carboxylationRadio.isChecked() and model == "Rectangle cross-section shape":
                    AlphaAB_carboxylation_plane_selection = self.AlphaAB_carboxylation_planeComboBox.currentText()

                    if  AlphaAB_carboxylation_plane_selection in ["Single (120) plane (Only support hexagon cross-section)", "Two (120) planes (Only support hexagon cross-section)", 
                                                                 "Single (120) and (010) planes (Only support hexagon cross-section)", "Both (120) and (010) planes (Only support hexagon cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(120) plane carboxylated chitin doesn't support rectangle cross-section shape.")

                    elif AlphaAB_carboxylation_plane_selection == "Two (010) planes":

                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-010-2-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-010-2-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Single (010) plane":

                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-010-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-010-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":

                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaAB_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":

                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-2-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-2-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-100-010-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-100-010-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":

                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
                        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaAB_ud_folder = "user-defined"
                            AlphaAB_shape_name = "rectangle"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "UnsupporteOperation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                        #    AlphaAB_shape_name = "rectangle"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_ud_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path,  AlphaAB_a_parm, AlphaAB_b_parm, AlphaAB_c_parm, AlphaAB_a_unit, AlphaAB_b_unit, AlphaAB_c_unit, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_exp_rectangle_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_exp_rectangle_carboxylation_Topology()              
                            else:
                                error_message = AlphaAB_result.stderr.strip()
                                QMessageBox.critical(self, "α-chitin Parameter Error", error_message)   
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ####user-defined-hexagonal deacetylation chitin 
                elif self.AlphaAB_deacetylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaAB_deacetylation_plane_selection = self.AlphaAB_deacetyl_planeComboBox.currentText()
                    if  AlphaAB_deacetylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support hexagonal cross-section shape.")       

                    ###single plane modifications
                    elif AlphaAB_deacetylation_plane_selection == "Single (010) plane":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaAB_folder="user-defined"
                            AlphaAB_shape_name = "hexagon"

                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    ###two 010 plane modifications
                    if AlphaAB_deacetylation_plane_selection == "Two (010) planes":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()                        
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
    
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaAB_shape_name = "hexagon"
                            AlphaAB_folder="user-defined"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaAB_deacetylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaAB_shape_name = "hexagon"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    if AlphaAB_deacetylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text() 
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaAB_shape_name = "hexagon"
                            AlphaAB_folder="user-defined"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaAB_deacetylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaAB_shape_name = "hexagon"
                            AlphaAB_folder="user-defined"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    if AlphaAB_deacetylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        dda = self.AlphaAB_dda_LineEdit.text()  
                        ph = self.AlphaAB_dda_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and dda and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaAB_shape_name = "hexagon"
                            AlphaAB_folder="user-defined"
                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-deacetylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, dda, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_deacetylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_deacetylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                ######-#####################--------------user-defined--------Hexagon-carboxylation----------------------##########################
                elif self.AlphaAB_carboxylationRadio.isChecked() and model == "Hexagon cross-section shape":
                    AlphaAB_carboxylation_plane_selection = self.AlphaAB_carboxylation_planeComboBox.currentText()

                    if  AlphaAB_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                        QMessageBox.warning(self, "Unsupported Operation", "(100) plane carboxylated chitin doesn't support hexagonal cross-section shape.")       
                    ###single plane modifications
                    elif AlphaAB_carboxylation_plane_selection == "Single (010) plane":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-1.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-1.py"
                            AlphaAB_folder="user-defined"
                            AlphaAB_shape_name = "hexagon"

                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaAB_carboxylation_plane_selection == "Two (010) planes":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-2.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-2.py"
                            AlphaAB_folder="user-defined"
                            AlphaAB_shape_name = "hexagon"

                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                    elif AlphaAB_carboxylation_plane_selection == "Single (120) plane (Only support hexagon cross-section)":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-120-1.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-120-1.py"
                            AlphaAB_folder="user-defined"
                            AlphaAB_shape_name = "hexagon"

                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                    elif AlphaAB_carboxylation_plane_selection == "Two (120) planes (Only support hexagon cross-section)":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-120-2.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-120-2.py"
                            AlphaAB_folder="user-defined"
                            AlphaAB_shape_name = "hexagon"

                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                    elif AlphaAB_carboxylation_plane_selection == "Single (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite-010-120.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite-010-120.py"
                            AlphaAB_folder="user-defined"
                            AlphaAB_shape_name = "hexagon"

                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")




                    elif AlphaAB_carboxylation_plane_selection == "Both (120) and (010) planes (Only support hexagon cross-section)":
                        AlphaAB_a_parm = self.AlphaAB_aParam.text()
                        AlphaAB_b_parm = self.AlphaAB_bParam.text()
                        AlphaAB_c_parm = self.AlphaAB_cParam.text()
                        AlphaAB_width  = self.AlphaAB_width.text()  
                        AlphaAB_height = self.AlphaAB_height.text()
                        AlphaAB_c_unit = self.AlphaAB_cRepeatUnits.text()
                        carboxylation = self.AlphaAB_carboxylation_LineEdit.text()  
                        ph = self.AlphaAB_carboxylation_pHLineEdit.text()
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()

                        if not AlphaAB_a_parm and AlphaAB_b_parm and AlphaAB_c_parm and AlphaAB_c_unit and AlphaAB_a_unit and AlphaAB_b_unit and carboxylation and ph and AlphaAB_ForceFieldType:
                            QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                            return
                        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
                        AlphaAB_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if AlphaAB_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            AlphaAB_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha_chitin-modified-finite.py"
                            AlphaAB_folder="user-defined"
                            AlphaAB_shape_name = "hexagon"

                        elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            QMessageBox.warning(self, "Unsupported Operation", "Currently, carboxylated chitin doesn't support Glycam06 Force Field.")       
                        #elif AlphaAB_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        #    AlphaAB_script_name = "infinite_experiment.py" if "Infinite" in AlphaAB_ForceFieldType else "finite_experiment.py"
                        #    AlphaAB_shape_name = "hexagon"
                        #    AlphaAB_folder_name = "glycam06"
                        try:    
                            AlphaAB_script_path = os.path.join(AlphaAB_base_dir, "function", "alpha-chitin-AB-carboxylation", AlphaAB_folder, AlphaAB_shape_name, AlphaAB_script_name)
                            AlphaAB_command = ["python", AlphaAB_script_path, AlphaAB_a_parm, AlphaAB_b_parm , AlphaAB_c_parm , AlphaAB_c_unit, AlphaAB_height, AlphaAB_width, carboxylation, ph]
                            AlphaAB_result = subprocess.run(AlphaAB_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if AlphaAB_result.returncode == 0:
                                AlphaAB_output = AlphaAB_result.stdout.strip()
                                self.AlphaAB_hexagon_carboxylation_Popup(AlphaAB_output)
                                self.AlphaAB_hexagon_carboxylation_Topology() 
                            else:
                                error_message = AlphaAB_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


##alpha-chitin-AB rectangle experimental data no modification windows output
    def AlphaAB_exp_rectangle_nochemical_Topology(self):  #native chitin topology
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "AB-configuration"
        AlphaAB_a_unit = self.AlphaAB_aRepeatUnits.text()
        AlphaAB_b_unit = self.AlphaAB_bRepeatUnits.text()
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path,AlphaAB_a_unit, AlphaAB_b_unit]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaAB_exp_rectangle_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Native α-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Native α-chitin Topology Generation Failed")

    def AlphaAB_exp_rectangle_nochemical_Popup(self, AlphaAB_rectangle_output):
        AlphaAB_rectangle_output = f"Native α-chitin-AB Generated Successfully"
        QMessageBox.information(self, "Build Result", AlphaAB_rectangle_output)

    def AlphaAB_exp_rectangle_nochemical_Topology_Popup(self):
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Native α-chitin-AB Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##alpha-chitin-AB rectangle experimental data deacetylation windows output
    def AlphaAB_exp_rectangle_deacetylation_Topology(self):  #native chitin topology
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaAB_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "AB-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaAB_exp_rectangle_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-AB Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-AB Topology Generation Failed")

    def AlphaAB_exp_rectangle_deacetylation_Popup(self, AlphaAB_rectangle_output):
        lines = [line.strip() for line in AlphaAB_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = parts[0].split(':')[1].strip()
        ph = parts[1].split(':')[1].strip()
        units = parts[2].split(':')[1].strip()
        message = f"Deacetylated α-chitin-AB was Generated Successfully!\nActual DDA: {dda}\nActual pH: {ph}\nDeprotonated units: {units}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaAB_exp_rectangle_deacetylation_Topology_Popup(self):
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-AB Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##alpha-chitin-A hexagon experimental data no modification windows output
    def AlphaAB_exp_hexagon_nochemical_Topology(self):  #native chitin topology
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "AB-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaAB_exp_hexagon_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Native α-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Native α-chitin Topology Generation Failed")


    def AlphaAB_exp_hexagon_nochemical_Popup(self, AlphaAB_hexagon_output):
        AlphaAB_hexagon_output = f"Native α-chitin-AB Generated Successfully"
        QMessageBox.information(self, "Build Result", AlphaAB_hexagon_output)


    def AlphaAB_exp_hexagon_nochemical_Topology_Popup(self):
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Native α-chitin-AB Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)




##alpha-chitin-AB rectangle deacetylation ---inside ----- windows output
    def AlphaAB_exp_rectangle_deacetylation_inside_Topology(self):   
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaAB_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "AB-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaAB_exp_rectangle_deacetylation_inside_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-AB Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-AB Topology Generation Failed")

    def AlphaAB_exp_rectangle_deacetylation_inside_Popup(self, AlphaAB_rectangle_output):
        lines = [line.strip() for line in AlphaAB_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = parts[0].split(':')[1].strip()
        units = parts[1].split(':')[1].strip()
        message = f"Deacetylated α-chitin-AB was Generated Successfully!\nActual DDA: {dda}\nDeacetylation units: {units}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaAB_exp_rectangle_deacetylation_inside_Topology_Popup(self):
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-AB Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##alpha-chitin-AB hexgonal deacetylation windows output
    def AlphaAB_hexagon_deacetylation_Topology(self):  #native chitin topology
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "AB-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaAB_hexagon_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated α-chitin-AB Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated α-chitin-AB Topology Generation Failed")

    def AlphaAB_hexagon_deacetylation_Popup(self, AlphaAB_hexagon_output):
        lines = [line.strip() for line in AlphaAB_hexagon_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = float(parts[0].split(':')[1].strip())   
        ph = float(parts[1].split(':')[1].strip())   
        units = float(parts[2].split(':')[1].strip())   
        dda_formatted = "{:.2f}".format(dda)
        ph_formatted = "{:.2f}".format(ph)
        units_formatted = "{:.2f}".format(units)
        message = f"Deacetylated α-chitin-AB was Generated Successfully!\nActual DDA: {dda_formatted}\nActual pH: {ph_formatted}\nDeprotonated units: {units_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaAB_hexagon_deacetylation_Topology_Popup(self):
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation α-chitin-AB Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##alpha-chitin-AB carboxylation (rectangle-cross-section) windows output
    def AlphaAB_exp_rectangle_carboxylation_Topology(self):  #native chitin topology
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in AlphaAB_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "rectangle"
        folder_name_l = "AB-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaAB_exp_rectangle_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated α-chitin-AB Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated α-chitin-AB Topology Generation Failed")

    def AlphaAB_exp_rectangle_carboxylation_Popup(self, AlphaAB_rectangle_output):
        lines = [line.strip() for line in AlphaAB_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated α-chitin-AB was Generated Successfully!\nActual carboxylation: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaAB_exp_rectangle_carboxylation_Topology_Popup(self):
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated α-chitin-AB Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)





##alpha-chitin-AB carboxylation (hexagonal-cross-section) windows output
    def AlphaAB_hexagon_carboxylation_Topology(self):  #native chitin topology
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "alpha-chitin_icm_topgen.py" if "Infinite" in AlphaAB_ForceFieldType else "alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "charmm36"
        folder_name_j = "alpha-chitin"
        folder_name_k = "hexagon"
        folder_name_l = "AB-configuration"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.AlphaAB_hexagon_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated α-chitin-AB Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated α-chitin-AB Topology Generation Failed")

    def AlphaAB_hexagon_carboxylation_Popup(self, AlphaAB_hexagon_output):
        lines = [line.strip() for line in AlphaAB_hexagon_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated α-chitin-AB was Generated Successfully!\nActual carboxylation: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def AlphaAB_hexagon_carboxylation_Topology_Popup(self):
        AlphaAB_ForceFieldType = self.AlphaAB_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in AlphaAB_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated α-chitin-AB Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##----------------------------------------------------------------alpha-chitin building-----------------------------------------------------



##----------------------------------------------------------------beta-chitin building------------------------------------------------------
    def populateBetaChitinTab(self, tab):
         betachitin_mainLayout = QVBoxLayout(tab)  # Primary layout to arrange content vertically
     
         betachitin_topLayout = QHBoxLayout()  # Use horizontal layout for top-aligned items
         betachitin_topLayout.setAlignment(Qt.AlignTop | Qt.AlignLeft)  # Align content to the top left
         betachitin_font = QFont("Arial", 13)
         betachitin_label = QLabel("Please select the crystal structure to build β-chitin crystallite:")
         betachitin_label.setFont(betachitin_font)
         betachitin_topLayout.addWidget(betachitin_label)  
 
         betachitin_comboBox = QComboBox()
         betachitin_comboBox.setFont(betachitin_font)
         betachitin_comboBox.addItem("Select here")  
         betachitin_comboBox.addItem("Anhydrous state")
         betachitin_comboBox.addItem("Dihydrous state")
         betachitin_comboBox.currentIndexChanged.connect(self.updateBetaChitinOptions)
         betachitin_topLayout.addWidget(betachitin_comboBox) 

         betachitin_mainLayout.addLayout(betachitin_topLayout)
 
         self.betaStackedWidget = QStackedWidget()    ############
         self.betaStackedWidget.addWidget(QWidget())  ########## Add an empty widget for the "Select here" option
         self.setupBetaChitinOptions()  
         self.setupBetaChitin_dihydrous_Options()   
         betachitin_mainLayout.addWidget(self.betaStackedWidget)



    def updateBetaChitinOptions(self, index):
        #print("Selected index in Beta ComboBox:", index)
        if index == 0:
            self.betaStackedWidget.setVisible(False)
        elif index == 1:
            self.betaStackedWidget.setCurrentIndex(1)
            self.betaStackedWidget.setVisible(True)
        elif index == 2:
            self.betaStackedWidget.setCurrentIndex(2)
            self.betaStackedWidget.setVisible(True)        

##########beta-chitin-solid state        
    def setupBetaChitinOptions(self):
        self.betachitinoptions = QWidget()
        self.betaStackedWidget.addWidget(self.betachitinoptions)  
        betachitin_layout = QVBoxLayout(self.betachitinoptions)  # Parent the layout to the widget directly
        betachitin_layout.setAlignment(Qt.AlignTop)
        betachitin_font = QFont("Arial", 13)

        self.betachitin_radioGroup = QGroupBox("Parameter Type")
        self.betachitin_radioGroup.setAlignment(Qt.AlignTop)
        betachitin_topLineLayout = QHBoxLayout()
        betachitin_bottomLineLayout = QHBoxLayout()
        
        #self.betachitin_XRay = QRadioButton("Crystallographic Parameters from X-Ray Diffraction Experiments")
        self.betachitin_Neutron = QRadioButton("Crystallographic Parameters from Neutron Diffraction Diffraction Experiments")
        self.betachitin_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")

        #self.betachitin_XRay.setFont(betachitin_font)
        self.betachitin_Neutron.setFont(betachitin_font)
        self.betachitin_UserDefined.setFont(betachitin_font)

        #betachitin_topLineLayout.addWidget(self.betachitin_XRay)
        betachitin_bottomLineLayout.addWidget(self.betachitin_Neutron)
        betachitin_bottomLineLayout.addWidget(self.betachitin_UserDefined)

        betachitin_layout.addLayout(betachitin_bottomLineLayout)
        #betachitin_layout.addLayout(betachitin_bottomLineLayout)


        # Combo box setup
        self.betachitin_ComboBox = QComboBox(self.betachitinoptions)
        self.betachitin_ComboBox.addItem("Please select the crystallite shape")
        self.betachitin_ComboBox.addItems(["Rectangle cross-section shape", "Parallelogram cross-section shape"])
        self.betachitin_ComboBox.setVisible(False)
        betachitin_layout.addWidget(self.betachitin_ComboBox)

        # Connecting radio buttons to toggle visibility
        #self.betachitin_XRay.toggled.connect(self.betachitin_Visibility)
        self.betachitin_Neutron.toggled.connect(self.betachitin_Visibility)
        self.betachitin_UserDefined.toggled.connect(self.betachitin_Visibility)
        self.betachitin_ComboBox.currentIndexChanged.connect(self.betachitin_updateParametersDisplay)

        # Parameter display setup
        self.betachitin_parametersGroup = QGroupBox("Crystallographic parameters")
        betachitin_parametersLayout = QVBoxLayout()  
        self.betachitin_parametersGroup.setLayout(betachitin_parametersLayout)
        self.betachitin_parametersGroup.setVisible(False)
        betachitin_layout.addWidget(self.betachitin_parametersGroup)

        self.betachitin_initParameterWidgets(betachitin_font)

        self.betachitin_imageLabel = QLabel(self)
        self.betachitin_imageLabel.setFixedSize(1000, 250) 
        self.betachitin_imageLabel.setAlignment(Qt.AlignCenter)
        self.betachitin_imageLabel.setScaledContents(True)
        betachitin_layout.addWidget(self.betachitin_imageLabel)
        self.betachitin_imageLabel.clear()
        betachitin_layout.addWidget(self.betachitin_imageLabel)
        betachitin_layout.setAlignment(self.betachitin_imageLabel, Qt.AlignCenter)  
        self.betachitin_ComboBox.currentIndexChanged.connect(self.betachitin_updateImageDisplay) 

        ###cititation for beta chitin crystallographic parameter
        self.betachitin_citation1Label = QLabel("Crystallographic parameter reference: Nishiyama et al. Macromolecules. 2011;44(4):950-7.")
        self.betachitin_citation2Label = QLabel("Crystallographic parameter reference: Sawada et al. Biomacromolecules. 2012,13,288−291.")
        self.betachitin_citation1Label.setWordWrap(True)
        self.betachitin_citation2Label.setWordWrap(True)
        betachitin_citation_font_1 = self.betachitin_citation1Label.font()
        betachitin_citation_font_1.setPointSize(6) 
        self.betachitin_citation1Label.setFont(betachitin_citation_font_1)
        betachitin_layout.addWidget(self.betachitin_citation1Label)
        betachitin_citation_font_2= self.betachitin_citation2Label.font()
        betachitin_citation_font_2.setPointSize(6) 
        self.betachitin_citation2Label.setFont(betachitin_citation_font_2)
        betachitin_layout.addWidget(self.betachitin_citation2Label)

        self.betachitin_citation2Label.hide()
        self.betachitin_citation1Label.hide()

        # Connect combo box selection changes to update display
        self.betachitin_ComboBox.currentIndexChanged.connect(self.betachitin_updateParametersDisplay)
 
        # Invoke button setup, initially hidden
        self.betachitin_invokeButton = QPushButton("Invoke Script")
        self.betachitin_invokeButton.setVisible(False)
        self.betachitin_invokeButton.clicked.connect(self.betachitin_invokeScript)
        betachitin_layout.addWidget(self.betachitin_invokeButton)



    def betachitin_updateImageDisplay(self, index):
        betachitin_shape = self.betachitin_ComboBox.currentText()
        if betachitin_shape == "Rectangle cross-section shape":
            betachitin_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'beta-chitin', 'beta-chitin-rectangle.png') )
        elif betachitin_shape == "Parallelogram cross-section shape":
            betachitin_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'beta-chitin', 'beta-chitin-parallelogram.png') )
        else:
            self.betachitin_imageLabel.clear()
            return
        self.betachitin_imageLabel.setPixmap(betachitin_pixmap)
        self.betachitin_imageLabel.show()

    def betachitin_initParameterWidgets(self, font):
        # Create two horizontal layouts
        self.betachitin_paramLine1 = QHBoxLayout()
        self.betachitin_paramLine2 = QHBoxLayout()
        self.betachitin_paramLine3 = QHBoxLayout()

        # Initialize QLineEdit objects for parameters and repeat units
        self.betachitin_aParam = QLineEdit()
        self.betachitin_bParam = QLineEdit()
        self.betachitin_cParam = QLineEdit()
        self.betachitin_gammaParam = QLineEdit()
        self.betachitin_aRepeatUnits = QLineEdit()
        self.betachitin_bRepeatUnits = QLineEdit()
        self.betachitin_cRepeatUnits = QLineEdit()
        
        self.betachitin_width = QLineEdit()
        self.betachitin_height = QLineEdit()
        # Add widgets to first line layout
        self.betachitin_setupParameterWidget("a (Å)", self.betachitin_aParam, True, "", self.betachitin_paramLine1, font)
        self.betachitin_setupParameterWidget("b (Å)", self.betachitin_bParam, True, "", self.betachitin_paramLine1, font)
        self.betachitin_setupParameterWidget("c (Å)", self.betachitin_cParam, True, "", self.betachitin_paramLine1, font)

        self.betachitin_setupParameterWidget("gamma angle γ (°)", self.betachitin_gammaParam, True, "", self.betachitin_paramLine1, font)
        
        self.betachitin_setupParameterWidget("Cross-section height (010 length) (Å)", self.betachitin_height, True, "", self.betachitin_paramLine2, font)
        self.betachitin_setupParameterWidget("Cross-section width (1-20 length) (Å)", self.betachitin_width, True, "", self.betachitin_paramLine2, font)

        self.betachitin_setupParameterWidget("a repetition", self.betachitin_aRepeatUnits, True, "", self.betachitin_paramLine3, font)
        self.betachitin_setupParameterWidget("b repetition", self.betachitin_bRepeatUnits, True, "", self.betachitin_paramLine3, font)
        self.betachitin_setupParameterWidget("c repetition", self.betachitin_cRepeatUnits, True, "", self.betachitin_paramLine3, font)

        # Add both lines to the group box layout
        self.betachitin_parametersGroup.layout().addLayout(self.betachitin_paramLine1)
        self.betachitin_parametersGroup.layout().addLayout(self.betachitin_paramLine2)
        self.betachitin_parametersGroup.layout().addLayout(self.betachitin_paramLine3)


    def betachitin_setupParameterWidget(self, betachitin_label, betachitin_widget, readOnly, betachitin_defaultValue, betachitin_layout, betachitin_font):
        betachitin_labelWidget = QLabel(betachitin_label)
        betachitin_labelWidget.setFont(betachitin_font)
        betachitin_widget.setFont(betachitin_font)
        betachitin_widget.setReadOnly(readOnly)
        betachitin_widget.setText(betachitin_defaultValue)
        if readOnly:
            betachitin_widget.setStyleSheet("background-color: lightgrey;")
        betachitin_layout.addWidget(betachitin_labelWidget)
        betachitin_layout.addWidget(betachitin_widget)
    

    def betachitin_updateReadOnlyState(self, betachitin_widget, readOnly):
        betachitin_widget.setReadOnly(readOnly)
        if readOnly:
            betachitin_widget.setStyleSheet("background-color: #D3D3D3;")  # Light grey background
            betachitin_widget.setEnabled(False)  # Optionally disable the widget to make it clear it's not interactive
        else:
            betachitin_widget.setStyleSheet("background-color: white;")
            betachitin_widget.setEnabled(True)  # Re-enable the widget for user interaction

    def betachitin_Visibility(self, checked):
        self.betachitin_ComboBox.setVisible(checked)
        if checked:
            self.betachitin_ComboBox.setCurrentIndex(0) 
            self.betachitin_parametersGroup.setVisible(False)
        else:
            self.betachitin_ComboBox.setVisible(False)
            self.betachitin_parametersGroup.setVisible(False)

    def betachitin_updateParametersDisplay(self):
        if self.betachitin_ComboBox.currentIndex() == 0:
            self.betachitin_parametersGroup.setVisible(False)
        else:
            self.betachitin_parametersGroup.setVisible(True)
            model = self.betachitin_ComboBox.currentText()
            if self.betachitin_Neutron.isChecked() :
                self.betachitin_citation1Label.show()
                self.betachitin_citation2Label.show()
                if model == "Rectangle cross-section shape":
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.betachitin_setupModificationsSection(self.betachitin_parametersGroup.layout(), QFont("Arial", 13))
                    self.betachitin_aParam.clear()
                    self.betachitin_bParam.clear()
                    self.betachitin_cParam.clear()
                    self.betachitin_gammaParam.clear()
                    self.betachitin_aRepeatUnits.clear()
                    self.betachitin_bRepeatUnits.clear()
                    self.betachitin_cRepeatUnits.clear()
                    self.betachitin_width.clear()
                    self.betachitin_height.clear()

                    self.betachitin_aParam.setText("4.82")
                    self.betachitin_bParam.setText("9.24")
                    self.betachitin_cParam.setText("10.384")
                    self.betachitin_gammaParam.setText("97.16")


                    self.betachitin_updateReadOnlyState(self.betachitin_aParam, True)    
                    self.betachitin_updateReadOnlyState(self.betachitin_bParam, True)             
                    self.betachitin_updateReadOnlyState(self.betachitin_cParam, True) 
                    self.betachitin_updateReadOnlyState(self.betachitin_gammaParam, True)
                    self.betachitin_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_cParam.setStyleSheet("background-color: #D3D3D3;")  
                    self.betachitin_gammaParam.setStyleSheet("background-color: #D3D3D3;")  

                    self.betachitin_updateReadOnlyState(self.betachitin_width, True)             
                    self.betachitin_updateReadOnlyState(self.betachitin_height, True)   
                    self.betachitin_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.betachitin_updateReadOnlyState(self.betachitin_bRepeatUnits, False)     
                    self.betachitin_updateReadOnlyState(self.betachitin_aRepeatUnits, False)   
                    self.betachitin_updateReadOnlyState(self.betachitin_cRepeatUnits, False)    
                    self.betachitin_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.betachitin_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.betachitin_cRepeatUnits.setStyleSheet("background-color: white;") 
                    
                elif model == "Parallelogram cross-section shape":
                    self.betachitin_setupModificationsSection(self.betachitin_parametersGroup.layout(), QFont("Arial", 13))
                    self.betachitin_aParam.clear()
                    self.betachitin_bParam.clear()
                    self.betachitin_cParam.clear()
                    self.betachitin_gammaParam.clear()
                    self.betachitin_aRepeatUnits.clear()
                    self.betachitin_bRepeatUnits.clear()
                    self.betachitin_cRepeatUnits.clear()
                    self.betachitin_width.clear()
                    self.betachitin_height.clear()

                    self.betachitin_aParam.setText("4.82")
                    self.betachitin_bParam.setText("9.24")
                    self.betachitin_cParam.setText("10.384")
                    self.betachitin_gammaParam.setText("97.16")

                    self.betachitin_updateReadOnlyState(self.betachitin_aParam, True)    
                    self.betachitin_updateReadOnlyState(self.betachitin_bParam, True)             
                    self.betachitin_updateReadOnlyState(self.betachitin_cParam, True) 
                    self.betachitin_updateReadOnlyState(self.betachitin_gammaParam, True)
                    self.betachitin_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_cParam.setStyleSheet("background-color: #D3D3D3;")  
                    self.betachitin_gammaParam.setStyleSheet("background-color: #D3D3D3;")                  

                    self.betachitin_updateReadOnlyState(self.betachitin_width,  False)             
                    self.betachitin_updateReadOnlyState(self.betachitin_height, False)   
                    self.betachitin_width.setStyleSheet("background-color:  white;") 
                    self.betachitin_height.setStyleSheet("background-color: white;")     


                    self.betachitin_updateReadOnlyState(self.betachitin_bRepeatUnits, True)     
                    self.betachitin_updateReadOnlyState(self.betachitin_aRepeatUnits, True)   
                    self.betachitin_updateReadOnlyState(self.betachitin_cRepeatUnits, False)    
                    self.betachitin_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_cRepeatUnits.setStyleSheet("background-color: white;") 
            

            elif self.betachitin_UserDefined.isChecked() :
                self.betachitin_citation1Label.hide()
                self.betachitin_citation2Label.hide()
                if model == "Rectangle cross-section shape":
                    self.betachitin_setupModificationsSection(self.betachitin_parametersGroup.layout(), QFont("Arial", 13))
                    self.betachitin_aParam.clear()
                    self.betachitin_bParam.clear()
                    self.betachitin_cParam.clear()
                    self.betachitin_gammaParam.clear()
                    self.betachitin_aRepeatUnits.clear()
                    self.betachitin_bRepeatUnits.clear()
                    self.betachitin_cRepeatUnits.clear()
                    self.betachitin_width.clear()
                    self.betachitin_height.clear()

                    self.betachitin_updateReadOnlyState(self.betachitin_aParam, False)    
                    self.betachitin_updateReadOnlyState(self.betachitin_bParam, False)             
                    self.betachitin_updateReadOnlyState(self.betachitin_cParam, False) 
                    self.betachitin_updateReadOnlyState(self.betachitin_gammaParam, False) 
                    self.betachitin_aParam.setStyleSheet("background-color: white;") 
                    self.betachitin_bParam.setStyleSheet("background-color: white;") 
                    self.betachitin_cParam.setStyleSheet("background-color: white;")  
                    self.betachitin_gammaParam.setStyleSheet("background-color: white;")  

                    self.betachitin_updateReadOnlyState(self.betachitin_width, True)             
                    self.betachitin_updateReadOnlyState(self.betachitin_height, True)   
                    self.betachitin_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.betachitin_updateReadOnlyState(self.betachitin_bRepeatUnits, False)     
                    self.betachitin_updateReadOnlyState(self.betachitin_aRepeatUnits, False)   
                    self.betachitin_updateReadOnlyState(self.betachitin_cRepeatUnits, False)    
                    self.betachitin_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.betachitin_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.betachitin_cRepeatUnits.setStyleSheet("background-color: white;")    
    
                elif model == "Parallelogram cross-section shape":
                    self.betachitin_setupModificationsSection(self.betachitin_parametersGroup.layout(), QFont("Arial", 13))
                    self.betachitin_aParam.clear()
                    self.betachitin_bParam.clear()
                    self.betachitin_cParam.clear()
                    self.betachitin_gammaParam.clear()
                    self.betachitin_aRepeatUnits.clear()
                    self.betachitin_bRepeatUnits.clear()
                    self.betachitin_cRepeatUnits.clear()
                    self.betachitin_width.clear()
                    self.betachitin_height.clear()

                    self.betachitin_updateReadOnlyState(self.betachitin_aParam, False)    
                    self.betachitin_updateReadOnlyState(self.betachitin_bParam, False)             
                    self.betachitin_updateReadOnlyState(self.betachitin_cParam, False)  
                    self.betachitin_updateReadOnlyState(self.betachitin_gammaParam, False) 
                    self.betachitin_aParam.setStyleSheet("background-color: white;") 
                    self.betachitin_bParam.setStyleSheet("background-color: white;") 
                    self.betachitin_cParam.setStyleSheet("background-color: white;")   
                    self.betachitin_gammaParam.setStyleSheet("background-color: white;")                   

                    self.betachitin_updateReadOnlyState(self.betachitin_width,  False)             
                    self.betachitin_updateReadOnlyState(self.betachitin_height, False)   
                    self.betachitin_width.setStyleSheet("background-color:  white;") 
                    self.betachitin_height.setStyleSheet("background-color: white;")     


                    self.betachitin_updateReadOnlyState(self.betachitin_bRepeatUnits, True)     
                    self.betachitin_updateReadOnlyState(self.betachitin_aRepeatUnits, True)   
                    self.betachitin_updateReadOnlyState(self.betachitin_cRepeatUnits, False)    
                    self.betachitin_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.betachitin_cRepeatUnits.setStyleSheet("background-color: white;")       
            else:
                # Hide modification options if not the specific model and type
                for i in reversed(range(self.betachitin_modificationsLayout.count())): 
                    self.betachitin_modificationsLayout.itemAt(i).widget().setParent(None)

    def betachitin_setupModificationsSection(self, betachitin_layout, betachitin_font):
        # Add a layout for modifications if it doesn't exist
        if not hasattr(self, 'betachitin_modificationsLayout'):
            self.betachitin_modificationsLayout = QHBoxLayout()
            self.betachitin_deacetylationRadio = QRadioButton("Deacetylation")
            self.betachitin_carboxylationRadio = QRadioButton("Carboxylation")
            self.betachitin_noModRadio = QRadioButton("No Modification")
            self.betachitin_deacetylationRadio.setFont(betachitin_font)
            self.betachitin_carboxylationRadio.setFont(betachitin_font)
            self.betachitin_noModRadio.setFont(betachitin_font)
            self.betachitin_modificationsLayout.addWidget(self.betachitin_deacetylationRadio)
            self.betachitin_modificationsLayout.addWidget(self.betachitin_carboxylationRadio)
            self.betachitin_modificationsLayout.addWidget(self.betachitin_noModRadio)
            betachitin_layout.addLayout(self.betachitin_modificationsLayout)

            # Setup Inputs and Connections
            self.betachitin_setupModificationInputs()
            betachitin_layout.addWidget(self.betachitin_modificationInputsWidget)
            self.betachitin_deacetylationRadio.toggled.connect(lambda checked: self.betachitin_updateModificationInputs("Deacetylation", checked))
            self.betachitin_carboxylationRadio.toggled.connect(lambda checked: self.betachitin_updateModificationInputs("Carboxylation", checked))
            self.betachitin_noModRadio.toggled.connect(lambda checked: self.betachitin_updateModificationInputs("None", checked))


            # Generate Structure Button
            betachitin_Font = QFont("Arial", 13)
            self.betachitin_invokeButton = QPushButton("Generate Structure")
            self.betachitin_invokeButton.setFont(betachitin_Font)
            self.betachitin_invokeButton.setVisible(False)  # Initially hidden
            self.betachitin_invokeButton.clicked.connect(self.betachitin_invokeScript)  # Connect to invoke script logic
            betachitin_layout.addWidget(self.betachitin_invokeButton)
            
    def betachitin_setupModificationInputs(self):
        self.betachitin_modificationInputsWidget = QWidget()
        betachitin_modification_mainLayout = QVBoxLayout(self.betachitin_modificationInputsWidget)
        betachitin_font = QFont("Arial", 13)
        betachitin_font_Sel = QFont("Arial", 12)

        betachitin_deacetyl_plane_layout = QHBoxLayout()
        self.betachitin_deacetyl_planeLabel = QLabel("Please select β-chitin plane for deacetylation modifications:")
        self.betachitin_deacetyl_planeLabel.setFont(betachitin_font)
        self.betachitin_deacetyl_planeComboBox = QComboBox()
        self.betachitin_deacetyl_planeComboBox.setFont(betachitin_font_Sel)
        self.betachitin_deacetyl_planeComboBox.addItems([ "Select here",
                                                      "Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (1-20) plane (Only support parallelogram cross-section)",
                                                      "Two (1-20) planes (Only support parallelogram cross-section)",
                                                      "Single (1-20) and (010) planes (Only support parallelogram cross-section)",
                                                      "Both (1-20) and (010) planes (Only support parallelogram cross-section)", 
                                                      "Inside the β-chitin"])
        betachitin_deacetyl_plane_layout.addWidget(self.betachitin_deacetyl_planeLabel)
        betachitin_deacetyl_plane_layout.addWidget(self.betachitin_deacetyl_planeComboBox)
        betachitin_modification_mainLayout.addLayout(betachitin_deacetyl_plane_layout)


        # Degree of carboxylation input
        betachitin_carboxylation_plane_layout = QHBoxLayout()
        self.betachitin_carboxylation_planeLabel = QLabel("Please select β-chitin plane for carboxylation modifications:")
        self.betachitin_carboxylation_planeLabel.setFont(betachitin_font)
        self.betachitin_carboxylation_planeComboBox = QComboBox()
        self.betachitin_carboxylation_planeComboBox.setFont(betachitin_font_Sel)
        self.betachitin_carboxylation_planeComboBox.addItems([ "Select here",
                                                      "Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (1-20) plane (Only support parallelogram cross-section)",
                                                      "Two (1-20) planes (Only support parallelogram cross-section)",
                                                      "Single (1-20) and (010) planes (Only support parallelogram cross-section)",
                                                      "Both (1-20) and (010) planes (Only support parallelogram cross-section)"])
        betachitin_carboxylation_plane_layout.addWidget(self.betachitin_carboxylation_planeLabel)
        betachitin_carboxylation_plane_layout.addWidget(self.betachitin_carboxylation_planeComboBox)
        betachitin_modification_mainLayout.addLayout(betachitin_carboxylation_plane_layout)


        ##dda and pH for deacetylations
        betachitin_dda_pH_layout = QHBoxLayout()
        self.betachitin_dda_Label = QLabel("Degree of deacetylation (≥0 and <1):")
        #self.betachitin_dda_Label.setFixedSize(QSize(500, 40))
        self.betachitin_dda_Label.setFont(betachitin_font)
        self.betachitin_dda_LineEdit = QLineEdit()
        self.betachitin_dda_LineEdit.setFont(betachitin_font)
        self.betachitin_dda_LineEdit.setFixedSize(QSize(200, 40))

        # pH input (specific to Deacetylation)
        self.betachitin_dda_pHLabel = QLabel("pH level of β-chitin structure (>0 and <14):")
        self.betachitin_dda_pHLabel.setFont(betachitin_font)
        #self.betachitin_dda_pHLabel.addSpacing(150)
        self.betachitin_dda_pHLineEdit = QLineEdit()
        self.betachitin_dda_pHLineEdit.setFont(betachitin_font)
        self.betachitin_dda_pHLineEdit.setFixedSize(QSize(200, 40))

        betachitin_dda_pH_layout.addWidget(self.betachitin_dda_Label)
        betachitin_dda_pH_layout.addWidget(self.betachitin_dda_LineEdit)
        betachitin_dda_pH_layout.addSpacing(100)  ##space between dda and pH
        betachitin_dda_pH_layout.addWidget(self.betachitin_dda_pHLabel)
        betachitin_dda_pH_layout.addWidget(self.betachitin_dda_pHLineEdit)
        betachitin_modification_mainLayout.addLayout(betachitin_dda_pH_layout)

        # Degree of carboxylation input
        betachitin_carboxylation_pH_layout = QHBoxLayout()
        self.betachitin_carboxylation_Label = QLabel("Surface charge density (unit: mmol/g):")
        self.betachitin_carboxylation_Label.setFont(betachitin_font)
        self.betachitin_carboxylation_LineEdit = QLineEdit()
        self.betachitin_carboxylation_LineEdit.setFont(betachitin_font)
        self.betachitin_carboxylation_LineEdit.setFixedSize(QSize(200, 40))
        self.betachitin_carboxylation_pHLabel = QLabel("pH level of β-chitin structure (>0 and <14):")
        self.betachitin_carboxylation_pHLabel.setFont(betachitin_font)
        self.betachitin_carboxylation_pHLineEdit = QLineEdit()
        self.betachitin_carboxylation_pHLineEdit.setFont(betachitin_font)
        self.betachitin_carboxylation_pHLineEdit.setFixedSize(QSize(200, 40))
        betachitin_carboxylation_pH_layout.addWidget(self.betachitin_carboxylation_Label)
        betachitin_carboxylation_pH_layout.addWidget(self.betachitin_carboxylation_LineEdit)
        betachitin_carboxylation_pH_layout.addSpacing(100)  ##space between dda and pH
        betachitin_carboxylation_pH_layout.addWidget(self.betachitin_carboxylation_pHLabel)
        betachitin_carboxylation_pH_layout.addWidget(self.betachitin_carboxylation_pHLineEdit)
        betachitin_modification_mainLayout.addLayout(betachitin_carboxylation_pH_layout)


        betachitin_ForceField_layout = QHBoxLayout()
        self.betachitin_ForceFieldTypeLabel = QLabel("Atomistic Simulation Force Field:")
        self.betachitin_ForceFieldTypeLabel.setFont(betachitin_font)
        self.betachitin_ForceFieldTypeselector = QComboBox()
        self.betachitin_ForceFieldTypeselector.setFont(betachitin_font)
        #self.betachitin_ForceFieldTypeLabel.setFixedSize(550, 60)  # Width of 200 pixels and height of 20 pixels
        self.betachitin_ForceFieldTypeselector.addItem("Please select the force field for atomistic simulations", True)
        self.betachitin_ForceFieldTypeselector.addItem("CHARMM36 Infinite Chain Model", False)
        self.betachitin_ForceFieldTypeselector.addItem("CHARMM36 Finite Chain Model", False)
        self.betachitin_ForceFieldTypeselector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.betachitin_ForceFieldTypeselector.addItem("GLYCAM06 Finite Chain Model", False)
        betachitin_ForceField_layout.addWidget(self.betachitin_ForceFieldTypeLabel)
        betachitin_ForceField_layout.addWidget(self.betachitin_ForceFieldTypeselector)
        betachitin_modification_mainLayout.addLayout(betachitin_ForceField_layout)

        self.betachitin_deacetyl_planeLabel.setVisible(False)
        self.betachitin_deacetyl_planeComboBox.setVisible(False)
        self.betachitin_carboxylation_planeLabel.setVisible(False)
        self.betachitin_carboxylation_planeComboBox.setVisible(False)


        self.betachitin_dda_Label.setVisible(False)
        self.betachitin_dda_LineEdit.setVisible(False)
        self.betachitin_dda_pHLabel.setVisible(False)
        self.betachitin_dda_pHLineEdit.setVisible(False)

        self.betachitin_carboxylation_Label.setVisible(False)
        self.betachitin_carboxylation_LineEdit.setVisible(False)
        self.betachitin_carboxylation_pHLabel.setVisible(False)
        self.betachitin_carboxylation_pHLineEdit.setVisible(False)


        self.betachitin_ForceFieldTypeLabel.setVisible(False)
        self.betachitin_ForceFieldTypeselector.setVisible(False)

        self.betachitin_deacetyl_planeComboBox.currentIndexChanged.connect(
        lambda: self.betachitin_manageVisibilityAndStylesForDeacetylation(
            self.betachitin_deacetyl_planeComboBox.currentText()
           )
        )
        self.betachitin_modificationInputsWidget.setLayout(betachitin_modification_mainLayout)

        self.betachitin_carboxylation_planeComboBox.currentIndexChanged.connect(
        lambda: self.betachitin_manageVisibilityAndStylesForCarboxylation(
            self.betachitin_carboxylation_planeComboBox.currentText()
           )
        )
        self.betachitin_modificationInputsWidget.setLayout(betachitin_modification_mainLayout)


    def betachitin_updateModificationInputs(self, betachitin_modificationType, checked):
        if checked:
            if  betachitin_modificationType == "Deacetylation":
                betachitin_deacetylation_plane_selection = self.betachitin_deacetyl_planeComboBox.currentText()
                self.betachitin_manageVisibilityAndStylesForDeacetylation(betachitin_deacetylation_plane_selection)

            elif betachitin_modificationType == "Carboxylation":
                betachitin_carboxylation_plane_selection = self.betachitin_carboxylation_planeComboBox.currentText()
                self.betachitin_manageVisibilityAndStylesForCarboxylation(betachitin_carboxylation_plane_selection)
            elif  betachitin_modificationType == "None":
                self.betachitin_dda_Label.setVisible(False)
                self.betachitin_dda_LineEdit.setVisible(False)
                self.betachitin_carboxylation_Label.setVisible(False)
                self.betachitin_carboxylation_LineEdit.setVisible(False)

                self.betachitin_carboxylation_pHLabel.setVisible(False)
                self.betachitin_carboxylation_pHLineEdit.setVisible(False)
                self.betachitin_dda_pHLabel.setVisible(False)
                self.betachitin_dda_pHLineEdit.setVisible(False)

    
                self.betachitin_deacetyl_planeLabel.setVisible(False)
                self.betachitin_deacetyl_planeComboBox.setVisible(False)
                self.betachitin_carboxylation_planeLabel.setVisible(False)
                self.betachitin_carboxylation_planeComboBox.setVisible(False)


                self.betachitin_ForceFieldTypeLabel.setVisible(True)
                self.betachitin_ForceFieldTypeselector.setVisible(True)
                self.betachitin_invokeButton.setVisible(True)  # Show "Generate Structure" button
        else:
            self.betachitin_dda_Label.setVisible(False)
            self.betachitin_dda_LineEdit.setVisible(False)
            self.betachitin_carboxylation_Label.setVisible(False)
            self.betachitin_carboxylation_LineEdit.setVisible(False)


            self.betachitin_dda_pHLabel.setVisible(False)
            self.betachitin_dda_pHLineEdit.setVisible(False)
            self.betachitin_carboxylation_pHLabel.setVisible(False)
            self.betachitin_carboxylation_pHLineEdit.setVisible(False)


            self.betachitin_deacetyl_planeLabel.setVisible(False)
            self.betachitin_deacetyl_planeComboBox.setVisible(False)
            self.betachitin_carboxylation_planeLabel.setVisible(False)
            self.betachitin_carboxylation_planeComboBox.setVisible(False)


            self.betachitin_ForceFieldTypeLabel.setVisible(False)
            self.betachitin_ForceFieldTypeselector.setVisible(False)
            self.betachitin_invokeButton.setVisible(False)  

    def betachitin_manageVisibilityAndStylesForDeacetylation(self, betachitin_deacetylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.betachitin_deacetyl_planeLabel.setVisible(True)
        self.betachitin_deacetyl_planeComboBox.setVisible(True)
        self.betachitin_carboxylation_planeLabel.setVisible(False)
        self.betachitin_carboxylation_planeComboBox.setVisible(False)
        self.betachitin_dda_Label.setVisible(True)
        self.betachitin_dda_LineEdit.setVisible(True)
        self.betachitin_dda_pHLabel.setVisible(True)
        self.betachitin_dda_pHLineEdit.setVisible(True)
        self.betachitin_carboxylation_Label.setVisible(False)
        self.betachitin_carboxylation_LineEdit.setVisible(False)
        self.betachitin_carboxylation_pHLabel.setVisible(False)
        self.betachitin_carboxylation_pHLineEdit.setVisible(False)
        self.betachitin_ForceFieldTypeLabel.setVisible(True)
        self.betachitin_ForceFieldTypeselector.setVisible(True)
        self.betachitin_invokeButton.setVisible(True)
    
        if betachitin_deacetylation_plane_selection in ["Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (1-20) plane (Only support parallelogram cross-section)",
                                                      "Two (1-20) planes (Only support parallelogram cross-section)",
                                                      "Single (1-20) and (010) planes (Only support parallelogram cross-section)",
                                                      "Both (1-20) and (010) planes (Only support parallelogram cross-section)", ]:
            self.betachitin_dda_LineEdit.setReadOnly(False)
            self.betachitin_dda_LineEdit.setStyleSheet("background-color: white;")
            self.betachitin_dda_pHLineEdit.setReadOnly(False)
            self.betachitin_dda_pHLineEdit.setStyleSheet("background-color: white;")
        elif betachitin_deacetylation_plane_selection == "Inside the β-chitin":
            self.betachitin_dda_LineEdit.setReadOnly(False)
            self.betachitin_dda_LineEdit.setStyleSheet("background-color: white;")
            self.betachitin_dda_pHLineEdit.setReadOnly(True)
            self.betachitin_dda_pHLineEdit.setStyleSheet("background-color: #D3D3D3;")



    def betachitin_manageVisibilityAndStylesForCarboxylation(self, betachitin_carboxylation_plane_selection):
        #print("Current plane selection:", plane_selection)  # Debug print to check the selection
        self.betachitin_deacetyl_planeLabel.setVisible(False)
        self.betachitin_deacetyl_planeComboBox.setVisible(False)
        self.betachitin_carboxylation_planeLabel.setVisible(True)
        self.betachitin_carboxylation_planeComboBox.setVisible(True)
        self.betachitin_dda_Label.setVisible(False)
        self.betachitin_dda_LineEdit.setVisible(False)
        self.betachitin_dda_pHLabel.setVisible(False)
        self.betachitin_dda_pHLineEdit.setVisible(False)
        self.betachitin_carboxylation_Label.setVisible(True)
        self.betachitin_carboxylation_LineEdit.setVisible(True)
        self.betachitin_carboxylation_pHLabel.setVisible(True)
        self.betachitin_carboxylation_pHLineEdit.setVisible(True)
        self.betachitin_ForceFieldTypeLabel.setVisible(True)
        self.betachitin_ForceFieldTypeselector.setVisible(True)
        self.betachitin_invokeButton.setVisible(True)
    
        if betachitin_carboxylation_plane_selection in ["Single (010) plane",        
                                                      "Two (010) planes", 
                                                      "Single (100) plane (Only support rectangle cross-section)",
                                                      "Two (100) planes (Only support rectangle cross-section)",
                                                      "Single (100) and (010) planes (Only support rectangle cross-section)",
                                                      "Both (100) and (010) planes (Only support rectangle cross-section)", 
                                                      "Single (1-20) plane (Only support parallelogram cross-section)",
                                                      "Two (1-20) planes (Only support parallelogram cross-section)",
                                                      "Single (1-20) and (010) planes (Only support parallelogram cross-section)",
                                                      "Both (1-20) and (010) planes (Only support parallelogram cross-section)", ]:
            self.betachitin_carboxylation_LineEdit.setReadOnly(False)
            self.betachitin_carboxylation_LineEdit.setStyleSheet("background-color: white;")
            self.betachitin_carboxylation_pHLineEdit.setReadOnly(False)
            self.betachitin_carboxylation_pHLineEdit.setStyleSheet("background-color: white;")
    


    def betachitin_invokeScript(self):
            model = self.betachitin_ComboBox.currentText()            

            ###neutron-diffraction-data ------------------------native structure-----------------------------
            if self.betachitin_Neutron.isChecked():
                #self.betachitin_ForceFieldTypeselector.setCurrentIndex(0)
                if model == "Rectangle cross-section shape":
                    if self.betachitin_noModRadio.isChecked():
                        betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                        betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                        betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                        if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                        betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                            betachitin_shape_name = "rectangle"
                            betachitin_folder_name = "charmm36"
                        elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                            betachitin_shape_name = "rectangle"
                            betachitin_folder_name = "glycam06"
                        try:    
                            betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin", betachitin_shape_name, betachitin_folder_name, betachitin_script_name)
                            betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit]
                            betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if betachitin_result.returncode == 0:
                                betachitin_output = betachitin_result.stdout.strip()
                                self.betachitin_exp_rectangle_nochemical_Popup(betachitin_output)
                                self.betachitin_exp_rectangle_nochemical_Topology()                    
                            else:
                                QMessageBox.warning(self, "Generation Failed")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n")
    


                    #----------------deacetylation  rectangle cross-section----
                     #----rectangle --------------neutron-----------deacetylation  deacetylationRadio
                    elif self.betachitin_deacetylationRadio.isChecked():
                        betachitin_deacetylation_plane_selection = self.betachitin_deacetyl_planeComboBox.currentText()
                        if  betachitin_deacetylation_plane_selection in ["Single (1-20) plane (Only support parallelogram cross-section)", "Two (1-20) planes (Only support parallelogram cross-section)", 
                                                                     "Single (1-20) and (010) planes (Only support parallelogram cross-section)", "Both (1-20) and (010) planes (Only support parallelogram cross-section)"]:
                            QMessageBox.warning(self, "Unsupported Operation", "(1-20) plane deacetylated chitin doesn't support rectangle cross-section shape.")
                        elif betachitin_deacetylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":
                            ##deacetylation parameter 
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":
                            ##deacetylation parameter 
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-100-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-100-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":
                            ##deacetylation parameter 
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-100-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-100-2-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":
                            ##deacetylation parameter 
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-100-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-100-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Two (010) planes":
                            ##deacetylation parameter 
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-2-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Single (010) plane":
                            ##deacetylation parameter 
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Inside the β-chitin":
                            ##deacetylation parameter 
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-modified-inside-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-modified-inside-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_inside_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_inside_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                     #----rectangle --------------neutron-----------carboxylation 
                    elif self.betachitin_carboxylationRadio.isChecked():
                        betachitin_carboxylation_plane_selection = self.betachitin_carboxylation_planeComboBox.currentText()
     
                        if  betachitin_carboxylation_plane_selection in ["Single (1-20) plane (Only support parallelogram cross-section)", "Two (1-20) planes (Only support parallelogram cross-section)", 
                                                                     "Single (1-20) and (010) planes (Only support parallelogram cross-section)", "Both (1-20) and (010) planes (Only support parallelogram cross-section)"]:
                            QMessageBox.warning(self, "Unsupported Operation", "(1-20) plane deacetylated chitin doesn't support rectangle cross-section shape.")
                        elif betachitin_carboxylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":
        
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_carboxylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":
        
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-100-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-100-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":
        
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-100-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-100-2-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":
        
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-100-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-100-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Two (010) planes":
        
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-2-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Single (010) plane":
        
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-finite.py"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                 
                ### -------neutron--------------parallelogram--------cross-section 
                elif model == "Parallelogram cross-section shape":
                    if self.betachitin_noModRadio.isChecked():
                        betachitin_width  = self.betachitin_width.text()  
                        betachitin_height = self.betachitin_height.text()
                        betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                        if not betachitin_c_unit and betachitin_width and betachitin_height:
                            QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                            return
                        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                        betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                            betachitin_shape_name = "parallelogram"
                            betachitin_folder_name = "charmm36"
                        elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                            betachitin_shape_name = "parallelogram"
                            betachitin_folder_name = "glycam06"
                        try:    
                            betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin", betachitin_shape_name, betachitin_folder_name, betachitin_script_name)
                            betachitin_command = ["python", betachitin_script_path, betachitin_c_unit,   betachitin_height, betachitin_width]
                            betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if betachitin_result.returncode == 0:
                                betachitin_output = betachitin_result.stdout.strip()
                                self.betachitin_exp_parallelogram_nochemical_Popup(betachitin_output)
                                self.betachitin_exp_parallelogram_nochemical_Topology()                    
                            else:
                                error_message = betachitin_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))



                    #----------------deacetylation  parallelogram cross-section----
                     #----parallelogram --------------neutron-----------deacetylation  deacetylationRadio
                    elif self.betachitin_deacetylationRadio.isChecked():
                        betachitin_deacetylation_plane_selection = self.betachitin_deacetyl_planeComboBox.currentText()
                        if  betachitin_deacetylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                            
                            QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support parallelgram cross-section shape.")
                        elif betachitin_deacetylation_plane_selection == "Both (1-20) and (010) planes (Only support parallelogram cross-section)":
    
                            ##deacetylation parameter 
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
    

                        elif betachitin_deacetylation_plane_selection == "Single (1-20) and (010) planes (Only support parallelogram cross-section)":
    
                            ##deacetylation parameter 
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-120-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-120-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Two (1-20) planes (Only support parallelogram cross-section)":
    
                            ##deacetylation parameter 
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-120-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-120-2-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Single (1-20) plane (Only support parallelogram cross-section)":
    
                            ##deacetylation parameter 
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-120-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-120-infinite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Two (010) planes":
    
                            ##deacetylation parameter 
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-2-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Both (1-20) and (010) planes (Only support parallelogram cross-section)":
    
                            ##deacetylation parameter 
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Single (010) plane":
    
                            ##deacetylation parameter 
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                     #----parallelogram --------------neutron-----------carboxylation 
                    elif self.betachitin_carboxylationRadio.isChecked():
                        betachitin_carboxylation_plane_selection = self.betachitin_carboxylation_planeComboBox.currentText()
     
                        if  betachitin_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:    
                            QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support parallelgram cross-section shape.")
                        elif betachitin_carboxylation_plane_selection == "Both (1-20) and (010) planes (Only support parallelogram cross-section)":
        
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()    
                                                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Single (1-20) and (010) planes (Only support parallelogram cross-section)":
        
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-120-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-120-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                  
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Two (1-20) planes (Only support parallelogram cross-section)":
        
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-120-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-120-2-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")           



                        elif betachitin_carboxylation_plane_selection == "Single (1-20) plane (Only support parallelogram cross-section)":
        
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-120-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-120-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                     
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")     

                        elif betachitin_carboxylation_plane_selection == "Two (010) planes":
        
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-2-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                  
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")     
                                
                        elif betachitin_carboxylation_plane_selection == "Single (010) plane":
        
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and carboxylation parameters.")
                                return
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-finite.py"
                                betachitin_shape_name = "parallelogram"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")                                                                           
                                                
            ###user-defined crystallographic parameters native structure
            elif self.betachitin_UserDefined.isChecked():
                if model == "Rectangle cross-section shape":
                    if self.betachitin_noModRadio.isChecked():    
                        betachitin_a_parm = self.betachitin_aParam.text()
                        betachitin_b_parm = self.betachitin_bParam.text()
                        betachitin_c_parm = self.betachitin_cParam.text()
                        betachitin_gamma_parm = self.betachitin_gammaParam.text()
                        betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                        betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                        betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                        if not betachitin_a_parm and betachitin_b_parm and betachitin_c_parm  and betachitin_gamma_parm and betachitin_a_unit and betachitin_b_unit and betachitin_c_unit: 
                            QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                            return
                        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                        betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                            betachitin_ud_folder = "user-defined"
                            betachitin_shape_name = "rectangle"
                            betachitin_folder_name = "charmm36"
                        elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                            betachitin_ud_folder = "user-defined"
                            betachitin_shape_name = "rectangle"
                            betachitin_folder_name = "glycam06"
    
                        try:    
                            betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin", betachitin_ud_folder, betachitin_shape_name, betachitin_folder_name, betachitin_script_name)
                            betachitin_command = ["python", betachitin_script_path, betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit,  betachitin_c_unit]
                            betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if betachitin_result.returncode == 0:
                                betachitin_output = betachitin_result.stdout.strip()
                                self.betachitin_exp_rectangle_nochemical_Popup(betachitin_output)
                                self.betachitin_exp_rectangle_nochemical_Topology()                    
                            else:
                                error_message = betachitin_result.stderr.strip()
                                QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n")


                    ### beta-chitin---------user-defined-------rectangle-------------- deacetylation-----------
                    elif self.betachitin_deacetylationRadio.isChecked():
                        betachitin_deacetylation_plane_selection = self.betachitin_deacetyl_planeComboBox.currentText()
                        if  betachitin_deacetylation_plane_selection in ["Single (1-20) plane (Only support parallelogram cross-section)", "Two (1-20) planes (Only support parallelogram cross-section)", 
                                                                     "Single (1-20) and (010) planes (Only support parallelogram cross-section)", "Both (1-20) and (010) planes (Only support parallelogram cross-section)"]:
                            QMessageBox.warning(self, "Unsupported Operation", "(1-20) plane deacetylated chitin doesn't support rectangle cross-section shape.")
                        elif betachitin_deacetylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":
                            ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":
                            ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-100-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-100-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":
                            ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-100-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-100-2-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":
                            ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-100-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-100-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Two (010) planes":
                            ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-2-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Single (010) plane":
                            ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")
                        
                        ###user-defined deacetylation-inside beta-chitin
                        elif betachitin_deacetylation_plane_selection == "Inside the β-chitin":
                            ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and dda and ph and betachitin_ForceFieldType:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-modified-inside-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-modified-inside-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name,  betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path, betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, dda]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_deacetylation_inside_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_deacetylation_inside_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                ### beta-chitin---------user-defined-------rectangle-------------- carboxylation-----------
                    elif self.betachitin_carboxylationRadio.isChecked():
                        betachitin_carboxylation_plane_selection = self.betachitin_carboxylation_planeComboBox.currentText()
                        if  betachitin_carboxylation_plane_selection in ["Single (1-20) plane (Only support parallelogram cross-section)", "Two (1-20) planes (Only support parallelogram cross-section)", 
                                                                     "Single (1-20) and (010) planes (Only support parallelogram cross-section)", "Both (1-20) and (010) planes (Only support parallelogram cross-section)"]:
                            QMessageBox.warning(self, "Unsupported Operation", "(1-20) plane deacetylated chitin doesn't support rectangle cross-section shape.")
                        elif betachitin_carboxylation_plane_selection == "Both (100) and (010) planes (Only support rectangle cross-section)":
                            ##carboxylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif betachitin_carboxylation_plane_selection == "Single (100) and (010) planes (Only support rectangle cross-section)":
        
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-100-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-100-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                                #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                                #    betachitin_shape_name = "rectangle"
                                #    betachitin_folder_name = "glycam06"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                    
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Two (100) planes (Only support rectangle cross-section)":
        
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-100-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-100-2-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_carboxylation_plane_selection == "Single (100) plane (Only support rectangle cross-section)":
        
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-100-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-100-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_carboxylation_plane_selection == "Two (010) planes":
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
        
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-2-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_carboxylation_plane_selection == "Single (010) plane":
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_a_unit = self.betachitin_aRepeatUnits.text()
                            betachitin_b_unit = self.betachitin_bRepeatUnits.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_a_unit and betachitin_b_unit and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "rectangle"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_a_unit, betachitin_b_unit, betachitin_c_unit, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_exp_rectangle_carboxylation_Popup(betachitin_output)
                                    self.betachitin_exp_rectangle_carboxylation_Topology()                        
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                elif  model == "Parallelogram cross-section shape":
                    if self.betachitin_noModRadio.isChecked():
                        betachitin_a_parm = self.betachitin_aParam.text()
                        betachitin_b_parm = self.betachitin_bParam.text()
                        betachitin_c_parm = self.betachitin_cParam.text()
                        betachitin_gamma_parm = self.betachitin_gammaParam.text()
                        betachitin_width  = self.betachitin_width.text()  
                        betachitin_height = self.betachitin_height.text()
                        betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                        if not betachitin_a_parm and betachitin_b_parm and betachitin_c_parm  and betachitin_gamma_parm  and betachitin_width and betachitin_height and betachitin_c_unit: 
                            QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                            return
                        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                        betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                        if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                            betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                            betachitin_ud_folder = "user-defined"
                            betachitin_shape_name = "parallelogram"
                            betachitin_folder_name = "charmm36"
                        elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                            betachitin_ud_folder = "user-defined"
                            betachitin_shape_name = "parallelogram"
                            betachitin_folder_name = "glycam06"
    
                        try:    
                            betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin", betachitin_ud_folder, betachitin_shape_name, betachitin_folder_name, betachitin_script_name)
                            betachitin_command = ["python", betachitin_script_path, betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_c_unit,  betachitin_height, betachitin_width]
                            betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                            if betachitin_result.returncode == 0:
                                betachitin_output = betachitin_result.stdout.strip()
                                self.betachitin_exp_parallelogram_nochemical_Popup(betachitin_output)
                                self.betachitin_exp_parallelogram_nochemical_Topology()                    
                            else:
                                error_message = betachitin_result.stderr.strip() 
                                QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                        except Exception as e:
                            QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))
        

                    ### beta-chitin---------user-defined-------parallelgram-------------- deacetylation-----------
                    elif self.betachitin_deacetylationRadio.isChecked():
                        betachitin_deacetylation_plane_selection = self.betachitin_deacetyl_planeComboBox.currentText()
                        if  betachitin_deacetylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                            QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support parallelgram cross-section shape.")
                        elif betachitin_deacetylation_plane_selection == "Both (1-20) and (010) planes (Only support parallelogram cross-section)":
                        ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "parallelogram"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                     
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Single (1-20) and (010) planes (Only support parallelogram cross-section)":
                        ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-120-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-120-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "parallelogram"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                     
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Two (1-20) planes (Only support parallelogram cross-section)":
                        ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-120-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-120-2-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "parallelogram"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                     
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_deacetylation_plane_selection == "Single (1-20) plane (Only support parallelogram cross-section)":
                        ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-120-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-120-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "parallelogram"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                     
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Two (010) planes":
                        ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-2-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "parallelogram"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                     
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_deacetylation_plane_selection == "Single (010) plane":
                        ##deacetylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            dda = self.betachitin_dda_LineEdit.text()  
                            ph = self.betachitin_dda_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and dda and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "parallelogram"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-deacetylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm,betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, dda, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_deacetylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_deacetylation_Topology()                     
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                ### beta-chitin---------user-defined-------parallelgram-------------- carboxylation-----------
                    elif self.betachitin_carboxylationRadio.isChecked():
                        betachitin_carboxylation_plane_selection = self.betachitin_carboxylation_planeComboBox.currentText()
                        if  betachitin_carboxylation_plane_selection in ["Single (100) plane (Only support rectangle cross-section)", "Two (100) planes (Only support rectangle cross-section)", 
                                                                 "Single (100) and (010) planes (Only support rectangle cross-section)", "Both (100) and (010) planes (Only support rectangle cross-section)"]:
                            QMessageBox.warning(self, "Unsupported Operation", "(100) plane deacetylated chitin doesn't support parallelgram cross-section shape.")
                        elif betachitin_carboxylation_plane_selection == "Both (1-20) and (010) planes (Only support parallelogram cross-section)":
                            ##carboxylation parameter 
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm and ph and betachitin_gamma_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin_infinite_neutron.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin_finite_neutron.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                       
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")



                        elif betachitin_carboxylation_plane_selection == "Single (1-20) and (010) planes (Only support parallelogram cross-section)":
        
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm and ph and betachitin_gamma_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-120-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-120-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                       
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Two (1-20) planes (Only support parallelogram cross-section)":
        
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm and ph and betachitin_gamma_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-120-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-120-2-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                       
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")


                        elif betachitin_carboxylation_plane_selection == "Single (1-20) plane (Only support parallelogram cross-section)":
        
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm and ph and betachitin_gamma_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-120-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-120-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                       
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_carboxylation_plane_selection == "Two (010) planes":
        
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm and ph and betachitin_gamma_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-2-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-2-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                       
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

                        elif betachitin_carboxylation_plane_selection == "Single (010) plane":
        
                            betachitin_a_parm = self.betachitin_aParam.text()
                            betachitin_b_parm = self.betachitin_bParam.text()
                            betachitin_c_parm = self.betachitin_cParam.text()
                            betachitin_gamma_parm = self.betachitin_gammaParam.text()
                            betachitin_width  = self.betachitin_width.text()  
                            betachitin_height = self.betachitin_height.text()
                            betachitin_c_unit = self.betachitin_cRepeatUnits.text()
                            carboxylation = self.betachitin_carboxylation_LineEdit.text()  
                            ph = self.betachitin_carboxylation_pHLineEdit.text()
    
    
                            if not betachitin_c_unit and betachitin_width and betachitin_height and carboxylation and ph and betachitin_a_parm and betachitin_b_parm and betachitin_c_parm and ph and betachitin_gamma_parm:
                                QMessageBox.warning(self, "Input Error", "Please fill in all required repeated unit value and deacetylation parameters.")
                                return
                            betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
                            betachitin_base_dir = os.path.dirname(os.path.abspath(__file__))
                            if betachitin_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                                betachitin_script_name = "beta_chitin-neutron-010-infinite.py" if "Infinite" in betachitin_ForceFieldType else "beta_chitin-neutron-010-finite.py"
                                betachitin_ud_folder = "user-defined"
                                betachitin_shape_name = "parallelogram"
                            elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                                QMessageBox.warning(self, "Unsupported Operation", "Currently, deacetylated chitin doesn't support Glycam06 Force Field.")
                            #elif betachitin_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                            #    betachitin_script_name = "alpha_chitin_A_infinite_experiment.py" if "Infinite" in betachitin_ForceFieldType else "alpha_chitin_A_finite_experiment.py"
                            #    betachitin_shape_name = "rectangle"
                            #    betachitin_folder_name = "glycam06"
                            try:    
                                betachitin_script_path = os.path.join(betachitin_base_dir, "function", "beta-chitin-carboxylation", betachitin_ud_folder, betachitin_shape_name, betachitin_script_name)
                                betachitin_command = ["python", betachitin_script_path,  betachitin_a_parm, betachitin_b_parm, betachitin_c_parm, betachitin_gamma_parm, betachitin_c_unit, betachitin_height, betachitin_width, carboxylation, ph]
                                betachitin_result = subprocess.run(betachitin_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                                if betachitin_result.returncode == 0:
                                    betachitin_output = betachitin_result.stdout.strip()
                                    self.betachitin_paralellogram_carboxylation_Popup(betachitin_output)
                                    self.betachitin_paralellogram_carboxylation_Topology()                       
                                else:
                                    error_message = betachitin_result.stderr.strip()
                                    QMessageBox.critical(self, "β-chitin Parameter Error", error_message)  
                            except Exception as e:
                                QMessageBox.critical(self, "Execution Failed", f"Failed to execute the script, please provide all required parameters.")

##beta chitin rectangle experimental data no modification windows output
    def betachitin_exp_rectangle_nochemical_Topology(self):  #native chitin topology
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-chitin_icm_topgen.py" if "Infinite" in betachitin_ForceFieldType else "beta-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "rectangle"

        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.betachitin_exp_rectangle_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Native β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Native β-chitin Topology Generation Failed")

    def betachitin_exp_rectangle_nochemical_Popup(self, betachitin_rectangle_output):
        betachitin_rectangle_output = f"Native β-chitin Generated Successfully"
        QMessageBox.information(self, "Build Result", betachitin_rectangle_output)

    def betachitin_exp_rectangle_nochemical_Topology_Popup(self):
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Native β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##beta chitin rectangle experimental data deacetylation windows output
    def betachitin_exp_rectangle_deacetylation_Topology(self):   
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in betachitin_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "rectangle"

        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.betachitin_exp_rectangle_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated β-chitin Topology Generation Failed")

    def betachitin_exp_rectangle_deacetylation_Popup(self, betachitin_rectangle_output):
        lines = [line.strip() for line in betachitin_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = parts[0].split(':')[1].strip()
        ph = parts[1].split(':')[1].strip()
        units = parts[2].split(':')[1].strip()
        message = f"Deacetylated β-chitin was Generated Successfully!\nActual DDA: {dda}\nActual pH: {ph}\nDeprotonated units: {units}"
        QMessageBox.information(self, "Build Result", message)

    def betachitin_exp_rectangle_deacetylation_Topology_Popup(self):
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##beta-chitin parallelogram experimental data no modification windows output
    def betachitin_exp_parallelogram_nochemical_Topology(self):  
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-chitin_icm_topgen.py" if "Infinite" in betachitin_ForceFieldType else "beta-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "parallelogram"

        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.betachitin_exp_parallelogram_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Native β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Native β-chitin Topology Generation Failed")


    def betachitin_exp_parallelogram_nochemical_Popup(self, betachitin_parallelogram_output):
        betachitin_parallelogram_output = f"Native β-chitin-B Generated Successfully"
        QMessageBox.information(self, "Build Result", betachitin_parallelogram_output)


    def betachitin_exp_parallelogram_nochemical_Topology_Popup(self):
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Native β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##beta-chitin ----------------rectangle deacetylation windows output
    def betachitin_exp_rectangle_deacetylation_Topology(self):  #native chitin topology
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-chitin_icm_topgen.py" if "Infinite" in betachitin_ForceFieldType else "beta-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "rectangle"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.betachitin_exp_rectangle_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated β-chitin Topology Generation Failed")

    def betachitin_exp_rectangle_deacetylation_Popup(self, betachitin_rectangle_output):
        lines = [line.strip() for line in betachitin_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = float(parts[0].split(':')[1].strip())   
        ph = float(parts[1].split(':')[1].strip())   
        units = float(parts[2].split(':')[1].strip())   
        dda_formatted = "{:.2f}".format(dda)
        ph_formatted = "{:.2f}".format(ph)
        units_formatted = "{:.2f}".format(units)
        message = f"Deacetylated β-chitin was Generated Successfully!\nActual DDA: {dda_formatted}\nActual pH: {ph_formatted}\nDeprotonated units: {units_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def betachitin_exp_rectangle_deacetylation_Topology_Popup(self):
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##beta-chitin --------------------parallelogram deacetylation windows output
    def betachitin_paralellogram_deacetylation_Topology(self):  #native chitin topology
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-chitin_icm_topgen.py" if "Infinite" in betachitin_ForceFieldType else "beta-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "parallelogram"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.betachitin_paralellogram_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated β-chitin Topology Generation Failed")

    def betachitin_paralellogram_deacetylation_Popup(self, betachitin_paralellogram_output):
        lines = [line.strip() for line in betachitin_paralellogram_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = float(parts[0].split(':')[1].strip())   
        ph = float(parts[1].split(':')[1].strip())   
        units = float(parts[2].split(':')[1].strip())   
        dda_formatted = "{:.2f}".format(dda)
        ph_formatted = "{:.2f}".format(ph)
        units_formatted = "{:.2f}".format(units)
        message = f"Deacetylated β-chitin was Generated Successfully!\nActual DDA: {dda_formatted}\nActual pH: {ph_formatted}\nDeprotonated units: {units_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def betachitin_paralellogram_deacetylation_Topology_Popup(self):
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)




##beta-chitin carboxylation -----------------(rectangle-cross-section) windows output
    def betachitin_exp_rectangle_carboxylation_Topology(self):  #native chitin topology
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-chitin_icm_topgen.py" if "Infinite" in betachitin_ForceFieldType else "beta-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "rectangle"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.betachitin_exp_rectangle_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated β-chitin Topology Generation Failed")

    def betachitin_exp_rectangle_carboxylation_Popup(self, betachitin_rectangle_output):
        lines = [line.strip() for line in betachitin_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated β-chitin was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def betachitin_exp_rectangle_carboxylation_Topology_Popup(self):
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)





##beta-chitin carboxylation ------------------------(parallelogram-cross-section) windows output
    def betachitin_paralellogram_carboxylation_Topology(self):  
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-chitin_icm_topgen.py" if "Infinite" in betachitin_ForceFieldType else "beta-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "parallelogram"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k,  script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.betachitin_paralellogram_carboxylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Carboxylated β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Carboxylated β-chitin Topology Generation Failed")

    def betachitin_paralellogram_carboxylation_Popup(self, betachitin_rectangle_output):
        lines = [line.strip() for line in betachitin_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        carboxylation_in_charge_density = float(parts[0].split(':')[1].strip())  # Correct
        carboxylation_degree = float(parts[1].split(':')[1].strip())  # Correct
        ph = float(parts[2].split(':')[1].strip())   
        carboxylation_formatted = "{:.2f}".format(carboxylation_in_charge_density)
        carboxylation_degree_formatted = "{:.2f}".format(carboxylation_degree)
        ph_formatted = "{:.2f}".format(ph)
        message = f"Carboxylated β-chitin was Generated Successfully!\nActual charge density: {carboxylation_formatted} mmol/g \nActual carboxylation degree: {carboxylation_degree_formatted}\nActual pH level: {ph_formatted}"
        QMessageBox.information(self, "Build Result", message)

    def betachitin_paralellogram_carboxylation_Topology_Popup(self):
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Carboxylated β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)

##beta rectangle deacetylation ---inside ----- windows output
    def betachitin_exp_rectangle_deacetylation_inside_Topology(self):  #native chitin topology
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-chitin_icm_topgen.py" if "Infinite" in betachitin_ForceFieldType else "beta-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "rectangle"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.betachitin_exp_rectangle_deacetylation_inside_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylated β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylated β-chitin Topology Generation Failed")

    def betachitin_exp_rectangle_deacetylation_inside_Popup(self, betachitin_rectangle_output):
        lines = [line.strip() for line in betachitin_rectangle_output.strip().split('\n') if line.strip()]
        if not lines:
            QMessageBox.warning(self, "Build Error", "No output received.")
            return
    
        last_line = lines[-1]
        parts = last_line.split(',')
        dda = parts[0].split(':')[1].strip()
        units = parts[1].split(':')[1].strip()
        message = f"Deacetylated β-chitin was Generated Successfully!\nActual DDA: {dda}\nDeacetylation units: {units}"
        QMessageBox.information(self, "Build Result", message)

    def betachitin_exp_rectangle_deacetylation_inside_Topology_Popup(self):
        betachitin_ForceFieldType = self.betachitin_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in betachitin_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylation β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##########beta-chitin-dihydrous       

    def setupBetaChitin_dihydrous_Options(self):
        self.beta_chitin_dihydrousoptions = QWidget()
        self.betaStackedWidget.addWidget(self.beta_chitin_dihydrousoptions)  
        beta_chitin_dihydrous_layout = QVBoxLayout(self.beta_chitin_dihydrousoptions)  # Parent the layout to the widget directly
        beta_chitin_dihydrous_layout.setAlignment(Qt.AlignTop)
        beta_chitin_dihydrous_font = QFont("Arial", 13)

        self.beta_chitin_dihydrous_radioGroup = QGroupBox("Parameter Type")
        self.beta_chitin_dihydrous_radioGroup.setAlignment(Qt.AlignTop)
        beta_chitin_dihydrous_topLineLayout = QHBoxLayout()
        beta_chitin_dihydrous_bottomLineLayout = QHBoxLayout()
        

        self.beta_chitin_dihydrous_Neutron = QRadioButton("Crystallographic Parameters from Neutron Diffraction Diffraction Experiments")
        self.beta_chitin_dihydrous_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")

        self.beta_chitin_dihydrous_Neutron.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_UserDefined.setFont(beta_chitin_dihydrous_font)

        beta_chitin_dihydrous_bottomLineLayout.addWidget(self.beta_chitin_dihydrous_Neutron)
        beta_chitin_dihydrous_bottomLineLayout.addWidget(self.beta_chitin_dihydrous_UserDefined)

        beta_chitin_dihydrous_layout.addLayout(beta_chitin_dihydrous_topLineLayout)
        beta_chitin_dihydrous_layout.addLayout(beta_chitin_dihydrous_bottomLineLayout)
        # Combo box setup
        self.beta_chitin_dihydrous_ComboBox = QComboBox(self.beta_chitin_dihydrousoptions)
        self.beta_chitin_dihydrous_ComboBox.addItem("Please select the crystallite shape")
        self.beta_chitin_dihydrous_ComboBox.addItems(["Rectangle cross-section shape", "Parallelogram cross-section shape"])
        self.beta_chitin_dihydrous_ComboBox.setVisible(False)
        beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_ComboBox)

        self.beta_chitin_dihydrous_Neutron.toggled.connect(self.beta_chitin_dihydrous_Visibility)
        self.beta_chitin_dihydrous_UserDefined.toggled.connect(self.beta_chitin_dihydrous_Visibility)
        self.beta_chitin_dihydrous_ComboBox.currentIndexChanged.connect(self.beta_chitin_dihydrous_updateParametersDisplay)

        # Parameter display setup
        self.beta_chitin_dihydrous_parametersGroup = QGroupBox("Crystallographic parameters")
        beta_chitin_dihydrous_parametersLayout = QVBoxLayout()  
        self.beta_chitin_dihydrous_parametersGroup.setLayout(beta_chitin_dihydrous_parametersLayout)
        self.beta_chitin_dihydrous_parametersGroup.setVisible(False)
        beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_parametersGroup)

        self.beta_chitin_dihydrous_initParameterWidgets(beta_chitin_dihydrous_font)

        self.beta_chitin_dihydrous_imageLabel = QLabel(self)
        self.beta_chitin_dihydrous_imageLabel.setFixedSize(1000, 250) 
        self.beta_chitin_dihydrous_imageLabel.setAlignment(Qt.AlignCenter)
        self.beta_chitin_dihydrous_imageLabel.setScaledContents(True)
        beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_imageLabel)
        self.beta_chitin_dihydrous_imageLabel.clear()
        beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_imageLabel)
        beta_chitin_dihydrous_layout.setAlignment(self.beta_chitin_dihydrous_imageLabel, Qt.AlignCenter)  
        self.beta_chitin_dihydrous_ComboBox.currentIndexChanged.connect(self.beta_chitin_dihydrous_updateImageDisplay) 

        ###cititation for beta chitin crystallographic parameter
        self.beta_chitin_dihydrous_citation1Label = QLabel("Crystallographic parameter reference: Nishiyama et al. Macromolecules. 2011;44(4):950-7.")
        self.beta_chitin_dihydrous_citation2Label = QLabel("Crystallographic parameter reference: Sawada et al. Biomacromolecules. 2012,13,288−291.")
        self.beta_chitin_dihydrous_citation1Label.setWordWrap(True)
        self.beta_chitin_dihydrous_citation2Label.setWordWrap(True)
        beta_chitin_dihydrous_citation_font_1 = self.beta_chitin_dihydrous_citation1Label.font()
        beta_chitin_dihydrous_citation_font_1.setPointSize(6) 
        self.beta_chitin_dihydrous_citation1Label.setFont(beta_chitin_dihydrous_citation_font_1)
        beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_citation1Label)
        beta_chitin_dihydrous_citation_font_2= self.beta_chitin_dihydrous_citation2Label.font()
        beta_chitin_dihydrous_citation_font_2.setPointSize(6) 
        self.beta_chitin_dihydrous_citation2Label.setFont(beta_chitin_dihydrous_citation_font_2)
        beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_citation2Label)

        self.beta_chitin_dihydrous_citation2Label.hide()
        self.beta_chitin_dihydrous_citation1Label.hide()

        # Connect combo box selection changes to update display
        self.beta_chitin_dihydrous_ComboBox.currentIndexChanged.connect(self.beta_chitin_dihydrous_updateParametersDisplay)
 
        # Invoke button setup, initially hidden
        self.beta_chitin_dihydrous_invokeButton = QPushButton("Invoke Script")
        self.beta_chitin_dihydrous_invokeButton.setVisible(False)
        self.beta_chitin_dihydrous_invokeButton.clicked.connect(self.beta_chitin_dihydrous_invokeScript)
        beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_invokeButton)



    def beta_chitin_dihydrous_updateImageDisplay(self, index):
        beta_chitin_dihydrous_shape = self.beta_chitin_dihydrous_ComboBox.currentText()
        if beta_chitin_dihydrous_shape == "Rectangle cross-section shape":
            beta_chitin_dihydrous_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'beta-chitin','beta-chitin-dihydrous-rectangle.png' ) )
        elif beta_chitin_dihydrous_shape == "Parallelogram cross-section shape":
            beta_chitin_dihydrous_pixmap =  QPixmap(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'chitin', 'beta-chitin', 'beta-chitin-dihydrous-parallelogram.png') )
        else:
            self.beta_chitin_dihydrous_imageLabel.clear()
            return
        self.beta_chitin_dihydrous_imageLabel.setPixmap(beta_chitin_dihydrous_pixmap)
        self.beta_chitin_dihydrous_imageLabel.show()

    def beta_chitin_dihydrous_initParameterWidgets(self, font):
        # Create two horizontal layouts
        self.beta_chitin_dihydrous_paramLine1 = QHBoxLayout()
        self.beta_chitin_dihydrous_paramLine2 = QHBoxLayout()
        self.beta_chitin_dihydrous_paramLine3 = QHBoxLayout()

        # Initialize QLineEdit objects for parameters and repeat units
        self.beta_chitin_dihydrous_aParam = QLineEdit()
        self.beta_chitin_dihydrous_bParam = QLineEdit()
        self.beta_chitin_dihydrous_cParam = QLineEdit()
        self.beta_chitin_dihydrous_gammaParam = QLineEdit()
        self.beta_chitin_dihydrous_aRepeatUnits = QLineEdit()
        self.beta_chitin_dihydrous_bRepeatUnits = QLineEdit()
        self.beta_chitin_dihydrous_cRepeatUnits = QLineEdit()
        
        self.beta_chitin_dihydrous_width = QLineEdit()
        self.beta_chitin_dihydrous_height = QLineEdit()
        # Add widgets to first line layout
        self.beta_chitin_dihydrous_setupParameterWidget("a (Å)", self.beta_chitin_dihydrous_aParam, True, "", self.beta_chitin_dihydrous_paramLine1, font)
        self.beta_chitin_dihydrous_setupParameterWidget("b (Å)", self.beta_chitin_dihydrous_bParam, True, "", self.beta_chitin_dihydrous_paramLine1, font)
        self.beta_chitin_dihydrous_setupParameterWidget("c (Å)", self.beta_chitin_dihydrous_cParam, True, "", self.beta_chitin_dihydrous_paramLine1, font)

        self.beta_chitin_dihydrous_setupParameterWidget("gamma angle γ (°)", self.beta_chitin_dihydrous_gammaParam, True, "", self.beta_chitin_dihydrous_paramLine1, font)
        
        self.beta_chitin_dihydrous_setupParameterWidget("Cross-section height (010 length) (Å)", self.beta_chitin_dihydrous_height, True, "", self.beta_chitin_dihydrous_paramLine2, font)
        self.beta_chitin_dihydrous_setupParameterWidget("Cross-section width (1-20 length) (Å)", self.beta_chitin_dihydrous_width, True, "", self.beta_chitin_dihydrous_paramLine2, font)

        self.beta_chitin_dihydrous_setupParameterWidget("a repetition", self.beta_chitin_dihydrous_aRepeatUnits, True, "", self.beta_chitin_dihydrous_paramLine3, font)
        self.beta_chitin_dihydrous_setupParameterWidget("b repetition", self.beta_chitin_dihydrous_bRepeatUnits, True, "", self.beta_chitin_dihydrous_paramLine3, font)
        self.beta_chitin_dihydrous_setupParameterWidget("c repetition", self.beta_chitin_dihydrous_cRepeatUnits, True, "", self.beta_chitin_dihydrous_paramLine3, font)

        # Add both lines to the group box layout
        self.beta_chitin_dihydrous_parametersGroup.layout().addLayout(self.beta_chitin_dihydrous_paramLine1)
        self.beta_chitin_dihydrous_parametersGroup.layout().addLayout(self.beta_chitin_dihydrous_paramLine2)
        self.beta_chitin_dihydrous_parametersGroup.layout().addLayout(self.beta_chitin_dihydrous_paramLine3)


    def beta_chitin_dihydrous_setupParameterWidget(self, beta_chitin_dihydrous_label, beta_chitin_dihydrous_widget, readOnly, beta_chitin_dihydrous_defaultValue, beta_chitin_dihydrous_layout, beta_chitin_dihydrous_font):
        beta_chitin_dihydrous_labelWidget = QLabel(beta_chitin_dihydrous_label)
        beta_chitin_dihydrous_labelWidget.setFont(beta_chitin_dihydrous_font)
        beta_chitin_dihydrous_widget.setFont(beta_chitin_dihydrous_font)
        beta_chitin_dihydrous_widget.setReadOnly(readOnly)
        beta_chitin_dihydrous_widget.setText(beta_chitin_dihydrous_defaultValue)
        if readOnly:
            beta_chitin_dihydrous_widget.setStyleSheet("background-color: lightgrey;")
        beta_chitin_dihydrous_layout.addWidget(beta_chitin_dihydrous_labelWidget)
        beta_chitin_dihydrous_layout.addWidget(beta_chitin_dihydrous_widget)
    

    def beta_chitin_dihydrous_updateReadOnlyState(self, beta_chitin_dihydrous_widget, readOnly):
        beta_chitin_dihydrous_widget.setReadOnly(readOnly)
        if readOnly:
            beta_chitin_dihydrous_widget.setStyleSheet("background-color: #D3D3D3;")  # Light grey background
            beta_chitin_dihydrous_widget.setEnabled(False)  # Optionally disable the widget to make it clear it's not interactive
        else:
            beta_chitin_dihydrous_widget.setStyleSheet("background-color: white;")
            beta_chitin_dihydrous_widget.setEnabled(True)  # Re-enable the widget for user interaction

    def beta_chitin_dihydrous_Visibility(self, checked):
        self.beta_chitin_dihydrous_ComboBox.setVisible(checked)
        if checked:
            self.beta_chitin_dihydrous_ComboBox.setCurrentIndex(0) 
            self.beta_chitin_dihydrous_parametersGroup.setVisible(False)
        else:
            self.beta_chitin_dihydrous_ComboBox.setVisible(False)
            self.beta_chitin_dihydrous_parametersGroup.setVisible(False)

    def beta_chitin_dihydrous_updateParametersDisplay(self):
        if self.beta_chitin_dihydrous_ComboBox.currentIndex() == 0:
            self.beta_chitin_dihydrous_parametersGroup.setVisible(False)
        else:
            self.beta_chitin_dihydrous_parametersGroup.setVisible(True)
            model = self.beta_chitin_dihydrous_ComboBox.currentText()
            
            if self.beta_chitin_dihydrous_Neutron.isChecked() :
                self.beta_chitin_dihydrous_citation1Label.show()
                self.beta_chitin_dihydrous_citation2Label.show()
                if model == "Rectangle cross-section shape":
                    # Set up modifications section if Experimental is checked and model is one of the specified chain models
                    self.beta_chitin_dihydrous_setupModificationsSection(self.beta_chitin_dihydrous_parametersGroup.layout(), QFont("Arial", 13))
                    self.beta_chitin_dihydrous_aParam.clear()
                    self.beta_chitin_dihydrous_bParam.clear()
                    self.beta_chitin_dihydrous_cParam.clear()
                    self.beta_chitin_dihydrous_gammaParam.clear()
                    self.beta_chitin_dihydrous_aRepeatUnits.clear()
                    self.beta_chitin_dihydrous_bRepeatUnits.clear()
                    self.beta_chitin_dihydrous_cRepeatUnits.clear()
                    self.beta_chitin_dihydrous_width.clear()
                    self.beta_chitin_dihydrous_height.clear()

                    self.beta_chitin_dihydrous_aParam.setText("4.814")
                    self.beta_chitin_dihydrous_bParam.setText("11.167")
                    self.beta_chitin_dihydrous_cParam.setText("10.423")
                    self.beta_chitin_dihydrous_gammaParam.setText("96.45")


                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_aParam, True)    
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_bParam, True)             
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_cParam, True) 
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_gammaParam, True)
                    self.beta_chitin_dihydrous_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_cParam.setStyleSheet("background-color: #D3D3D3;")  
                    self.beta_chitin_dihydrous_gammaParam.setStyleSheet("background-color: #D3D3D3;")  

                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_width, True)             
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_height, True)   
                    self.beta_chitin_dihydrous_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_bRepeatUnits, False)     
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_aRepeatUnits, False)   
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_cRepeatUnits, False)    
                    self.beta_chitin_dihydrous_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.beta_chitin_dihydrous_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.beta_chitin_dihydrous_cRepeatUnits.setStyleSheet("background-color: white;") 
                    
                elif model == "Parallelogram cross-section shape":
                    self.beta_chitin_dihydrous_setupModificationsSection(self.beta_chitin_dihydrous_parametersGroup.layout(), QFont("Arial", 13))
                    self.beta_chitin_dihydrous_aParam.clear()
                    self.beta_chitin_dihydrous_bParam.clear()
                    self.beta_chitin_dihydrous_cParam.clear()
                    self.beta_chitin_dihydrous_gammaParam.clear()
                    self.beta_chitin_dihydrous_aRepeatUnits.clear()
                    self.beta_chitin_dihydrous_bRepeatUnits.clear()
                    self.beta_chitin_dihydrous_cRepeatUnits.clear()
                    self.beta_chitin_dihydrous_width.clear()
                    self.beta_chitin_dihydrous_height.clear()

                    self.beta_chitin_dihydrous_aParam.setText("4.814")
                    self.beta_chitin_dihydrous_bParam.setText("11.167")
                    self.beta_chitin_dihydrous_cParam.setText("10.423")
                    self.beta_chitin_dihydrous_gammaParam.setText("96.45")

                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_aParam, True)    
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_bParam, True)             
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_cParam, True) 
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_gammaParam, True)
                    self.beta_chitin_dihydrous_aParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_bParam.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_cParam.setStyleSheet("background-color: #D3D3D3;")  
                    self.beta_chitin_dihydrous_gammaParam.setStyleSheet("background-color: #D3D3D3;")                  

                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_width,  False)             
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_height, False)   
                    self.beta_chitin_dihydrous_width.setStyleSheet("background-color:  white;") 
                    self.beta_chitin_dihydrous_height.setStyleSheet("background-color: white;")     


                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_bRepeatUnits, True)     
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_aRepeatUnits, True)   
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_cRepeatUnits, False)    
                    self.beta_chitin_dihydrous_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_cRepeatUnits.setStyleSheet("background-color: white;") 



            elif self.beta_chitin_dihydrous_UserDefined.isChecked() :
                self.beta_chitin_dihydrous_citation1Label.hide()
                self.beta_chitin_dihydrous_citation2Label.hide()
                if model == "Rectangle cross-section shape":
                    self.beta_chitin_dihydrous_setupModificationsSection(self.beta_chitin_dihydrous_parametersGroup.layout(), QFont("Arial", 13))
                    self.beta_chitin_dihydrous_aParam.clear()
                    self.beta_chitin_dihydrous_bParam.clear()
                    self.beta_chitin_dihydrous_cParam.clear()
                    self.beta_chitin_dihydrous_gammaParam.clear()
                    self.beta_chitin_dihydrous_aRepeatUnits.clear()
                    self.beta_chitin_dihydrous_bRepeatUnits.clear()
                    self.beta_chitin_dihydrous_cRepeatUnits.clear()
                    self.beta_chitin_dihydrous_width.clear()
                    self.beta_chitin_dihydrous_height.clear()

                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_aParam, False)    
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_bParam, False)             
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_cParam, False) 
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_gammaParam, False) 
                    self.beta_chitin_dihydrous_aParam.setStyleSheet("background-color: white;") 
                    self.beta_chitin_dihydrous_bParam.setStyleSheet("background-color: white;") 
                    self.beta_chitin_dihydrous_cParam.setStyleSheet("background-color: white;")  
                    self.beta_chitin_dihydrous_gammaParam.setStyleSheet("background-color: white;")  

                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_width, True)             
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_height, True)   
                    self.beta_chitin_dihydrous_width.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_height.setStyleSheet("background-color: #D3D3D3;")                     
       
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_bRepeatUnits, False)     
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_aRepeatUnits, False)   
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_cRepeatUnits, False)    
                    self.beta_chitin_dihydrous_aRepeatUnits.setStyleSheet("background-color: white;") 
                    self.beta_chitin_dihydrous_bRepeatUnits.setStyleSheet("background-color: white;") 
                    self.beta_chitin_dihydrous_cRepeatUnits.setStyleSheet("background-color: white;")    
    
                elif model == "Parallelogram cross-section shape":
                    self.beta_chitin_dihydrous_setupModificationsSection(self.beta_chitin_dihydrous_parametersGroup.layout(), QFont("Arial", 13))
                    self.beta_chitin_dihydrous_aParam.clear()
                    self.beta_chitin_dihydrous_bParam.clear()
                    self.beta_chitin_dihydrous_cParam.clear()
                    self.beta_chitin_dihydrous_gammaParam.clear()
                    self.beta_chitin_dihydrous_aRepeatUnits.clear()
                    self.beta_chitin_dihydrous_bRepeatUnits.clear()
                    self.beta_chitin_dihydrous_cRepeatUnits.clear()
                    self.beta_chitin_dihydrous_width.clear()
                    self.beta_chitin_dihydrous_height.clear()

                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_aParam, False)    
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_bParam, False)             
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_cParam, False)  
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_gammaParam, False) 
                    self.beta_chitin_dihydrous_aParam.setStyleSheet("background-color: white;") 
                    self.beta_chitin_dihydrous_bParam.setStyleSheet("background-color: white;") 
                    self.beta_chitin_dihydrous_cParam.setStyleSheet("background-color: white;")   
                    self.beta_chitin_dihydrous_gammaParam.setStyleSheet("background-color: white;")                   

                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_width,  False)             
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_height, False)   
                    self.beta_chitin_dihydrous_width.setStyleSheet("background-color:  white;") 
                    self.beta_chitin_dihydrous_height.setStyleSheet("background-color: white;")     


                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_bRepeatUnits, True)     
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_aRepeatUnits, True)   
                    self.beta_chitin_dihydrous_updateReadOnlyState(self.beta_chitin_dihydrous_cRepeatUnits, False)    
                    self.beta_chitin_dihydrous_aRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_bRepeatUnits.setStyleSheet("background-color: #D3D3D3;") 
                    self.beta_chitin_dihydrous_cRepeatUnits.setStyleSheet("background-color: white;")       


            else:
                # Hide modification options if not the specific model and type
                for i in reversed(range(self.beta_chitin_dihydrous_modificationsLayout.count())): 
                    self.beta_chitin_dihydrous_modificationsLayout.itemAt(i).widget().setParent(None)

    def beta_chitin_dihydrous_setupModificationsSection(self, beta_chitin_dihydrous_layout, beta_chitin_dihydrous_font):
        # Add a layout for modifications if it doesn't exist
        if not hasattr(self, 'beta_chitin_dihydrous_modificationsLayout'):
            self.beta_chitin_dihydrous_modificationsLayout = QHBoxLayout()
            self.beta_chitin_dihydrous_deacetylationRadio = QRadioButton("Deacetylation")
            self.beta_chitin_dihydrous_carboxylationRadio = QRadioButton("Carboxylation")
            self.beta_chitin_dihydrous_noModRadio = QRadioButton("No Modification")
            self.beta_chitin_dihydrous_deacetylationRadio.setFont(beta_chitin_dihydrous_font)
            self.beta_chitin_dihydrous_carboxylationRadio.setFont(beta_chitin_dihydrous_font)
            self.beta_chitin_dihydrous_noModRadio.setFont(beta_chitin_dihydrous_font)
            self.beta_chitin_dihydrous_modificationsLayout.addWidget(self.beta_chitin_dihydrous_deacetylationRadio)
            self.beta_chitin_dihydrous_modificationsLayout.addWidget(self.beta_chitin_dihydrous_carboxylationRadio)
            self.beta_chitin_dihydrous_modificationsLayout.addWidget(self.beta_chitin_dihydrous_noModRadio)
            beta_chitin_dihydrous_layout.addLayout(self.beta_chitin_dihydrous_modificationsLayout)

            # Setup Inputs and Connections
            self.beta_chitin_dihydrous_setupModificationInputs()
            beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_modificationInputsWidget)
            self.beta_chitin_dihydrous_deacetylationRadio.toggled.connect(lambda checked: self.beta_chitin_dihydrous_updateModificationInputs("Deacetylation", checked))
            self.beta_chitin_dihydrous_carboxylationRadio.toggled.connect(lambda checked: self.beta_chitin_dihydrous_updateModificationInputs("Carboxylation", checked))
            self.beta_chitin_dihydrous_noModRadio.toggled.connect(lambda checked: self.beta_chitin_dihydrous_updateModificationInputs("None", checked))


            # Generate Structure Button
            beta_chitin_dihydrous_Font = QFont("Arial", 13)
            self.beta_chitin_dihydrous_invokeButton = QPushButton("Generate Structure")
            self.beta_chitin_dihydrous_invokeButton.setFont(beta_chitin_dihydrous_Font)
            self.beta_chitin_dihydrous_invokeButton.setVisible(False)  # Initially hidden
            self.beta_chitin_dihydrous_invokeButton.clicked.connect(self.beta_chitin_dihydrous_invokeScript)  # Connect to invoke script logic
            beta_chitin_dihydrous_layout.addWidget(self.beta_chitin_dihydrous_invokeButton)
            
    def beta_chitin_dihydrous_setupModificationInputs(self):
        self.beta_chitin_dihydrous_modificationInputsWidget = QWidget()
        beta_chitin_dihydrous_modInputsLayout = QHBoxLayout(self.beta_chitin_dihydrous_modificationInputsWidget)
        beta_chitin_dihydrous_font = QFont("Arial", 13)

        # Degree of DDa input
        self.beta_chitin_dihydrous_ddaLabel = QLabel("Degree of Deacetylation (≥0 and <1):")
        self.beta_chitin_dihydrous_ddaLabel.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_ddaLineEdit = QLineEdit()
        self.beta_chitin_dihydrous_ddaLineEdit.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_ddaLineEdit.setFixedSize(QSize(100, 30))
        beta_chitin_dihydrous_modInputsLayout.addWidget(self.beta_chitin_dihydrous_ddaLabel)
        beta_chitin_dihydrous_modInputsLayout.addWidget(self.beta_chitin_dihydrous_ddaLineEdit)

        # Degree of carboxylation input
        self.beta_chitin_dihydrous_carboxylationLabel = QLabel("Degree of carboxylation (unit: mmol/g):")
        self.beta_chitin_dihydrous_carboxylationLabel.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_carboxylationLineEdit = QLineEdit()
        self.beta_chitin_dihydrous_carboxylationLineEdit.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_carboxylationLineEdit.setFixedSize(QSize(100, 30))
        beta_chitin_dihydrous_modInputsLayout.addWidget(self.beta_chitin_dihydrous_carboxylationLabel)
        beta_chitin_dihydrous_modInputsLayout.addWidget(self.beta_chitin_dihydrous_carboxylationLineEdit)


        # pH input (specific to Deacetylation)
        self.beta_chitin_dihydrous_pHLabel = QLabel("pH:")
        self.beta_chitin_dihydrous_pHLabel.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_pHLineEdit = QLineEdit()
        self.beta_chitin_dihydrous_pHLineEdit.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_pHLineEdit.setFixedSize(QSize(100, 30))
        beta_chitin_dihydrous_modInputsLayout.addWidget(self.beta_chitin_dihydrous_pHLabel)
        beta_chitin_dihydrous_modInputsLayout.addWidget(self.beta_chitin_dihydrous_pHLineEdit)


        self.beta_chitin_dihydrous_ForceFieldTypeLabel = QLabel("Atomistic Simulation Force Field:")
        self.beta_chitin_dihydrous_ForceFieldTypeLabel.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_ForceFieldTypeselector = QComboBox()
        self.beta_chitin_dihydrous_ForceFieldTypeselector.setFont(beta_chitin_dihydrous_font)
        self.beta_chitin_dihydrous_ForceFieldTypeLabel.setFixedSize(550, 60)  # Width of 200 pixels and height of 20 pixels
        self.beta_chitin_dihydrous_ForceFieldTypeselector.addItem("Please select the force field for atomistic simulations", True)
        self.beta_chitin_dihydrous_ForceFieldTypeselector.addItem("CHARMM36 Infinite Chain Model", False)
        self.beta_chitin_dihydrous_ForceFieldTypeselector.addItem("CHARMM36 Finite Chain Model", False)
        self.beta_chitin_dihydrous_ForceFieldTypeselector.addItem("GLYCAM06 Infinite Chain Model", False)
        self.beta_chitin_dihydrous_ForceFieldTypeselector.addItem("GLYCAM06 Finite Chain Model", False)
        beta_chitin_dihydrous_modInputsLayout.addWidget(self.beta_chitin_dihydrous_ForceFieldTypeLabel)
        beta_chitin_dihydrous_modInputsLayout.addWidget(self.beta_chitin_dihydrous_ForceFieldTypeselector)


        self.beta_chitin_dihydrous_carboxylationLabel.setVisible(False)
        self.beta_chitin_dihydrous_carboxylationLineEdit.setVisible(False)
        self.beta_chitin_dihydrous_ddaLabel.setVisible(False)
        self.beta_chitin_dihydrous_ddaLineEdit.setVisible(False)
        self.beta_chitin_dihydrous_pHLabel.setVisible(False)
        self.beta_chitin_dihydrous_pHLineEdit.setVisible(False)
        self.beta_chitin_dihydrous_ForceFieldTypeLabel.setVisible(False)
        self.beta_chitin_dihydrous_ForceFieldTypeselector.setVisible(False)

    def beta_chitin_dihydrous_updateModificationInputs(self, beta_chitin_dihydrous_modificationType, checked): 
        if checked:
            if beta_chitin_dihydrous_modificationType == "Deacetylation":
                self.beta_chitin_dihydrous_ddaLabel.setVisible(True)
                self.beta_chitin_dihydrous_ddaLineEdit.setVisible(True)
                self.beta_chitin_dihydrous_carboxylationLabel.setVisible(False)
                self.beta_chitin_dihydrous_carboxylationLineEdit.setVisible(False)
                self.beta_chitin_dihydrous_pHLabel.setVisible(True)
                self.beta_chitin_dihydrous_pHLineEdit.setVisible(True)
                self.beta_chitin_dihydrous_ForceFieldTypeLabel.setVisible(True)
                self.beta_chitin_dihydrous_ForceFieldTypeselector.setVisible(True)
                self.beta_chitin_dihydrous_invokeButton.setVisible(True)  # Hide "Generate Structure" button
            elif beta_chitin_dihydrous_modificationType == "Carboxylation":
                self.beta_chitin_dihydrous_ddaLabel.setVisible(False)
                self.beta_chitin_dihydrous_ddaLineEdit.setVisible(False)
                self.beta_chitin_dihydrous_carboxylationLabel.setVisible(True)
                self.beta_chitin_dihydrous_carboxylationLineEdit.setVisible(True)
                self.beta_chitin_dihydrous_pHLabel.setVisible(True)
                self.beta_chitin_dihydrous_pHLineEdit.setVisible(True)
                self.beta_chitin_dihydrous_ForceFieldTypeLabel.setVisible(True)
                self.beta_chitin_dihydrous_ForceFieldTypeselector.setVisible(True)
                self.beta_chitin_dihydrous_invokeButton.setVisible(True)  # Hide "Generate Structure" button
            elif beta_chitin_dihydrous_modificationType == "None":
                self.beta_chitin_dihydrous_ddaLabel.setVisible(False)
                self.beta_chitin_dihydrous_ddaLineEdit.setVisible(False)
                self.beta_chitin_dihydrous_carboxylationLabel.setVisible(False)
                self.beta_chitin_dihydrous_carboxylationLineEdit.setVisible(False)
                self.beta_chitin_dihydrous_pHLabel.setVisible(False)
                self.beta_chitin_dihydrous_pHLineEdit.setVisible(False)
                self.beta_chitin_dihydrous_ForceFieldTypeLabel.setVisible(True)
                self.beta_chitin_dihydrous_ForceFieldTypeselector.setVisible(True)
                self.beta_chitin_dihydrous_invokeButton.setVisible(True)  # Show "Generate Structure" button
        else:
            self.beta_chitin_dihydrous_ddaLabel.setVisible(False)
            self.beta_chitin_dihydrous_ddaLineEdit.setVisible(False)
            self.beta_chitin_dihydrous_carboxylationLabel.setVisible(False)
            self.beta_chitin_dihydrous_carboxylationLineEdit.setVisible(False)
            self.beta_chitin_dihydrous_pHLabel.setVisible(False)
            self.beta_chitin_dihydrous_pHLineEdit.setVisible(False)
            self.beta_chitin_dihydrous_ForceFieldTypeLabel.setVisible(False)
            self.beta_chitin_dihydrous_ForceFieldTypeselector.setVisible(False)
            self.beta_chitin_dihydrous_invokeButton.setVisible(False)  


    def beta_chitin_dihydrous_invokeScript(self):
            model = self.beta_chitin_dihydrous_ComboBox.currentText()
            
            if self.beta_chitin_dihydrous_Neutron.isChecked():
                #self.beta_chitin_dihydrous_ForceFieldTypeselector.setCurrentIndex(0)
                if self.beta_chitin_dihydrous_noModRadio.isChecked() and model == "Rectangle cross-section shape":
                    beta_chitin_dihydrous_a_unit = self.beta_chitin_dihydrous_aRepeatUnits.text()
                    beta_chitin_dihydrous_b_unit = self.beta_chitin_dihydrous_bRepeatUnits.text()
                    beta_chitin_dihydrous_c_unit = self.beta_chitin_dihydrous_cRepeatUnits.text()
                    if not beta_chitin_dihydrous_c_unit and beta_chitin_dihydrous_a_unit and beta_chitin_dihydrous_b_unit:
                        QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                        return
                    beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
                    beta_chitin_dihydrous_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if beta_chitin_dihydrous_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        beta_chitin_dihydrous_script_name = "beta_chitin_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta_chitin_finite_experiment.py"
                        beta_chitin_dihydrous_shape_name = "rectangle"
                        beta_chitin_dihydrous_folder_name = "charmm36"
                    elif beta_chitin_dihydrous_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        beta_chitin_dihydrous_script_name = "beta_chitin_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta_chitin_finite_experiment.py"
                        beta_chitin_dihydrous_shape_name = "rectangle"
                        beta_chitin_dihydrous_folder_name = "glycam06"
                    try:    
                        beta_chitin_dihydrous_script_path = os.path.join(beta_chitin_dihydrous_base_dir, "function", "beta-chitin-dihydrous", beta_chitin_dihydrous_shape_name, beta_chitin_dihydrous_folder_name, beta_chitin_dihydrous_script_name)
                        beta_chitin_dihydrous_command = ["python", beta_chitin_dihydrous_script_path, beta_chitin_dihydrous_a_unit, beta_chitin_dihydrous_b_unit, beta_chitin_dihydrous_c_unit]
                        beta_chitin_dihydrous_result = subprocess.run(beta_chitin_dihydrous_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if beta_chitin_dihydrous_result.returncode == 0:
                            beta_chitin_dihydrous_output = beta_chitin_dihydrous_result.stdout.strip()
                            self.beta_chitin_dihydrous_exp_rectangle_nochemical_Popup(beta_chitin_dihydrous_output)
                            self.beta_chitin_dihydrous_exp_rectangle_nochemical_Topology()                    
                        else:
                            QMessageBox.warning(self, "Generation Failed")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n")


                elif self.beta_chitin_dihydrous_noModRadio.isChecked() and model == "Parallelogram cross-section shape":
                    beta_chitin_dihydrous_width  = self.beta_chitin_dihydrous_width.text()  
                    beta_chitin_dihydrous_height = self.beta_chitin_dihydrous_height.text()
                    beta_chitin_dihydrous_c_unit = self.beta_chitin_dihydrous_cRepeatUnits.text()
                    if not beta_chitin_dihydrous_c_unit and beta_chitin_dihydrous_width and beta_chitin_dihydrous_height:
                        QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                        return
                    beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
                    beta_chitin_dihydrous_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if beta_chitin_dihydrous_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        beta_chitin_dihydrous_script_name = "beta_chitin_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta_chitin_finite_experiment.py"
                        beta_chitin_dihydrous_shape_name = "parallelogram"
                        beta_chitin_dihydrous_folder_name = "charmm36"
                    elif beta_chitin_dihydrous_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        beta_chitin_dihydrous_script_name = "beta_chitin_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta_chitin_finite_experiment.py"
                        beta_chitin_dihydrous_shape_name = "parallelogram"
                        beta_chitin_dihydrous_folder_name = "glycam06"
                    try:    
                        beta_chitin_dihydrous_script_path = os.path.join(beta_chitin_dihydrous_base_dir, "function", "beta-chitin-dihydrous", beta_chitin_dihydrous_shape_name, beta_chitin_dihydrous_folder_name, beta_chitin_dihydrous_script_name)
                        beta_chitin_dihydrous_command = ["python", beta_chitin_dihydrous_script_path, beta_chitin_dihydrous_c_unit,   beta_chitin_dihydrous_height, beta_chitin_dihydrous_width]
                        beta_chitin_dihydrous_result = subprocess.run(beta_chitin_dihydrous_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if beta_chitin_dihydrous_result.returncode == 0:
                            beta_chitin_dihydrous_output = beta_chitin_dihydrous_result.stdout.strip()
                            self.beta_chitin_dihydrous_exp_parallelogram_nochemical_Popup(beta_chitin_dihydrous_output)
                            self.beta_chitin_dihydrous_exp_parallelogram_nochemical_Topology()                    
                        else:
                            error_message = beta_chitin_dihydrous_result.stderr.strip() 
                            QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))

                #deacetylation  deacetylationRadio
                elif self.beta_chitin_dihydrous_deacetylationRadio.isChecked() :
                    QMessageBox.warning(self, "Unsupported Operation", "Currently, chemical modification doesn't support dihydrous models.")
               
                    #beta_chitin_dihydrous_a_unit = self.beta_chitin_dihydrous_aRepeatUnits.text()
                    #beta_chitin_dihydrous_b_unit = self.beta_chitin_dihydrous_bRepeatUnits.text()
                    #beta_chitin_dihydrous_c_unit = self.beta_chitin_dihydrous_cRepeatUnits.text()
                    #dda = self.beta_chitin_dihydrous_ddaLineEdit.text()  
                    #ph = self.beta_chitin_dihydrous_pHLineEdit.text()
                    #if not beta_chitin_dihydrous_c_unit and beta_chitin_dihydrous_a_unit and beta_chitin_dihydrous_b_unit and dda and ph:
                    #    QMessageBox.warning(self, "Input Error", "Please fill in all repeated unit parameters.")
                    #    return
                    #beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
                    #beta_chitin_dihydrous_base_dir = os.path.dirname(os.path.abspath(__file__))
                    #if beta_chitin_dihydrous_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                    #    beta_chitin_dihydrous_script_name = "alpha_chitin-modified-infinite.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "alpha_chitin-modified-finite.py"
                    #    beta_chitin_dihydrous_shape_name = "rectangle"
                    #    beta_chitin_dihydrous_folder_name = "charmm36"
                    #elif beta_chitin_dihydrous_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                    #    beta_chitin_dihydrous_script_name = "alpha_chitin_B_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "alpha_chitin_B_finite_experiment.py"
                    #    beta_chitin_dihydrous_shape_name = "rectangle"
                    #    beta_chitin_dihydrous_folder_name = "glycam06"
                    #try:    
                    #    beta_chitin_dihydrous_script_path = os.path.join(beta_chitin_dihydrous_base_dir, "function", "beta-chitin-dihydrous-deacetylation", beta_chitin_dihydrous_shape_name, beta_chitin_dihydrous_folder_name, beta_chitin_dihydrous_script_name)
                    #    beta_chitin_dihydrous_command = ["python", beta_chitin_dihydrous_script_path, beta_chitin_dihydrous_a_unit, beta_chitin_dihydrous_b_unit, beta_chitin_dihydrous_c_unit, dda, ph]
                    #    beta_chitin_dihydrous_result = subprocess.run(beta_chitin_dihydrous_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                    #    if beta_chitin_dihydrous_result.returncode == 0:
                    #        beta_chitin_dihydrous_output = beta_chitin_dihydrous_result.stdout.strip()
                    #        self.beta_chitin_dihydrous_exp_rectangle_deacetylation_Popup(beta_chitin_dihydrous_output)
                    #        self.beta_chitin_dihydrous_exp_rectangle_deacetylation_Topology()                    
                    #    else:
                    #        QMessageBox.warning(self, "Generation Failed")
                    #except Exception as e:
                    #    QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n")
                elif self.beta_chitin_dihydrous_carboxylationRadio.isChecked() :
                    QMessageBox.warning(self, "Unsupported Operation", "Currently, chemical modification doesn't support dihydrous models.")           

            ###user-defined crystallographic parameters
            elif self.beta_chitin_dihydrous_UserDefined.isChecked():
                if self.beta_chitin_dihydrous_noModRadio.isChecked() and model == "Rectangle cross-section shape":
                    beta_chitin_dihydrous_a_parm = self.beta_chitin_dihydrous_aParam.text()
                    beta_chitin_dihydrous_b_parm = self.beta_chitin_dihydrous_bParam.text()
                    beta_chitin_dihydrous_c_parm = self.beta_chitin_dihydrous_cParam.text()
                    beta_chitin_dihydrous_gamma_parm = self.beta_chitin_dihydrous_gammaParam.text()
                    beta_chitin_dihydrous_a_unit = self.beta_chitin_dihydrous_aRepeatUnits.text()
                    beta_chitin_dihydrous_b_unit = self.beta_chitin_dihydrous_bRepeatUnits.text()
                    beta_chitin_dihydrous_c_unit = self.beta_chitin_dihydrous_cRepeatUnits.text()
                    if not beta_chitin_dihydrous_a_parm and beta_chitin_dihydrous_b_parm and beta_chitin_dihydrous_c_parm  and beta_chitin_dihydrous_gamma_parm and beta_chitin_dihydrous_a_unit and beta_chitin_dihydrous_b_unit and beta_chitin_dihydrous_c_unit: 
                        QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                        return
                    beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
                    beta_chitin_dihydrous_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if beta_chitin_dihydrous_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        beta_chitin_dihydrous_script_name = "beta_chitin_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta_chitin_finite_experiment.py"
                        beta_chitin_dihydrous_ud_folder = "user-defined"
                        beta_chitin_dihydrous_shape_name = "rectangle"
                        beta_chitin_dihydrous_folder_name = "charmm36"
                    elif beta_chitin_dihydrous_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        beta_chitin_dihydrous_script_name = "beta_chitin_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta_chitin_finite_experiment.py"
                        beta_chitin_dihydrous_ud_folder = "user-defined"
                        beta_chitin_dihydrous_shape_name = "rectangle"
                        beta_chitin_dihydrous_folder_name = "glycam06"

                    try:    
                        beta_chitin_dihydrous_script_path = os.path.join(beta_chitin_dihydrous_base_dir, "function", "beta-chitin-dihydrous", beta_chitin_dihydrous_ud_folder, beta_chitin_dihydrous_shape_name, beta_chitin_dihydrous_folder_name, beta_chitin_dihydrous_script_name)
                        beta_chitin_dihydrous_command = ["python", beta_chitin_dihydrous_script_path, beta_chitin_dihydrous_a_parm, beta_chitin_dihydrous_b_parm, beta_chitin_dihydrous_c_parm, beta_chitin_dihydrous_gamma_parm, beta_chitin_dihydrous_a_unit, beta_chitin_dihydrous_b_unit,  beta_chitin_dihydrous_c_unit]
                        beta_chitin_dihydrous_result = subprocess.run(beta_chitin_dihydrous_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if beta_chitin_dihydrous_result.returncode == 0:
                            beta_chitin_dihydrous_output = beta_chitin_dihydrous_result.stdout.strip()
                            self.beta_chitin_dihydrous_exp_rectangle_nochemical_Popup(beta_chitin_dihydrous_output)
                            self.beta_chitin_dihydrous_exp_rectangle_nochemical_Topology()                    
                        else:
                            QMessageBox.warning(self, "Generation Failed")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n")

                elif self.beta_chitin_dihydrous_noModRadio.isChecked() and model == "Parallelogram cross-section shape":
                    beta_chitin_dihydrous_a_parm = self.beta_chitin_dihydrous_aParam.text()
                    beta_chitin_dihydrous_b_parm = self.beta_chitin_dihydrous_bParam.text()
                    beta_chitin_dihydrous_c_parm = self.beta_chitin_dihydrous_cParam.text()
                    beta_chitin_dihydrous_gamma_parm = self.beta_chitin_dihydrous_gammaParam.text()
                    beta_chitin_dihydrous_width  = self.beta_chitin_dihydrous_width.text()  
                    beta_chitin_dihydrous_height = self.beta_chitin_dihydrous_height.text()
                    beta_chitin_dihydrous_c_unit = self.beta_chitin_dihydrous_cRepeatUnits.text()
                    if not beta_chitin_dihydrous_a_parm and beta_chitin_dihydrous_b_parm and beta_chitin_dihydrous_c_parm  and beta_chitin_dihydrous_gamma_parm  and beta_chitin_dihydrous_width and beta_chitin_dihydrous_height and beta_chitin_dihydrous_c_unit: 
                        QMessageBox.warning(self, "Input Error", "Please fill in all parameters.")
                        return
                    beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
                    beta_chitin_dihydrous_base_dir = os.path.dirname(os.path.abspath(__file__))
                    if beta_chitin_dihydrous_ForceFieldType in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                        beta_chitin_dihydrous_script_name = "beta_chitin_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta_chitin_finite_experiment.py"
                        beta_chitin_dihydrous_ud_folder = "user-defined"
                        beta_chitin_dihydrous_shape_name = "parallelogram"
                        beta_chitin_dihydrous_folder_name = "charmm36"
                    elif beta_chitin_dihydrous_ForceFieldType in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                        beta_chitin_dihydrous_script_name = "beta_chitin_infinite_experiment.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta_chitin_finite_experiment.py"
                        beta_chitin_dihydrous_ud_folder = "user-defined"
                        beta_chitin_dihydrous_shape_name = "parallelogram"
                        beta_chitin_dihydrous_folder_name = "glycam06"

                    try:    
                        beta_chitin_dihydrous_script_path = os.path.join(beta_chitin_dihydrous_base_dir, "function", "beta-chitin-dihydrous", beta_chitin_dihydrous_ud_folder, beta_chitin_dihydrous_shape_name, beta_chitin_dihydrous_folder_name, beta_chitin_dihydrous_script_name)
                        beta_chitin_dihydrous_command = ["python", beta_chitin_dihydrous_script_path, beta_chitin_dihydrous_a_parm, beta_chitin_dihydrous_b_parm, beta_chitin_dihydrous_c_parm, beta_chitin_dihydrous_gamma_parm, beta_chitin_dihydrous_c_unit,  beta_chitin_dihydrous_height, beta_chitin_dihydrous_width]
                        beta_chitin_dihydrous_result = subprocess.run(beta_chitin_dihydrous_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                        if beta_chitin_dihydrous_result.returncode == 0:
                            beta_chitin_dihydrous_output = beta_chitin_dihydrous_result.stdout.strip()
                            self.beta_chitin_dihydrous_exp_parallelogram_nochemical_Popup(beta_chitin_dihydrous_output)
                            self.beta_chitin_dihydrous_exp_parallelogram_nochemical_Topology()                    
                        else:
                            error_message = beta_chitin_dihydrous_result.stderr.strip() 
                            QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                    except Exception as e:
                        QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))
                elif self.beta_chitin_dihydrous_carboxylationRadio.isChecked() :
                    QMessageBox.warning(self, "Unsupported Operation", "Currently, chemical modification doesn't support dihydrous models.")           
                elif self.beta_chitin_dihydrous_deacetylationRadio.isChecked() :
                    QMessageBox.warning(self, "Unsupported Operation", "Currently, chemical modification doesn't support dihydrous models.")
               

##beta chitin rectangle experimental data no modification windows output
    def beta_chitin_dihydrous_exp_rectangle_nochemical_Topology(self):  #native chitin topology
        beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-chitin_icm_topgen.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in beta_chitin_dihydrous_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "dihydrous"

        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.beta_chitin_dihydrous_exp_rectangle_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Dihydrous β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Dihydrous β-chitin Topology Generation Failed")

    def beta_chitin_dihydrous_exp_rectangle_nochemical_Popup(self, beta_chitin_dihydrous_rectangle_output):
        beta_chitin_dihydrous_rectangle_output = f"Dihydrous β-chitin Generated Successfully"
        QMessageBox.information(self, "Build Result", beta_chitin_dihydrous_rectangle_output)

    def beta_chitin_dihydrous_exp_rectangle_nochemical_Topology_Popup(self):
        beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in beta_chitin_dihydrous_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Dihydrous β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##beta chitin rectangle experimental data deacetylation windows output
    def beta_chitin_dihydrous_exp_rectangle_deacetylation_Topology(self):  #native chitin topology
        beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "deacetylation_alpha-chitin_icm_topgen.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "deacetylation_alpha-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in beta_chitin_dihydrous_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "dihydrous"

        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.beta_chitin_dihydrous_exp_rectangle_deacetylation_Topology_Popup()
            else:
                QMessageBox.warning(self, "Deacetylatedly Dihydrous β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Deacetylatedly Dihydrous β-chitin Topology Generation Failed")

    def beta_chitin_dihydrous_exp_rectangle_deacetylation_Popup(self, beta_chitin_dihydrous_rectangle_output):
        parts = beta_chitin_dihydrous_rectangle_output.split(',')
        dda = parts[0].split(':')[1].strip()
        ph = parts[1].split(':')[1].strip()
        units = parts[2].split(':')[1].strip()
        message = f"Deacetylatedly dihydrous β-chitin was Generated Successfully!\nActual DDA: {dda}\nActual pH: {ph}\nDeprotonated units: {units}"
        QMessageBox.information(self, "Build Result", message)

    def beta_chitin_dihydrous_exp_rectangle_deacetylation_Topology_Popup(self):
        beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in beta_chitin_dihydrous_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Deacetylatedly Dihydrous β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)


##beta-chitin parallelogram experimental data no modification windows output
    def beta_chitin_dihydrous_exp_parallelogram_nochemical_Topology(self):  #native chitin topology
        beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "beta-para-chitin_icm_topgen.py" if "Infinite" in beta_chitin_dihydrous_ForceFieldType else "beta-para-chitin_fcm_topgen.py"
        folder_name_i = "glycam06" if "GLYCAM06" in beta_chitin_dihydrous_ForceFieldType else "charmm36"
        folder_name_j = "beta-chitin"
        folder_name_k = "dihydrous"

        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, script_name)
        try:
            command = ["python", script_path]
            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                self.beta_chitin_dihydrous_exp_parallelogram_nochemical_Topology_Popup()
            else:
                QMessageBox.warning(self, "Dihydrous β-chitin Topology Generation Failed")
        except Exception as e:
            QMessageBox.critical(self, "Dihydrous β-chitin Topology Generation Failed")


    def beta_chitin_dihydrous_exp_parallelogram_nochemical_Popup(self, beta_chitin_dihydrous_parallelogram_output):
        beta_chitin_dihydrous_parallelogram_output = f"Dihydrous β-chitin-B Generated Successfully"
        QMessageBox.information(self, "Build Result", beta_chitin_dihydrous_parallelogram_output)


    def beta_chitin_dihydrous_exp_parallelogram_nochemical_Topology_Popup(self):
        beta_chitin_dihydrous_ForceFieldType = self.beta_chitin_dihydrous_ForceFieldTypeselector.currentText()
        file_name = "glycam06" if "GLYCAM06" in beta_chitin_dihydrous_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for Dihydrous β-chitin Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)



##----------------------------------------------------------------beta-chitin building------------------------------------------------------

#############################################################chitin_building##########################################################




#############################################################Bundle_building##########################################################
    def populateBundleSubTab(self):
        Cellulose_bundleTab = QWidget()
        Chitin_bundleTab = QWidget()

        self.populateCel_BundleTab(Cellulose_bundleTab)
        #self.populateChu_BundleTab(Chitin_bundleTab)

        self.bundleTab.addTab(Cellulose_bundleTab, "Cellulose Bundles")
        #self.bundleTab.addTab(Chitin_bundleTab, "Chitin Bundles")
        self.bundleTab.setStyle(QStyleFactory.create('Fusion'))
        self.bundleTab.tabBar().setExpanding(False) 
        self.updateTabWidths()  

###bundle cellulose
    def populateCel_BundleTab(self, tab):
        Cel_bundle_mainLayout = QVBoxLayout(tab)  # Primary layout to arrange content vertically
        Cel_bundle_topLayout = QHBoxLayout()  # Use horizontal layout for top-aligned items
        Cel_bundle_topLayout.setAlignment(Qt.AlignTop | Qt.AlignLeft)  # Align content to the top left
   
        Cel_bundle_font = QFont("Arial", 13)
    
        # Label for the dropdown
        Cel_bundle_label = QLabel("Please select the crystal structure to build cellulose bundles:")
        Cel_bundle_label.setFont(Cel_bundle_font)
        Cel_bundle_topLayout.addWidget(Cel_bundle_label)  # Add label to the horizontal layout
        Cel_bundle_comboBox = QComboBox()
        Cel_bundle_comboBox.setFont(Cel_bundle_font)
        Cel_bundle_comboBox.addItem("Select here")  
        Cel_bundle_comboBox.addItem("Cellulose-Iα")
        Cel_bundle_comboBox.addItem("Cellulose-Iβ")
        Cel_bundle_comboBox.currentIndexChanged.connect(self.updateCel_bundle_Options)
        Cel_bundle_comboBox.setMinimumSize(QSize(240, 30))  # Set minimum size
        Cel_bundle_comboBox.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        Cel_bundle_comboBox.setMaxVisibleItems(10)
        Cel_bundle_topLayout.addWidget(Cel_bundle_comboBox)  # Add combo box to the horizontal layout
        Cel_bundle_mainLayout.addLayout(Cel_bundle_topLayout) 
    
        self.Cel_bundle_StackedWidget = QStackedWidget()
        self.Cel_bundle_StackedWidget.addWidget(QWidget())  
        self.setupCelA_bundle_Options()  
        self.setupCelB_bundle_Options() 
        Cel_bundle_mainLayout.addWidget(self.Cel_bundle_StackedWidget)  
    
    def updateCel_bundle_Options(self, index):
        if index == 0:
            self.Cel_bundle_StackedWidget.setVisible(False)
        elif index == 1:
            self.Cel_bundle_StackedWidget.setCurrentIndex(1)
            self.Cel_bundle_StackedWidget.setVisible(True)
        elif index == 2:
            self.Cel_bundle_StackedWidget.setCurrentIndex(2)
            self.Cel_bundle_StackedWidget.setVisible(True)

###-------bundle-cellulose_Ialpha--------------
    def setupCelA_bundle_Options(self):
        self.CelA_bundle_Options = QWidget()
        self.Cel_bundle_StackedWidget.addWidget(self.CelA_bundle_Options) 
        CelA_bundle_layout = QVBoxLayout(self.CelA_bundle_Options)  # Parent the layout to the widget directly
        CelA_bundle_layout.setAlignment(Qt.AlignTop)
        CelA_bundle_Font = QFont("Arial", 13) 

        # Radio buttons setup
        #self.CelA_bundle_radioGroup = QGroupBox("Parameter Type")
        #self.CelA_bundle_radioGroup.setAlignment(Qt.AlignTop)
        #CelA_bundle_radioLayout = QHBoxLayout()
        #self.CelA_bundle_Experimental = QRadioButton("Crystallographic Parameters from X-Ray Diffraction Experiments")
        #self.CelA_bundle_UserDefined = QRadioButton("User-Defined Crystallographic Parameters")
#
        #self.CelA_bundle_Experimental.setFont(CelA_bundle_Font)
        #self.CelA_bundle_UserDefined.setFont(CelA_bundle_Font)
        #CelA_bundle_radioLayout.addWidget(self.CelA_bundle_Experimental)
        #CelA_bundle_radioLayout.addWidget(self.CelA_bundle_UserDefined)
        #CelA_bundle_layout.addLayout(CelA_bundle_radioLayout)

###-------bundle-cellulose_Ialpha--------------


###-------bundle-cellulose_Ibeta--------------
    def setupCelB_bundle_Options(self):
        self.CelB_bundle_Options = QWidget()
        self.Cel_bundle_StackedWidget.addWidget(self.CelB_bundle_Options)
        CelB_bundle_layout = QVBoxLayout(self.CelB_bundle_Options)
        CelB_bundle_layout.setAlignment(Qt.AlignTop)
        CelB_bundle_Font = QFont("Arial", 13)
    

        self.CelB_bundle_ModelComboBox = QComboBox(self.CelB_bundle_Options)
        self.CelB_bundle_ModelComboBox.setFont(CelB_bundle_Font)
        self.CelB_bundle_ModelComboBox.addItem("Please select the cellulose bundle type")
        self.CelB_bundle_ModelComboBox.addItems(["4-crystallite Bundle Model", "7-crystallite Bundle Model"])
        CelB_bundle_layout.addWidget(self.CelB_bundle_ModelComboBox)
    
        self.CelB_bundle_ComboBox = QComboBox(self.CelB_bundle_Options)
        self.CelB_bundle_ComboBox.setFont(CelB_bundle_Font)
        self.CelB_bundle_ComboBox.addItem("Please select the crystallite shape for elementary structure")
        self.CelB_bundle_ComboBox.setVisible(False)
        CelB_bundle_layout.addWidget(self.CelB_bundle_ComboBox)
    
        # Parameter display setup
        self.CelB_bundle_parametersGroup = QGroupBox("Bundle Parameters")
        self.CelB_bundle_parametersLayout = QVBoxLayout()
        self.CelB_bundle_parametersGroup.setLayout(self.CelB_bundle_parametersLayout)
        self.CelB_bundle_parametersGroup.setVisible(False)
        CelB_bundle_layout.addWidget(self.CelB_bundle_parametersGroup)

        self.CelB_bundle_ForceFieldSelector = QComboBox(self.CelB_bundle_Options)
        self.CelB_bundle_ForceFieldSelector.setFont(CelB_bundle_Font)
        self.CelB_bundle_ForceFieldSelector.addItem("Please select the force field for atomistic simulations")
        self.CelB_bundle_ForceFieldSelector.addItems(["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model", "GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"])
        self.CelB_bundle_ForceFieldSelector.setVisible(False)
        CelB_bundle_layout.addWidget(self.CelB_bundle_ForceFieldSelector)


        self.CelB_bundle_invokeButton = QPushButton("Generate Cellulose Iβ bundle")
        self.CelB_bundle_invokeButton.setVisible(False)
        self.CelB_bundle_invokeButton.clicked.connect(self.CelB_bundle_invokeScript)
        CelB_bundle_layout.addWidget(self.CelB_bundle_invokeButton)


        # Connections
        self.CelB_bundle_ModelComboBox.currentIndexChanged.connect(self.CelB_bundle_updateModelOptions)
        self.CelB_bundle_ComboBox.currentIndexChanged.connect(self.CelB_bundle_updateParameterDisplay)

    def CelB_bundle_updateModelOptions(self):
        CelB_bundle_model_index = self.CelB_bundle_ModelComboBox.currentIndex()
        self.CelB_bundle_ComboBox.clear()
        self.CelB_bundle_ComboBox.addItem("Please select the crystallite shape for elementary structure")
        if CelB_bundle_model_index == 1:
            self.CelB_bundle_ComboBox.addItems(["18-chain hexagonal cross-section shape", "36-chain square cross-section shape", "36-chain square cross-section with antiparallel chain orientation of crystallites"])
        elif CelB_bundle_model_index == 2:
            self.CelB_bundle_ComboBox.addItems(["18-chain hexagonal cross-section shape"])
        self.CelB_bundle_ComboBox.setVisible(CelB_bundle_model_index != 0)

    def CelB_bundle_updateParameterDisplay(self):
            self.CelB_bundle_clearParameterWidgets()
            CelB_bundle_model_index = self.CelB_bundle_ModelComboBox.currentIndex()
            CelB_bundle_shape_index = self.CelB_bundle_ComboBox.currentIndex()
            image_base_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'image', 'bundles', 'cellulose-Ib')
    
            if CelB_bundle_model_index > 0 and CelB_bundle_shape_index > 0:
                self.CelB_bundle_parametersGroup.setVisible(True)
                self.CelB_bundle_invokeButton.setVisible(True)
                self.CelB_bundle_ForceFieldSelector.setVisible(True)
                if CelB_bundle_model_index == 1:
                    if CelB_bundle_shape_index == 1:
                        self.CelB_bundle_addParameterWidgetsRow(["Length of cellulose Iβ bundle (Å)"], ["Distance between cellulose Iβ (110) planes (Å)", "Distance between cellulose Iβ (1-10) planes (Å)"], ["Distance between cellulose Iβ (100) planes (Å)"],
                                                            os.path.join(image_base_path, '4-model-hexagonal.png'))
                    elif CelB_bundle_shape_index == 2:
                        self.CelB_bundle_addParameterWidgetsRow(["Length of cellulose Iβ bundle (Å)"], ["Distance between cellulose Iβ (110) planes (Å)", "Distance between cellulose Iβ (1-10) planes (Å)"], ["Distance between cellulose Iβ (100) planes (Å)"],
                                                            os.path.join(image_base_path, '4-model-square.png'))
                    elif CelB_bundle_shape_index == 3:
                        self.CelB_bundle_addParameterWidgetsRow(["Length of cellulose Iβ bundle (Å)"], ["Distance between cellulose Iβ (100) planes (Å)", "Distance between cellulose Iβ (1-10) and (110) planes (Å)"], ["Distance between cellulose Iβ (1-10) and (110) planes (Å)"],
                                                            os.path.join(image_base_path, '4-model-square-antiparall.png'))
                elif CelB_bundle_model_index == 2:
                    if CelB_bundle_shape_index == 1:
                        self.CelB_bundle_addParameterWidgetsRow(
                            ["Length of cellulose Iβ bundle (Å)"], 
                            ["Distance between cellulose Iβ (110) planes (Å)", "Distance between cellulose Iβ (1-10) planes (Å)"], 
                            ["Distance between cellulose Iβ (100) planes (Å)"],
                            os.path.join(image_base_path, 'cellulose-7-18.png')
                        )
            else:
                self.CelB_bundle_parametersGroup.setVisible(False)
                self.CelB_bundle_invokeButton.setVisible(False)

    def CelB_bundle_findLineEdit(self, parameter_name):
        for i in range(self.CelB_bundle_parametersLayout.count()):
            widget = self.CelB_bundle_parametersLayout.itemAt(i).widget()
            if isinstance(widget, QLabel) and widget.text() == parameter_name:
                line_edit = self.CelB_bundle_parametersLayout.itemAt(i + 1).widget()
                if isinstance(line_edit, QLineEdit):
                    return line_edit.text()
        return None 


    def CelB_bundle_clearParameterWidgets(self):
        while self.CelB_bundle_parametersLayout.count():
            child = self.CelB_bundle_parametersLayout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

    def CelB_bundle_addParameterWidgetsRow(self, CelB_bundle_top_params, CelB_bundle_middle_params, CelB_bundle_bottom_params, CelB_bundle_image_path):
        for param in CelB_bundle_top_params:
            label = QLabel(param)
            label.setFont(QFont("Arial", 12))
            lineEdit = QLineEdit()
            self.CelB_bundle_parametersLayout.addWidget(label)
            self.CelB_bundle_parametersLayout.addWidget(lineEdit)

        for param in CelB_bundle_middle_params:
            label = QLabel(param)
            label.setFont(QFont("Arial", 12))
            lineEdit = QLineEdit()
            self.CelB_bundle_parametersLayout.addWidget(label)
            self.CelB_bundle_parametersLayout.addWidget(lineEdit)

        if CelB_bundle_bottom_params:
            for param in CelB_bundle_bottom_params:
                label = QLabel(param)
                label.setFont(QFont("Arial", 12))
                lineEdit = QLineEdit()
                self.CelB_bundle_parametersLayout.addWidget(label)
                self.CelB_bundle_parametersLayout.addWidget(lineEdit)

        self.CelB_bundle_addImageDisplay(CelB_bundle_image_path)

    def CelB_bundle_addImageDisplay(self, CelB_bundle_image_path):
        CelB_bundle_pixmap = QPixmap(CelB_bundle_image_path)
        CelB_bundle_label = QLabel()
        CelB_bundle_label.setPixmap(CelB_bundle_pixmap)
        CelB_bundle_label.setScaledContents(True)
        
        # Set fixed size for the label
        CelB_bundle_label.setFixedSize(850, 250)  # Width, Height in pixels
        

        self.CelB_bundle_parametersLayout.addWidget(CelB_bundle_label)
        self.CelB_bundle_parametersLayout.setAlignment(CelB_bundle_label, Qt.AlignCenter)


    def CelB_bundle_invokeScript(self):
        CelB_bundle_model_index = self.CelB_bundle_ModelComboBox.currentIndex()
        CelB_bundle_shape_index = self.CelB_bundle_ComboBox.currentIndex()
    
        if CelB_bundle_model_index == 0 or CelB_bundle_shape_index == 0:
            QMessageBox.warning(self, "Selection Error", "Please select both a bundle type and a crystallite shape.")
            return
        
        ###cellulose Ibeta-7bundle
        elif CelB_bundle_model_index == 1 :

            ##18-chain hexagonal shape
            if CelB_bundle_shape_index == 1:
                CelB_bundle_length_of_bundles = self.CelB_bundle_findLineEdit("Length of cellulose Iβ bundle (Å)")
                CelB_bundle_interlayer_distance_110 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (110) planes (Å)")
                CelB_bundle_interlayer_distance_100 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (100) planes (Å)")
                CelB_bundle_interlayer_distance_1_10 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (1-10) planes (Å)")
                if not CelB_bundle_length_of_bundles or not CelB_bundle_interlayer_distance_110 or not CelB_bundle_interlayer_distance_100 or not CelB_bundle_interlayer_distance_1_10:
                    QMessageBox.warning(self, "Input Error", "Please ensure all required fields are filled.")
                    return
                CelB_bundle_force_field = self.CelB_bundle_ForceFieldSelector.currentText()
                CelB_bundle_base_dir = os.path.dirname(os.path.abspath(__file__))
                if CelB_bundle_force_field == "Please select the force field for atomistic simulations":
                    QMessageBox.warning(self, "Selection Missing", "Please select a force field before generating the model.")
                    return
                if CelB_bundle_force_field in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                    CelB_bundle_script_name = "infinite_experiment.py" if "Infinite" in CelB_bundle_force_field else "finite_experiment.py"
                    CelB_bundle_shape_name = "4-bundle"
                    CelB_bundle_crystal_shape_name= "18-chain-model"
                    CelB_bundle_folder_name = "charmm36"
                elif CelB_bundle_force_field in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                    CelB_bundle_script_name = "infinite_experiment.py" if "Infinite" in CelB_bundle_force_field else "finite_experiment.py"
                    CelB_bundle_shape_name = "4-bundle"
                    CelB_bundle_crystal_shape_name= "18-chain-model"
                    CelB_bundle_folder_name = "glycam06"
                CelB_bundle_script_path = os.path.join(CelB_bundle_base_dir, "function", "bundles", "cellulose", "cellulose-I-beta" , CelB_bundle_shape_name, CelB_bundle_crystal_shape_name, CelB_bundle_folder_name, CelB_bundle_script_name)
                try:
                    CelB_bundle_command = ["python", CelB_bundle_script_path, str(CelB_bundle_length_of_bundles), str(CelB_bundle_interlayer_distance_100),
                                                                              str(CelB_bundle_interlayer_distance_1_10), str(CelB_bundle_interlayer_distance_110)]
                    CelB_bundle_result = subprocess.run(CelB_bundle_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                    if CelB_bundle_result.returncode == 0:
                        CelB_bundle_output = CelB_bundle_result.stdout.strip()
                        self.CelB_bundle_4_18_Popup(CelB_bundle_output)
                        self.CelB_bundle_4_18_Topology()                    
                    else:
                        error_message = CelB_bundle_result.stderr.strip()  # Get the error message from stderr
                        QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                except Exception as e:
                    QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))
 

            ##36-chain square shape
            if CelB_bundle_shape_index == 2:
                CelB_bundle_length_of_bundles = self.CelB_bundle_findLineEdit("Length of cellulose Iβ bundle (Å)")
                CelB_bundle_interlayer_distance_110 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (110) planes (Å)")
                CelB_bundle_interlayer_distance_100 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (100) planes (Å)")
                CelB_bundle_interlayer_distance_1_10 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (1-10) planes (Å)")
                if not CelB_bundle_length_of_bundles or not CelB_bundle_interlayer_distance_110 or not CelB_bundle_interlayer_distance_100 or not CelB_bundle_interlayer_distance_1_10:
                    QMessageBox.warning(self, "Input Error", "Please ensure all required fields are filled.")
                    return
                CelB_bundle_force_field = self.CelB_bundle_ForceFieldSelector.currentText()
                CelB_bundle_base_dir = os.path.dirname(os.path.abspath(__file__))
                if CelB_bundle_force_field == "Please select the force field for atomistic simulations":
                    QMessageBox.warning(self, "Selection Missing", "Please select a force field before generating the model.")
                    return
                if CelB_bundle_force_field in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                    CelB_bundle_script_name = "infinite_experiment.py" if "Infinite" in CelB_bundle_force_field else "finite_experiment.py"
                    CelB_bundle_shape_name = "4-bundle"
                    CelB_bundle_crystal_shape_name= "36-square-model"
                    CelB_bundle_folder_name = "charmm36"
                elif CelB_bundle_force_field in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                    CelB_bundle_script_name = "infinite_experiment.py" if "Infinite" in CelB_bundle_force_field else "finite_experiment.py"
                    CelB_bundle_shape_name = "4-bundle"
                    CelB_bundle_crystal_shape_name= "36-square-model"
                    CelB_bundle_folder_name = "glycam06"
                CelB_bundle_script_path = os.path.join(CelB_bundle_base_dir, "function", "bundles", "cellulose", "cellulose-I-beta" , CelB_bundle_shape_name, CelB_bundle_crystal_shape_name, CelB_bundle_folder_name, CelB_bundle_script_name)
                try:
                    CelB_bundle_command = ["python", CelB_bundle_script_path, str(CelB_bundle_length_of_bundles), str(CelB_bundle_interlayer_distance_100),
                                                                              str(CelB_bundle_interlayer_distance_1_10), str(CelB_bundle_interlayer_distance_110)]
                    CelB_bundle_result = subprocess.run(CelB_bundle_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                    if CelB_bundle_result.returncode == 0:
                        CelB_bundle_output = CelB_bundle_result.stdout.strip()
                        self.CelB_bundle_4_36_Popup(CelB_bundle_output)
                        self.CelB_bundle_4_36_Topology()                    
                    else:
                        error_message = CelB_bundle_result.stderr.strip()  # Get the error message from stderr
                        QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                except Exception as e:
                    QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))
  
            ##36-chain antiparallelled square shape
            if CelB_bundle_shape_index == 3:
                CelB_bundle_length_of_bundles = self.CelB_bundle_findLineEdit("Length of cellulose Iβ bundle (Å)")
                CelB_bundle_interlayer_distance_110 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (1-10) and (110) planes (Å)")
                CelB_bundle_interlayer_distance_1_10 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (1-10) and (110) planes (Å)")
                CelB_bundle_interlayer_distance_100 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (100) planes (Å)")
                if not CelB_bundle_length_of_bundles or not CelB_bundle_interlayer_distance_110 or not CelB_bundle_interlayer_distance_100 or not CelB_bundle_interlayer_distance_1_10:
                    QMessageBox.warning(self, "Input Error", "Please ensure all required fields are filled.")
                    return
                CelB_bundle_force_field = self.CelB_bundle_ForceFieldSelector.currentText()
                CelB_bundle_base_dir = os.path.dirname(os.path.abspath(__file__))
                if CelB_bundle_force_field == "Please select the force field for atomistic simulations":
                    QMessageBox.warning(self, "Selection Missing", "Please select a force field before generating the model.")
                    return
                if CelB_bundle_force_field in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                    CelB_bundle_script_name = "infinite_antipara_experiment.py" if "Infinite" in CelB_bundle_force_field else "finite_antipara_experiment.py"
                    CelB_bundle_shape_name = "4-bundle"
                    CelB_bundle_crystal_shape_name= "36-square-model"
                    CelB_bundle_folder_name = "charmm36"
                elif CelB_bundle_force_field in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                    CelB_bundle_script_name = "infinite_antipara_experiment.py" if "Infinite" in CelB_bundle_force_field else "finite_antipara_experiment.py"
                    CelB_bundle_shape_name = "4-bundle"
                    CelB_bundle_crystal_shape_name= "36-square-model"
                    CelB_bundle_folder_name = "glycam06"
                CelB_bundle_script_path = os.path.join(CelB_bundle_base_dir, "function", "bundles", "cellulose", "cellulose-I-beta" , CelB_bundle_shape_name, CelB_bundle_crystal_shape_name, CelB_bundle_folder_name, CelB_bundle_script_name)
                try:
                    CelB_bundle_command = ["python", CelB_bundle_script_path, str(CelB_bundle_length_of_bundles), str(CelB_bundle_interlayer_distance_100),
                                                                              str(CelB_bundle_interlayer_distance_1_10), str(CelB_bundle_interlayer_distance_110)]
                    CelB_bundle_result = subprocess.run(CelB_bundle_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                    if CelB_bundle_result.returncode == 0:
                        CelB_bundle_output = CelB_bundle_result.stdout.strip()
                        self.CelB_bundle_4_36_Popup(CelB_bundle_output)
                        self.CelB_bundle_4_36_Topology()                    
                    else:
                        error_message = CelB_bundle_result.stderr.strip()  # Get the error message from stderr
                        QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                except Exception as e:
                    QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))
  

        ####7 crystallite-bundle
        elif CelB_bundle_model_index == 2 :
            if CelB_bundle_shape_index == 1:    
                # Retrieve parameter inputs
                CelB_bundle_length_of_bundles = self.CelB_bundle_findLineEdit("Length of cellulose Iβ bundle (Å)")
                CelB_bundle_interlayer_distance_110 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (110) planes (Å)")
                CelB_bundle_interlayer_distance_100 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (100) planes (Å)")
                CelB_bundle_interlayer_distance_1_10 = self.CelB_bundle_findLineEdit("Distance between cellulose Iβ (1-10) planes (Å)")
                if not CelB_bundle_length_of_bundles or not CelB_bundle_interlayer_distance_110 or not CelB_bundle_interlayer_distance_100 or not CelB_bundle_interlayer_distance_1_10:
                    QMessageBox.warning(self, "Input Error", "Please ensure all required fields are filled.")
                    return
                CelB_bundle_force_field = self.CelB_bundle_ForceFieldSelector.currentText()
                CelB_bundle_base_dir = os.path.dirname(os.path.abspath(__file__))
                if CelB_bundle_force_field == "Please select the force field for atomistic simulations":
                    QMessageBox.warning(self, "Selection Missing", "Please select a force field before generating the model.")
                    return
                if CelB_bundle_force_field in ["CHARMM36 Infinite Chain Model", "CHARMM36 Finite Chain Model"]:
                    CelB_bundle_script_name = "infinite_experiment.py" if "Infinite" in CelB_bundle_force_field else "finite_experiment.py"
                    CelB_bundle_shape_name = "7-bundle"
                    CelB_bundle_crystal_shape_name= "18-chain-model"
                    CelB_bundle_folder_name = "charmm36"
                elif CelB_bundle_force_field in ["GLYCAM06 Infinite Chain Model", "GLYCAM06 Finite Chain Model"]:
                    CelB_bundle_script_name = "infinite_experiment.py" if "Infinite" in CelB_bundle_force_field else "finite_experiment.py"
                    CelB_bundle_shape_name = "7-bundle"
                    CelB_bundle_crystal_shape_name= "18-chain-model"
                    CelB_bundle_folder_name = "glycam06"
                CelB_bundle_script_path = os.path.join(CelB_bundle_base_dir, "function", "bundles", "cellulose", "cellulose-I-beta" , CelB_bundle_shape_name, CelB_bundle_crystal_shape_name, CelB_bundle_folder_name, CelB_bundle_script_name)
                try:
                    CelB_bundle_command = ["python", CelB_bundle_script_path, str(CelB_bundle_length_of_bundles), str(CelB_bundle_interlayer_distance_100), str(CelB_bundle_interlayer_distance_100),
                                                                              str(CelB_bundle_interlayer_distance_1_10), str(CelB_bundle_interlayer_distance_110),
                                                                              str(CelB_bundle_interlayer_distance_1_10), str(CelB_bundle_interlayer_distance_110)]
                    CelB_bundle_result = subprocess.run(CelB_bundle_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                    if CelB_bundle_result.returncode == 0:
                        CelB_bundle_output = CelB_bundle_result.stdout.strip()
                        self.CelB_bundle_7_18_Popup(CelB_bundle_output)
                        self.CelB_bundle_7_18_Topology()                    
                    else:
                        error_message = CelB_bundle_result.stderr.strip()  # Get the error message from stderr
                        QMessageBox.warning(self, "Generation Failed", f"\n{error_message}")
                except Exception as e:
                    QMessageBox.critical(self, "Execution Failed", "Failed to execute the script:\n" + str(e))



##7-bundle 18-chain 
    def CelB_bundle_7_18_Topology(self):  #native chitin topology
        CelB_bundle_7_18_ForceFieldType = self.CelB_bundle_ForceFieldSelector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelB_bundle_7_18_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelB_bundle_7_18_ForceFieldType else "charmm36"
        folder_name_j = "bundles"
        folder_name_k = "cellulose-I-beta"
        folder_name_l = "7-bundle"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelB_bundle_7_18_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Bundle Topology Generation Failed")

    def CelB_bundle_7_18_Popup(self, message):
        message = f"7 cellulose-Iβ-crystallite bundle was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelB_bundle_7_18_TopologyPopup(self):
        CelB_bundle_7_18_ForceFieldType = self.CelB_bundle_ForceFieldSelector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelB_bundle_7_18_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for 7 cellulose-Iβ-crystallite bundle Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)




##===4======-bundle 18-chain 
    def CelB_bundle_4_18_Topology(self):  #native chitin topology
        CelB_bundle_4_18_ForceFieldType = self.CelB_bundle_ForceFieldSelector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelB_bundle_4_18_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelB_bundle_4_18_ForceFieldType else "charmm36"
        folder_name_j = "bundles"
        folder_name_k = "cellulose-I-beta"
        folder_name_l = "4-bundle"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelB_bundle_4_18_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Bundle Topology Generation Failed")

    def CelB_bundle_4_18_Popup(self, message):
        message = f"4 cellulose-Iβ-crystallite bundle was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelB_bundle_4_18_TopologyPopup(self):
        CelB_bundle_4_18_ForceFieldType = self.CelB_bundle_ForceFieldSelector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelB_bundle_4_18_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for 4 cellulose-Iβ-crystallite bundle Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)        




##===4======-bundle 36-chain 
    def CelB_bundle_4_36_Topology(self):  #native chitin topology
        CelB_bundle_4_36_ForceFieldType = self.CelB_bundle_ForceFieldSelector.currentText()
        base_dir = os.path.dirname(os.path.abspath(__file__))
        script_name = "cellulose-I-beta_icm.py" if "Infinite" in CelB_bundle_4_36_ForceFieldType else "cellulose-I-beta_fcm.py"
        folder_name_i = "glycam06" if "GLYCAM06" in CelB_bundle_4_36_ForceFieldType else "charmm36"
        folder_name_j = "bundles"
        folder_name_k = "cellulose-I-beta"
        folder_name_l = "4-bundle"
        script_path = os.path.join(base_dir, "topology", folder_name_i, folder_name_j, folder_name_k, folder_name_l, script_name)
        command = ["python", script_path]
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            self.CelB_bundle_4_36_TopologyPopup()
        else:
            QMessageBox.warning(self, "cellulose-Iβ Bundle Topology Generation Failed")

    def CelB_bundle_4_36_Popup(self, message):
        message = f"4 cellulose-Iβ-crystallite bundle was generated successfully"
        QMessageBox.information(self, "Build Result", message)

    def CelB_bundle_4_36_TopologyPopup(self):
        CelB_bundle_4_36_ForceFieldType = self.CelB_bundle_ForceFieldSelector.currentText()
        file_name = "glycam06" if "GLYCAM06" in CelB_bundle_4_36_ForceFieldType else "CHARMM36"
        message = f"{file_name} Topology File for 4 cellulose-Iβ-crystallite bundle Generated Successfully."
        QMessageBox.information(self, "Topology Build Result", message)        




###-------bundle-cellulose_Ibeta--------------


###bundle chitin
    #def populateChu_BundleTab(self, tab):
    #    Chi_bundle_mainLayout = QVBoxLayout(tab)  # Primary layout to arrange content vertically
    #    Chi_bundle_topLayout = QHBoxLayout()  # Use horizontal layout for top-aligned items
    #    Chi_bundle_topLayout.setAlignment(Qt.AlignTop | Qt.AlignLeft)  # Align content to the top left
   #
    #    Chi_bundle_font = QFont("Arial", 13)
#############################################################Bundle_building##########################################################





##----------------------------------------------------------- font and size settings --------------------------------------------------------
    def resizeEvent(self, event):
        """Handle resizing to adjust tab widths dynamically."""
        super().resizeEvent(event)
        self.updateTabWidths()
    
    def updateTabWidths(self):
        """Calculate and set the width of each tab dynamically to take up one-third of the total width."""
        total_width = self.chitinTab.width()
        tab_width = total_width // 1.842  # Divide the total width by 3 for equal thirds
        self.chitinTab.tabBar().setStyleSheet(f"""
            QTabBar::tab {{
                width: {tab_width - 18}px;  /* Leave space for padding */
                font-size: 13px;  /* Adjust font size if needed */
            }}
        """)
    def populateSubTab(self, tab, text):
        layout = QVBoxLayout()
        label = QLabel(text)
        label.setFont(QFont("Arial", 14))
        layout.addWidget(label)
        tab.setLayout(layout)
        
def main():
    app = QApplication(sys.argv)  # Create an instance of QApplication
    window = QMainWindow()        # Create an instance of your main window
    window.setWindowTitle('My GUI Application')
    window.show()                 # Show the main window
    return app.exec_()            # Start the application's event loop


# Run the application
if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    ex = ModelViewer()
    ex.show()
    sys.exit(app.exec_())